
Analog_Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  000055cc  00005660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800150  00800150  00005750  2**0
                  ALLOC
  3 .stab         00005400  00000000  00000000  00005750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023f7  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000cf47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d087  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ee40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000fd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_6>
      1c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <main>
      8a:	0c 94 e4 2a 	jmp	0x55c8	; 0x55c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 2a 	jmp	0x555a	; 0x555a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 2a 	jmp	0x5592	; 0x5592 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 2a 	jmp	0x555a	; 0x555a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 2a 	jmp	0x5592	; 0x5592 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b9 2a 	jmp	0x5572	; 0x5572 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d5 2a 	jmp	0x55aa	; 0x55aa <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 2a 	jmp	0x557a	; 0x557a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d9 2a 	jmp	0x55b2	; 0x55b2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TI2_voidInit>:
#include "../../../Common/Bit_Math.h"
#include "../../../Common/Macro.h"

#include "../Header/TIMER2_Interface.h"

void TI2_voidInit(u8 Local_CompareValue){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TI2_TCCR2, TI2_WGM20);
     b52:	a5 e4       	ldi	r26, 0x45	; 69
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e5 e4       	ldi	r30, 0x45	; 69
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	8f 7b       	andi	r24, 0xBF	; 191
     b5e:	8c 93       	st	X, r24
	SET_BIT(TI2_TCCR2, TI2_WGM21);
     b60:	a5 e4       	ldi	r26, 0x45	; 69
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e5 e4       	ldi	r30, 0x45	; 69
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	88 60       	ori	r24, 0x08	; 8
     b6c:	8c 93       	st	X, r24


	/*Set compare match value to 200*/
	TI2_OCR2=Local_CompareValue;
     b6e:	e3 e4       	ldi	r30, 0x43	; 67
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	80 83       	st	Z, r24

	/*Set PRESCALAR 256*/
	CLR_BIT(TI2_TCCR2, TI2_CS20);
     b76:	a5 e4       	ldi	r26, 0x45	; 69
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e5 e4       	ldi	r30, 0x45	; 69
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	8e 7f       	andi	r24, 0xFE	; 254
     b82:	8c 93       	st	X, r24
	SET_BIT(TI2_TCCR2, TI2_CS21);
     b84:	a5 e4       	ldi	r26, 0x45	; 69
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e5 e4       	ldi	r30, 0x45	; 69
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	8c 93       	st	X, r24
	SET_BIT(TI2_TCCR2, TI2_CS22);
     b92:	a5 e4       	ldi	r26, 0x45	; 69
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e5 e4       	ldi	r30, 0x45	; 69
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	84 60       	ori	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24

	/*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	SET_BIT(TI2_TIMSK,TI2_OCIE2);
     ba0:	a9 e5       	ldi	r26, 0x59	; 89
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e9 e5       	ldi	r30, 0x59	; 89
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	80 68       	ori	r24, 0x80	; 128
     bac:	8c 93       	st	X, r24
}
     bae:	0f 90       	pop	r0
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <TI2_voidDeInit>:

void TI2_voidDeInit(){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TI2_TCCR2, TI2_CS20);
     bbe:	a5 e4       	ldi	r26, 0x45	; 69
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e4       	ldi	r30, 0x45	; 69
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8e 7f       	andi	r24, 0xFE	; 254
     bca:	8c 93       	st	X, r24
	CLR_BIT(TI2_TCCR2, TI2_CS21);
     bcc:	a5 e4       	ldi	r26, 0x45	; 69
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e4       	ldi	r30, 0x45	; 69
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	8c 93       	st	X, r24
	CLR_BIT(TI2_TCCR2, TI2_CS22);
     bda:	a5 e4       	ldi	r26, 0x45	; 69
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e4       	ldi	r30, 0x45	; 69
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	8c 93       	st	X, r24
	/*OUTPUT COMPARE MATCH INTERRUPT DISABLE*/
	CLR_BIT(TI2_TIMSK,TI2_OCIE2);
     be8:	a9 e5       	ldi	r26, 0x59	; 89
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e9 e5       	ldi	r30, 0x59	; 89
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	8c 93       	st	X, r24
	TI2_TCNT2 = 0;
     bf6:	e4 e4       	ldi	r30, 0x44	; 68
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	10 82       	st	Z, r1
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <TI2_voidSetBusyWait>:


void TI2_voidSetBusyWait(u16 Copy_u8WaitTime){
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	00 d0       	rcall	.+0      	; 0xc08 <TI2_voidSetBusyWait+0x6>
     c08:	00 d0       	rcall	.+0      	; 0xc0a <TI2_voidSetBusyWait+0x8>
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	9d 83       	std	Y+5, r25	; 0x05
     c12:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u8Counter = 0;
     c14:	1b 82       	std	Y+3, r1	; 0x03
     c16:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter = 0;
     c18:	19 82       	std	Y+1, r1	; 0x01
     c1a:	18 c0       	rjmp	.+48     	; 0xc4c <TI2_voidSetBusyWait+0x4a>
	while(Local_u8Counter != Copy_u8WaitTime){
		if(GET_BIT(TI2_TIFR,TI2_OCF2)){
     c1c:	e8 e5       	ldi	r30, 0x58	; 88
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	54 f4       	brge	.+20     	; 0xc3a <TI2_voidSetBusyWait+0x38>
			counter++;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	89 83       	std	Y+1, r24	; 0x01
			SET_BIT(TI2_TIFR,TI2_OCF2);
     c2c:	a8 e5       	ldi	r26, 0x58	; 88
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e8 e5       	ldi	r30, 0x58	; 88
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 68       	ori	r24, 0x80	; 128
     c38:	8c 93       	st	X, r24
		}
		if(counter == 4){
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	31 f4       	brne	.+12     	; 0xc4c <TI2_voidSetBusyWait+0x4a>
			Local_u8Counter++;
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	9b 83       	std	Y+3, r25	; 0x03
     c48:	8a 83       	std	Y+2, r24	; 0x02
			counter = 0;
     c4a:	19 82       	std	Y+1, r1	; 0x01


void TI2_voidSetBusyWait(u16 Copy_u8WaitTime){
	u16 Local_u8Counter = 0;
	u8 counter = 0;
	while(Local_u8Counter != Copy_u8WaitTime){
     c4c:	2a 81       	ldd	r18, Y+2	; 0x02
     c4e:	3b 81       	ldd	r19, Y+3	; 0x03
     c50:	8c 81       	ldd	r24, Y+4	; 0x04
     c52:	9d 81       	ldd	r25, Y+5	; 0x05
     c54:	28 17       	cp	r18, r24
     c56:	39 07       	cpc	r19, r25
     c58:	09 f7       	brne	.-62     	; 0xc1c <TI2_voidSetBusyWait+0x1a>
		if(counter == 4){
			Local_u8Counter++;
			counter = 0;
		}
	}
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <TI2_CallBackFunctionCTC>:

static void (*GPTF_CTC) (void) = NULL;

void TI2_CallBackFunctionCTC(void (*PTF)(void)){
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <TI2_CallBackFunctionCTC+0x6>
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	89 83       	std	Y+1, r24	; 0x01
	if (PTF != NULL){
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	31 f0       	breq	.+12     	; 0xc8c <TI2_CallBackFunctionCTC+0x22>
		GPTF_CTC = PTF ;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	90 93 51 01 	sts	0x0151, r25
     c88:	80 93 50 01 	sts	0x0150, r24
	}
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	08 95       	ret

00000c96 <__vector_4>:

//CTC Mode Interrupt

void __vector_4(void){
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	2f 93       	push	r18
     ca2:	3f 93       	push	r19
     ca4:	4f 93       	push	r20
     ca6:	5f 93       	push	r21
     ca8:	6f 93       	push	r22
     caa:	7f 93       	push	r23
     cac:	8f 93       	push	r24
     cae:	9f 93       	push	r25
     cb0:	af 93       	push	r26
     cb2:	bf 93       	push	r27
     cb4:	ef 93       	push	r30
     cb6:	ff 93       	push	r31
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
	if(GPTF_CTC != NULL){
     cc0:	80 91 50 01 	lds	r24, 0x0150
     cc4:	90 91 51 01 	lds	r25, 0x0151
     cc8:	00 97       	sbiw	r24, 0x00	; 0
     cca:	29 f0       	breq	.+10     	; 0xcd6 <__vector_4+0x40>
		GPTF_CTC();
     ccc:	e0 91 50 01 	lds	r30, 0x0150
     cd0:	f0 91 51 01 	lds	r31, 0x0151
     cd4:	09 95       	icall
	}
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <ICU_voidSelectEdge>:
#include "../../../Common/Macro.h"

#include "../Header/TI1_Interface.h"
#include "../../DIO/Header/DIO_Interface.h"

void ICU_voidSelectEdge(u8 Local_Edge){
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <ICU_voidSelectEdge+0x6>
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_Edge){
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	3b 83       	std	Y+3, r19	; 0x03
     d12:	2a 83       	std	Y+2, r18	; 0x02
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	9b 81       	ldd	r25, Y+3	; 0x03
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	31 f0       	breq	.+12     	; 0xd28 <ICU_voidSelectEdge+0x2c>
     d1c:	2a 81       	ldd	r18, Y+2	; 0x02
     d1e:	3b 81       	ldd	r19, Y+3	; 0x03
     d20:	21 30       	cpi	r18, 0x01	; 1
     d22:	31 05       	cpc	r19, r1
     d24:	49 f0       	breq	.+18     	; 0xd38 <ICU_voidSelectEdge+0x3c>
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <ICU_voidSelectEdge+0x4a>
	case TI1_Falling:
		Clear_Bit(TI1_TCCR1B,TI1_ICES1);
     d28:	ae e4       	ldi	r26, 0x4E	; 78
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ee e4       	ldi	r30, 0x4E	; 78
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7b       	andi	r24, 0xBF	; 191
     d34:	8c 93       	st	X, r24
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <ICU_voidSelectEdge+0x4a>
		break;
	case TI1_Rising:
		Set_Bit(TI1_TCCR1B,TI1_ICES1);
     d38:	ae e4       	ldi	r26, 0x4E	; 78
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ee e4       	ldi	r30, 0x4E	; 78
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 64       	ori	r24, 0x40	; 64
     d44:	8c 93       	st	X, r24
		break;
	}
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <ICU_voidInit>:

void ICU_voidInit(){
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinDir(DIO_GroupD,DIO_PIN6,Input);
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	66 e0       	ldi	r22, 0x06	; 6
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>
	//Normal Mode
	Clear_Bit(TI1_TCCR1A,TI1_WGM10);
     d64:	af e4       	ldi	r26, 0x4F	; 79
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	8e 7f       	andi	r24, 0xFE	; 254
     d70:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1A,TI1_WGM11);
     d72:	af e4       	ldi	r26, 0x4F	; 79
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ef e4       	ldi	r30, 0x4F	; 79
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8d 7f       	andi	r24, 0xFD	; 253
     d7e:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM12);
     d80:	ae e4       	ldi	r26, 0x4E	; 78
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	ee e4       	ldi	r30, 0x4E	; 78
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	87 7f       	andi	r24, 0xF7	; 247
     d8c:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM13);
     d8e:	ae e4       	ldi	r26, 0x4E	; 78
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ee e4       	ldi	r30, 0x4E	; 78
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8f 7e       	andi	r24, 0xEF	; 239
     d9a:	8c 93       	st	X, r24

	Set_Bit(TI1_TIMSK,TI1_TICIE1);
     d9c:	a9 e5       	ldi	r26, 0x59	; 89
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e9 e5       	ldi	r30, 0x59	; 89
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 62       	ori	r24, 0x20	; 32
     da8:	8c 93       	st	X, r24
	ICU_voidSelectEdge(TI1_Rising);
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 7e 06 	call	0xcfc	; 0xcfc <ICU_voidSelectEdge>

	//Prescaler 8
	Clear_Bit(TI1_TCCR1B,TI1_CS10);
     db0:	ae e4       	ldi	r26, 0x4E	; 78
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ee e4       	ldi	r30, 0x4E	; 78
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	8e 7f       	andi	r24, 0xFE	; 254
     dbc:	8c 93       	st	X, r24
	Set_Bit(TI1_TCCR1B,TI1_CS11);
     dbe:	ae e4       	ldi	r26, 0x4E	; 78
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ee e4       	ldi	r30, 0x4E	; 78
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_CS12);
     dcc:	ae e4       	ldi	r26, 0x4E	; 78
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	ee e4       	ldi	r30, 0x4E	; 78
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	8b 7f       	andi	r24, 0xFB	; 251
     dd8:	8c 93       	st	X, r24
}
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <ICU_CallBackFunction>:

static void (*GPTF_ICU) (void) = NULL;

void ICU_CallBackFunction(void (*PTF) (void)){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <ICU_CallBackFunction+0x6>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
	if (PTF!=NULL){
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	31 f0       	breq	.+12     	; 0xe02 <ICU_CallBackFunction+0x22>
		GPTF_ICU = PTF ;
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	9a 81       	ldd	r25, Y+2	; 0x02
     dfa:	90 93 53 01 	sts	0x0153, r25
     dfe:	80 93 52 01 	sts	0x0152, r24
	}
}
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <__vector_6>:

void __vector_6(){
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62

	if(GPTF_ICU != NULL){
     e36:	80 91 52 01 	lds	r24, 0x0152
     e3a:	90 91 53 01 	lds	r25, 0x0153
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	29 f0       	breq	.+10     	; 0xe4c <__vector_6+0x40>
		GPTF_ICU();
     e42:	e0 91 52 01 	lds	r30, 0x0152
     e46:	f0 91 53 01 	lds	r31, 0x0153
     e4a:	09 95       	icall
	}
}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	ff 91       	pop	r31
     e52:	ef 91       	pop	r30
     e54:	bf 91       	pop	r27
     e56:	af 91       	pop	r26
     e58:	9f 91       	pop	r25
     e5a:	8f 91       	pop	r24
     e5c:	7f 91       	pop	r23
     e5e:	6f 91       	pop	r22
     e60:	5f 91       	pop	r21
     e62:	4f 91       	pop	r20
     e64:	3f 91       	pop	r19
     e66:	2f 91       	pop	r18
     e68:	0f 90       	pop	r0
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	0f 90       	pop	r0
     e6e:	1f 90       	pop	r1
     e70:	18 95       	reti

00000e72 <ICU_voidResetTimer>:

void ICU_voidResetTimer(){
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
	TI1_TCNT1 = 0;
     e7a:	ec e4       	ldi	r30, 0x4C	; 76
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	10 82       	st	Z, r1
}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <ICU_u16ReadTimer>:

u16 ICU_u16ReadTimer(){
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
	return TI1_ICR1;
     e90:	e6 e4       	ldi	r30, 0x46	; 70
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
}
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <TI1_voidDelayInit>:

void TI1_voidDelayInit(u8 Local_Prescaler){
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <TI1_voidDelayInit+0x6>
     ea4:	0f 92       	push	r0
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01

	//Select the Mode -> CTC:
	Clear_Bit(TI1_TCCR1A,TI1_WGM10);
     eac:	af e4       	ldi	r26, 0x4F	; 79
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	8e 7f       	andi	r24, 0xFE	; 254
     eb8:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1A,TI1_WGM11);
     eba:	af e4       	ldi	r26, 0x4F	; 79
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ef e4       	ldi	r30, 0x4F	; 79
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8d 7f       	andi	r24, 0xFD	; 253
     ec6:	8c 93       	st	X, r24
	Set_Bit(TI1_TCCR1B,TI1_WGM12);
     ec8:	ae e4       	ldi	r26, 0x4E	; 78
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ee e4       	ldi	r30, 0x4E	; 78
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	88 60       	ori	r24, 0x08	; 8
     ed4:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM13);
     ed6:	ae e4       	ldi	r26, 0x4E	; 78
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	ee e4       	ldi	r30, 0x4E	; 78
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	8c 93       	st	X, r24

	TI1_OCR1A = 50000;
     ee4:	ea e4       	ldi	r30, 0x4A	; 74
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 e5       	ldi	r24, 0x50	; 80
     eea:	93 ec       	ldi	r25, 0xC3	; 195
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24

	//Select the Prescaler
	switch (Local_Prescaler)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	3b 83       	std	Y+3, r19	; 0x03
     ef8:	2a 83       	std	Y+2, r18	; 0x02
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	9b 81       	ldd	r25, Y+3	; 0x03
     efe:	85 30       	cpi	r24, 0x05	; 5
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <TI1_voidDelayInit+0x68>
     f04:	5e c0       	rjmp	.+188    	; 0xfc2 <TI1_voidDelayInit+0x124>
     f06:	2a 81       	ldd	r18, Y+2	; 0x02
     f08:	3b 81       	ldd	r19, Y+3	; 0x03
     f0a:	26 30       	cpi	r18, 0x06	; 6
     f0c:	31 05       	cpc	r19, r1
     f0e:	5c f4       	brge	.+22     	; 0xf26 <TI1_voidDelayInit+0x88>
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	82 30       	cpi	r24, 0x02	; 2
     f16:	91 05       	cpc	r25, r1
     f18:	91 f0       	breq	.+36     	; 0xf3e <TI1_voidDelayInit+0xa0>
     f1a:	2a 81       	ldd	r18, Y+2	; 0x02
     f1c:	3b 81       	ldd	r19, Y+3	; 0x03
     f1e:	24 30       	cpi	r18, 0x04	; 4
     f20:	31 05       	cpc	r19, r1
     f22:	c9 f1       	breq	.+114    	; 0xf96 <TI1_voidDelayInit+0xf8>
     f24:	22 c0       	rjmp	.+68     	; 0xf6a <TI1_voidDelayInit+0xcc>
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	9b 81       	ldd	r25, Y+3	; 0x03
     f2a:	86 30       	cpi	r24, 0x06	; 6
     f2c:	91 05       	cpc	r25, r1
     f2e:	09 f4       	brne	.+2      	; 0xf32 <TI1_voidDelayInit+0x94>
     f30:	5e c0       	rjmp	.+188    	; 0xfee <TI1_voidDelayInit+0x150>
     f32:	2a 81       	ldd	r18, Y+2	; 0x02
     f34:	3b 81       	ldd	r19, Y+3	; 0x03
     f36:	29 30       	cpi	r18, 0x09	; 9
     f38:	31 05       	cpc	r19, r1
     f3a:	bc f4       	brge	.+46     	; 0xf6a <TI1_voidDelayInit+0xcc>
     f3c:	6d c0       	rjmp	.+218    	; 0x1018 <TI1_voidDelayInit+0x17a>
	{
	case TI1_NoPrescale:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
     f3e:	ae e4       	ldi	r26, 0x4E	; 78
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ee e4       	ldi	r30, 0x4E	; 78
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	81 60       	ori	r24, 0x01	; 1
     f4a:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
     f4c:	ae e4       	ldi	r26, 0x4E	; 78
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	ee e4       	ldi	r30, 0x4E	; 78
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8d 7f       	andi	r24, 0xFD	; 253
     f58:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
     f5a:	ae e4       	ldi	r26, 0x4E	; 78
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ee e4       	ldi	r30, 0x4E	; 78
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8b 7f       	andi	r24, 0xFB	; 251
     f66:	8c 93       	st	X, r24
     f68:	57 c0       	rjmp	.+174    	; 0x1018 <TI1_voidDelayInit+0x17a>
		break;
	default:
	case TI1_Prescaler8:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
     f6a:	ae e4       	ldi	r26, 0x4E	; 78
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ee e4       	ldi	r30, 0x4E	; 78
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
     f78:	ae e4       	ldi	r26, 0x4E	; 78
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ee e4       	ldi	r30, 0x4E	; 78
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	82 60       	ori	r24, 0x02	; 2
     f84:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
     f86:	ae e4       	ldi	r26, 0x4E	; 78
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ee e4       	ldi	r30, 0x4E	; 78
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8b 7f       	andi	r24, 0xFB	; 251
     f92:	8c 93       	st	X, r24
     f94:	41 c0       	rjmp	.+130    	; 0x1018 <TI1_voidDelayInit+0x17a>
		break;
	case TI1_Prescaler64:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
     f96:	ae e4       	ldi	r26, 0x4E	; 78
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	ee e4       	ldi	r30, 0x4E	; 78
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	81 60       	ori	r24, 0x01	; 1
     fa2:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
     fa4:	ae e4       	ldi	r26, 0x4E	; 78
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ee e4       	ldi	r30, 0x4E	; 78
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	82 60       	ori	r24, 0x02	; 2
     fb0:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
     fb2:	ae e4       	ldi	r26, 0x4E	; 78
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ee e4       	ldi	r30, 0x4E	; 78
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8b 7f       	andi	r24, 0xFB	; 251
     fbe:	8c 93       	st	X, r24
     fc0:	2b c0       	rjmp	.+86     	; 0x1018 <TI1_voidDelayInit+0x17a>
		break;
	case TI1_Prescaler256:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
     fc2:	ae e4       	ldi	r26, 0x4E	; 78
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e4       	ldi	r30, 0x4E	; 78
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8e 7f       	andi	r24, 0xFE	; 254
     fce:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
     fd0:	ae e4       	ldi	r26, 0x4E	; 78
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ee e4       	ldi	r30, 0x4E	; 78
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8d 7f       	andi	r24, 0xFD	; 253
     fdc:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS12);
     fde:	ae e4       	ldi	r26, 0x4E	; 78
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ee e4       	ldi	r30, 0x4E	; 78
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	84 60       	ori	r24, 0x04	; 4
     fea:	8c 93       	st	X, r24
     fec:	15 c0       	rjmp	.+42     	; 0x1018 <TI1_voidDelayInit+0x17a>
		break;
	case TI1_Prescaler1024:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
     fee:	ae e4       	ldi	r26, 0x4E	; 78
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ee e4       	ldi	r30, 0x4E	; 78
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	81 60       	ori	r24, 0x01	; 1
     ffa:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
     ffc:	ae e4       	ldi	r26, 0x4E	; 78
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ee e4       	ldi	r30, 0x4E	; 78
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8d 7f       	andi	r24, 0xFD	; 253
    1008:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS12);
    100a:	ae e4       	ldi	r26, 0x4E	; 78
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ee e4       	ldi	r30, 0x4E	; 78
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	84 60       	ori	r24, 0x04	; 4
    1016:	8c 93       	st	X, r24
	case TI1_ExternalClkFalling:
	case TI1_ExternalClkRising:
		break;

	}
	SET_BIT(TI1_TIFR,TI1_OCF1A); //Interrupt Enable
    1018:	a8 e5       	ldi	r26, 0x58	; 88
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e8 e5       	ldi	r30, 0x58	; 88
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 61       	ori	r24, 0x10	; 16
    1024:	8c 93       	st	X, r24
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <TI1_voidCTCInit>:

void TI1_voidCTCInit(u16 Local_CompareValue, u8 Local_Prescaler){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <TI1_voidCTCInit+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <TI1_voidCTCInit+0x8>
    103a:	0f 92       	push	r0
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6b 83       	std	Y+3, r22	; 0x03

	//Select the Mode -> CTC:
	Clear_Bit(TI1_TCCR1A,TI1_WGM10);
    1046:	af e4       	ldi	r26, 0x4F	; 79
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ef e4       	ldi	r30, 0x4F	; 79
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1A,TI1_WGM11);
    1054:	af e4       	ldi	r26, 0x4F	; 79
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ef e4       	ldi	r30, 0x4F	; 79
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8d 7f       	andi	r24, 0xFD	; 253
    1060:	8c 93       	st	X, r24
	Set_Bit(TI1_TCCR1B,TI1_WGM12);
    1062:	ae e4       	ldi	r26, 0x4E	; 78
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ee e4       	ldi	r30, 0x4E	; 78
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 60       	ori	r24, 0x08	; 8
    106e:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM13);
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8f 7e       	andi	r24, 0xEF	; 239
    107c:	8c 93       	st	X, r24

	TI1_OCR1A = Local_CompareValue;
    107e:	ea e4       	ldi	r30, 0x4A	; 74
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	91 83       	std	Z+1, r25	; 0x01
    1088:	80 83       	st	Z, r24

	//Select the Prescaler
	switch (Local_Prescaler)
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3d 83       	std	Y+5, r19	; 0x05
    1092:	2c 83       	std	Y+4, r18	; 0x04
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	85 30       	cpi	r24, 0x05	; 5
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <TI1_voidCTCInit+0x6e>
    109e:	5e c0       	rjmp	.+188    	; 0x115c <TI1_voidCTCInit+0x12a>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	26 30       	cpi	r18, 0x06	; 6
    10a6:	31 05       	cpc	r19, r1
    10a8:	5c f4       	brge	.+22     	; 0x10c0 <TI1_voidCTCInit+0x8e>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	91 05       	cpc	r25, r1
    10b2:	91 f0       	breq	.+36     	; 0x10d8 <TI1_voidCTCInit+0xa6>
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	24 30       	cpi	r18, 0x04	; 4
    10ba:	31 05       	cpc	r19, r1
    10bc:	c9 f1       	breq	.+114    	; 0x1130 <TI1_voidCTCInit+0xfe>
    10be:	22 c0       	rjmp	.+68     	; 0x1104 <TI1_voidCTCInit+0xd2>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	86 30       	cpi	r24, 0x06	; 6
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <TI1_voidCTCInit+0x9a>
    10ca:	5e c0       	rjmp	.+188    	; 0x1188 <TI1_voidCTCInit+0x156>
    10cc:	2c 81       	ldd	r18, Y+4	; 0x04
    10ce:	3d 81       	ldd	r19, Y+5	; 0x05
    10d0:	29 30       	cpi	r18, 0x09	; 9
    10d2:	31 05       	cpc	r19, r1
    10d4:	bc f4       	brge	.+46     	; 0x1104 <TI1_voidCTCInit+0xd2>
    10d6:	6d c0       	rjmp	.+218    	; 0x11b2 <TI1_voidCTCInit+0x180>
	{
	case TI1_NoPrescale:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
    10d8:	ae e4       	ldi	r26, 0x4E	; 78
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	ee e4       	ldi	r30, 0x4E	; 78
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    10e6:	ae e4       	ldi	r26, 0x4E	; 78
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	ee e4       	ldi	r30, 0x4E	; 78
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8d 7f       	andi	r24, 0xFD	; 253
    10f2:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    10f4:	ae e4       	ldi	r26, 0x4E	; 78
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ee e4       	ldi	r30, 0x4E	; 78
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	8c 93       	st	X, r24
    1102:	57 c0       	rjmp	.+174    	; 0x11b2 <TI1_voidCTCInit+0x180>
		break;
	default:
	case TI1_Prescaler8:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
    1104:	ae e4       	ldi	r26, 0x4E	; 78
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	ee e4       	ldi	r30, 0x4E	; 78
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	8e 7f       	andi	r24, 0xFE	; 254
    1110:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
    1112:	ae e4       	ldi	r26, 0x4E	; 78
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ee e4       	ldi	r30, 0x4E	; 78
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	82 60       	ori	r24, 0x02	; 2
    111e:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    1120:	ae e4       	ldi	r26, 0x4E	; 78
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	ee e4       	ldi	r30, 0x4E	; 78
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8b 7f       	andi	r24, 0xFB	; 251
    112c:	8c 93       	st	X, r24
    112e:	41 c0       	rjmp	.+130    	; 0x11b2 <TI1_voidCTCInit+0x180>
		break;
	case TI1_Prescaler64:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
    1130:	ae e4       	ldi	r26, 0x4E	; 78
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ee e4       	ldi	r30, 0x4E	; 78
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
    113e:	ae e4       	ldi	r26, 0x4E	; 78
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ee e4       	ldi	r30, 0x4E	; 78
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    114c:	ae e4       	ldi	r26, 0x4E	; 78
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e4       	ldi	r30, 0x4E	; 78
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8b 7f       	andi	r24, 0xFB	; 251
    1158:	8c 93       	st	X, r24
    115a:	2b c0       	rjmp	.+86     	; 0x11b2 <TI1_voidCTCInit+0x180>
		break;
	case TI1_Prescaler256:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
    115c:	ae e4       	ldi	r26, 0x4E	; 78
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ee e4       	ldi	r30, 0x4E	; 78
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8e 7f       	andi	r24, 0xFE	; 254
    1168:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8d 7f       	andi	r24, 0xFD	; 253
    1176:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS12);
    1178:	ae e4       	ldi	r26, 0x4E	; 78
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ee e4       	ldi	r30, 0x4E	; 78
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	84 60       	ori	r24, 0x04	; 4
    1184:	8c 93       	st	X, r24
    1186:	15 c0       	rjmp	.+42     	; 0x11b2 <TI1_voidCTCInit+0x180>
		break;
	case TI1_Prescaler1024:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
    1188:	ae e4       	ldi	r26, 0x4E	; 78
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ee e4       	ldi	r30, 0x4E	; 78
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    1196:	ae e4       	ldi	r26, 0x4E	; 78
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	ee e4       	ldi	r30, 0x4E	; 78
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8d 7f       	andi	r24, 0xFD	; 253
    11a2:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS12);
    11a4:	ae e4       	ldi	r26, 0x4E	; 78
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ee e4       	ldi	r30, 0x4E	; 78
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	8c 93       	st	X, r24
	case TI1_ExternalClkFalling:
	case TI1_ExternalClkRising:
		break;

	}
	SET_BIT(TI1_TIMSK,TI1_OCIE1A); //Interrupt Enable
    11b2:	a9 e5       	ldi	r26, 0x59	; 89
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e9 e5       	ldi	r30, 0x59	; 89
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 61       	ori	r24, 0x10	; 16
    11be:	8c 93       	st	X, r24
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <TI1_voidSetBusyWait>:

void TI1_voidSetBusyWait(u32 Copy_u32WaitTimeInMicros){
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	28 97       	sbiw	r28, 0x08	; 8
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	6d 83       	std	Y+5, r22	; 0x05
    11e6:	7e 83       	std	Y+6, r23	; 0x06
    11e8:	8f 83       	std	Y+7, r24	; 0x07
    11ea:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Counter = 0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	1a 82       	std	Y+2, r1	; 0x02
    11f0:	1b 82       	std	Y+3, r1	; 0x03
    11f2:	1c 82       	std	Y+4, r1	; 0x04
    11f4:	1d c0       	rjmp	.+58     	; 0x1230 <TI1_voidSetBusyWait+0x60>
	while(Local_u32Counter < Copy_u32WaitTimeInMicros){
		if(GET_BIT(TI1_TIFR,TI1_OCF1A)){
    11f6:	e8 e5       	ldi	r30, 0x58	; 88
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	82 95       	swap	r24
    11fe:	8f 70       	andi	r24, 0x0F	; 15
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	81 70       	andi	r24, 0x01	; 1
    1206:	90 70       	andi	r25, 0x00	; 0
    1208:	88 23       	and	r24, r24
    120a:	91 f0       	breq	.+36     	; 0x1230 <TI1_voidSetBusyWait+0x60>
			Local_u32Counter += 50;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	ab 81       	ldd	r26, Y+3	; 0x03
    1212:	bc 81       	ldd	r27, Y+4	; 0x04
    1214:	c2 96       	adiw	r24, 0x32	; 50
    1216:	a1 1d       	adc	r26, r1
    1218:	b1 1d       	adc	r27, r1
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	ab 83       	std	Y+3, r26	; 0x03
    1220:	bc 83       	std	Y+4, r27	; 0x04
			SET_BIT(TI1_TIFR,TI1_OCF1A);
    1222:	a8 e5       	ldi	r26, 0x58	; 88
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e5       	ldi	r30, 0x58	; 88
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	80 61       	ori	r24, 0x10	; 16
    122e:	8c 93       	st	X, r24
	SET_BIT(TI1_TIMSK,TI1_OCIE1A); //Interrupt Enable
}

void TI1_voidSetBusyWait(u32 Copy_u32WaitTimeInMicros){
	u32 Local_u32Counter = 0;
	while(Local_u32Counter < Copy_u32WaitTimeInMicros){
    1230:	29 81       	ldd	r18, Y+1	; 0x01
    1232:	3a 81       	ldd	r19, Y+2	; 0x02
    1234:	4b 81       	ldd	r20, Y+3	; 0x03
    1236:	5c 81       	ldd	r21, Y+4	; 0x04
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	af 81       	ldd	r26, Y+7	; 0x07
    123e:	b8 85       	ldd	r27, Y+8	; 0x08
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	4a 07       	cpc	r20, r26
    1246:	5b 07       	cpc	r21, r27
    1248:	b0 f2       	brcs	.-84     	; 0x11f6 <TI1_voidSetBusyWait+0x26>
		if(GET_BIT(TI1_TIFR,TI1_OCF1A)){
			Local_u32Counter += 50;
			SET_BIT(TI1_TIFR,TI1_OCF1A);
		}
	}
}
    124a:	28 96       	adiw	r28, 0x08	; 8
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <TI1_CallBackFunctionCTC>:

static void (*GPTF_CTC) (void) = NULL;
void TI1_CallBackFunctionCTC(void (*PTF)(void))
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <TI1_CallBackFunctionCTC+0x6>
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	9a 83       	std	Y+2, r25	; 0x02
    1268:	89 83       	std	Y+1, r24	; 0x01
	if (PTF != NULL)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	31 f0       	breq	.+12     	; 0x127e <TI1_CallBackFunctionCTC+0x22>
	{
		GPTF_CTC = PTF ;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	90 93 55 01 	sts	0x0155, r25
    127a:	80 93 54 01 	sts	0x0154, r24
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <__vector_7>:

void __vector_7(void)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	if(GPTF_CTC != NULL){
    12b2:	80 91 54 01 	lds	r24, 0x0154
    12b6:	90 91 55 01 	lds	r25, 0x0155
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	29 f0       	breq	.+10     	; 0x12c8 <__vector_7+0x40>
		GPTF_CTC();
    12be:	e0 91 54 01 	lds	r30, 0x0154
    12c2:	f0 91 55 01 	lds	r31, 0x0155
    12c6:	09 95       	icall
	}
}
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	ff 91       	pop	r31
    12ce:	ef 91       	pop	r30
    12d0:	bf 91       	pop	r27
    12d2:	af 91       	pop	r26
    12d4:	9f 91       	pop	r25
    12d6:	8f 91       	pop	r24
    12d8:	7f 91       	pop	r23
    12da:	6f 91       	pop	r22
    12dc:	5f 91       	pop	r21
    12de:	4f 91       	pop	r20
    12e0:	3f 91       	pop	r19
    12e2:	2f 91       	pop	r18
    12e4:	0f 90       	pop	r0
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	0f 90       	pop	r0
    12ea:	1f 90       	pop	r1
    12ec:	18 95       	reti

000012ee <TI0_voidInitCTC>:
#include "../../DIO/Header/DIO_Interface.h"
#include "../Header/TI0_Interface.h"

u8 CompareValue = 0;

void TI0_voidInitCTC(u8 Local_CompareValue, u8 Local_ActionState , u8 Local_Prescaler ){
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	27 97       	sbiw	r28, 0x07	; 7
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	6a 83       	std	Y+2, r22	; 0x02
    1306:	4b 83       	std	Y+3, r20	; 0x03
	//
	// * select the type (GWM01 -> 1 /GWM00 -> 0 ) CTC mode
	Set_Bit(TI0_TCCR0,TI0_WGM01);
    1308:	a3 e5       	ldi	r26, 0x53	; 83
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e3 e5       	ldi	r30, 0x53	; 83
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	88 60       	ori	r24, 0x08	; 8
    1314:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_WGM00);
    1316:	a3 e5       	ldi	r26, 0x53	; 83
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e3 e5       	ldi	r30, 0x53	; 83
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	8c 93       	st	X, r24
	// * Set The Compare value Value In the Register :
	TI0_OCR0= Local_CompareValue;
    1324:	ec e5       	ldi	r30, 0x5C	; 92
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	80 83       	st	Z, r24
	// * Select for the action on the OC pin :
	switch(Local_ActionState){
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3f 83       	std	Y+7, r19	; 0x07
    1334:	2e 83       	std	Y+6, r18	; 0x06
    1336:	8e 81       	ldd	r24, Y+6	; 0x06
    1338:	9f 81       	ldd	r25, Y+7	; 0x07
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	41 f1       	breq	.+80     	; 0x1390 <TI0_voidInitCTC+0xa2>
    1340:	2e 81       	ldd	r18, Y+6	; 0x06
    1342:	3f 81       	ldd	r19, Y+7	; 0x07
    1344:	24 30       	cpi	r18, 0x04	; 4
    1346:	31 05       	cpc	r19, r1
    1348:	91 f1       	breq	.+100    	; 0x13ae <TI0_voidInitCTC+0xc0>
    134a:	8e 81       	ldd	r24, Y+6	; 0x06
    134c:	9f 81       	ldd	r25, Y+7	; 0x07
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	91 05       	cpc	r25, r1
    1352:	79 f0       	breq	.+30     	; 0x1372 <TI0_voidInitCTC+0x84>
	default:
	case TI0_OCdisconnect:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    1354:	a3 e5       	ldi	r26, 0x53	; 83
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e3 e5       	ldi	r30, 0x53	; 83
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 7e       	andi	r24, 0xEF	; 239
    1360:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    1362:	a3 e5       	ldi	r26, 0x53	; 83
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e3 e5       	ldi	r30, 0x53	; 83
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8f 7d       	andi	r24, 0xDF	; 223
    136e:	8c 93       	st	X, r24
    1370:	2c c0       	rjmp	.+88     	; 0x13ca <TI0_voidInitCTC+0xdc>
		break;
	case TI0_OCToggle:
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    1372:	a3 e5       	ldi	r26, 0x53	; 83
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e3 e5       	ldi	r30, 0x53	; 83
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7d       	andi	r24, 0xDF	; 223
    137e:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM00);
    1380:	a3 e5       	ldi	r26, 0x53	; 83
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e3 e5       	ldi	r30, 0x53	; 83
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	80 61       	ori	r24, 0x10	; 16
    138c:	8c 93       	st	X, r24
    138e:	1d c0       	rjmp	.+58     	; 0x13ca <TI0_voidInitCTC+0xdc>
		break;
	case TI0_OCclear:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	8f 7e       	andi	r24, 0xEF	; 239
    139c:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    139e:	a3 e5       	ldi	r26, 0x53	; 83
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e3 e5       	ldi	r30, 0x53	; 83
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	80 62       	ori	r24, 0x20	; 32
    13aa:	8c 93       	st	X, r24
    13ac:	0e c0       	rjmp	.+28     	; 0x13ca <TI0_voidInitCTC+0xdc>
		break;
	case TI0_OCset:
		Set_Bit(TI0_TCCR0,TI0_COM00);
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	80 61       	ori	r24, 0x10	; 16
    13ba:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    13bc:	a3 e5       	ldi	r26, 0x53	; 83
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	80 62       	ori	r24, 0x20	; 32
    13c8:	8c 93       	st	X, r24
		break;
	}
	// * Set the preScaller
	switch (Local_Prescaler){
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	3d 83       	std	Y+5, r19	; 0x05
    13d2:	2c 83       	std	Y+4, r18	; 0x04
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	85 30       	cpi	r24, 0x05	; 5
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <TI0_voidInitCTC+0xf2>
    13de:	58 c0       	rjmp	.+176    	; 0x1490 <TI0_voidInitCTC+0x1a2>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	26 30       	cpi	r18, 0x06	; 6
    13e6:	31 05       	cpc	r19, r1
    13e8:	5c f4       	brge	.+22     	; 0x1400 <TI0_voidInitCTC+0x112>
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	91 05       	cpc	r25, r1
    13f2:	61 f0       	breq	.+24     	; 0x140c <TI0_voidInitCTC+0x11e>
    13f4:	2c 81       	ldd	r18, Y+4	; 0x04
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	24 30       	cpi	r18, 0x04	; 4
    13fa:	31 05       	cpc	r19, r1
    13fc:	99 f1       	breq	.+102    	; 0x1464 <TI0_voidInitCTC+0x176>
    13fe:	1c c0       	rjmp	.+56     	; 0x1438 <TI0_voidInitCTC+0x14a>
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	89 30       	cpi	r24, 0x09	; 9
    1406:	91 05       	cpc	r25, r1
    1408:	bc f4       	brge	.+46     	; 0x1438 <TI0_voidInitCTC+0x14a>
    140a:	57 c0       	rjmp	.+174    	; 0x14ba <TI0_voidInitCTC+0x1cc>
	case TI0_NoPrescale:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    140c:	a3 e5       	ldi	r26, 0x53	; 83
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e3 e5       	ldi	r30, 0x53	; 83
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	81 60       	ori	r24, 0x01	; 1
    1418:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    141a:	a3 e5       	ldi	r26, 0x53	; 83
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e5       	ldi	r30, 0x53	; 83
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8d 7f       	andi	r24, 0xFD	; 253
    1426:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	8b 7f       	andi	r24, 0xFB	; 251
    1434:	8c 93       	st	X, r24
    1436:	41 c0       	rjmp	.+130    	; 0x14ba <TI0_voidInitCTC+0x1cc>
		break;
	default:
	case TI0_Prescaler8:
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    1438:	a3 e5       	ldi	r26, 0x53	; 83
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e3 e5       	ldi	r30, 0x53	; 83
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8e 7f       	andi	r24, 0xFE	; 254
    1444:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    1446:	a3 e5       	ldi	r26, 0x53	; 83
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e3 e5       	ldi	r30, 0x53	; 83
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	82 60       	ori	r24, 0x02	; 2
    1452:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1454:	a3 e5       	ldi	r26, 0x53	; 83
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e3 e5       	ldi	r30, 0x53	; 83
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	8b 7f       	andi	r24, 0xFB	; 251
    1460:	8c 93       	st	X, r24
    1462:	2b c0       	rjmp	.+86     	; 0x14ba <TI0_voidInitCTC+0x1cc>
		break;
	case TI0_Prescaler64:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    1464:	a3 e5       	ldi	r26, 0x53	; 83
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e3 e5       	ldi	r30, 0x53	; 83
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	82 60       	ori	r24, 0x02	; 2
    147e:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8b 7f       	andi	r24, 0xFB	; 251
    148c:	8c 93       	st	X, r24
    148e:	15 c0       	rjmp	.+42     	; 0x14ba <TI0_voidInitCTC+0x1cc>
		break;
	case TI0_Prescaler256:
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    1490:	a3 e5       	ldi	r26, 0x53	; 83
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e3 e5       	ldi	r30, 0x53	; 83
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    149e:	a3 e5       	ldi	r26, 0x53	; 83
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e3 e5       	ldi	r30, 0x53	; 83
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8e 7f       	andi	r24, 0xFE	; 254
    14aa:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS02);
    14ac:	a3 e5       	ldi	r26, 0x53	; 83
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e3 e5       	ldi	r30, 0x53	; 83
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	84 60       	ori	r24, 0x04	; 4
    14b8:	8c 93       	st	X, r24
	case TI0_ExternalClkFalling:
	case TI0_ExternalClkRising:
		break;
	}
	// * Enable the Interrupt
	Set_Bit(TI0_TIMSK,TI0_OCIE0);
    14ba:	a9 e5       	ldi	r26, 0x59	; 89
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e9 e5       	ldi	r30, 0x59	; 89
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	82 60       	ori	r24, 0x02	; 2
    14c6:	8c 93       	st	X, r24
}
    14c8:	27 96       	adiw	r28, 0x07	; 7
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <TI0_voidInitDelay>:

void TI0_voidInitDelay(u8 Local_CompareValue, u8 Local_ActionState , u8 Local_Prescaler ){
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	27 97       	sbiw	r28, 0x07	; 7
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
    14f2:	4b 83       	std	Y+3, r20	; 0x03
	//
	// * select the type (GWM01 -> 1 /GWM00 -> 0 ) CTC mode
	Set_Bit(TI0_TCCR0,TI0_WGM01);
    14f4:	a3 e5       	ldi	r26, 0x53	; 83
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	88 60       	ori	r24, 0x08	; 8
    1500:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_WGM00);
    1502:	a3 e5       	ldi	r26, 0x53	; 83
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e3 e5       	ldi	r30, 0x53	; 83
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7b       	andi	r24, 0xBF	; 191
    150e:	8c 93       	st	X, r24
	// * Set The Compare value Value In the Register :
	TI0_OCR0= Local_CompareValue;
    1510:	ec e5       	ldi	r30, 0x5C	; 92
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	80 83       	st	Z, r24
	CompareValue = Local_CompareValue;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	80 93 56 01 	sts	0x0156, r24
	// * Select for the action on the OC pin :
	switch(Local_ActionState){
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	3f 83       	std	Y+7, r19	; 0x07
    1526:	2e 83       	std	Y+6, r18	; 0x06
    1528:	8e 81       	ldd	r24, Y+6	; 0x06
    152a:	9f 81       	ldd	r25, Y+7	; 0x07
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	41 f1       	breq	.+80     	; 0x1582 <TI0_voidInitDelay+0xa8>
    1532:	2e 81       	ldd	r18, Y+6	; 0x06
    1534:	3f 81       	ldd	r19, Y+7	; 0x07
    1536:	24 30       	cpi	r18, 0x04	; 4
    1538:	31 05       	cpc	r19, r1
    153a:	91 f1       	breq	.+100    	; 0x15a0 <TI0_voidInitDelay+0xc6>
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	82 30       	cpi	r24, 0x02	; 2
    1542:	91 05       	cpc	r25, r1
    1544:	79 f0       	breq	.+30     	; 0x1564 <TI0_voidInitDelay+0x8a>
	default:
	case TI0_OCdisconnect:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    1546:	a3 e5       	ldi	r26, 0x53	; 83
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e3 e5       	ldi	r30, 0x53	; 83
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	8f 7e       	andi	r24, 0xEF	; 239
    1552:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    1554:	a3 e5       	ldi	r26, 0x53	; 83
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e3 e5       	ldi	r30, 0x53	; 83
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7d       	andi	r24, 0xDF	; 223
    1560:	8c 93       	st	X, r24
    1562:	2c c0       	rjmp	.+88     	; 0x15bc <TI0_voidInitDelay+0xe2>
		break;
	case TI0_OCToggle:
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    1564:	a3 e5       	ldi	r26, 0x53	; 83
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e3 e5       	ldi	r30, 0x53	; 83
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8f 7d       	andi	r24, 0xDF	; 223
    1570:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM00);
    1572:	a3 e5       	ldi	r26, 0x53	; 83
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e3 e5       	ldi	r30, 0x53	; 83
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	80 61       	ori	r24, 0x10	; 16
    157e:	8c 93       	st	X, r24
    1580:	1d c0       	rjmp	.+58     	; 0x15bc <TI0_voidInitDelay+0xe2>
		break;
	case TI0_OCclear:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    1582:	a3 e5       	ldi	r26, 0x53	; 83
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e3 e5       	ldi	r30, 0x53	; 83
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7e       	andi	r24, 0xEF	; 239
    158e:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    1590:	a3 e5       	ldi	r26, 0x53	; 83
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e3 e5       	ldi	r30, 0x53	; 83
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	8c 93       	st	X, r24
    159e:	0e c0       	rjmp	.+28     	; 0x15bc <TI0_voidInitDelay+0xe2>
		break;
	case TI0_OCset:
		Set_Bit(TI0_TCCR0,TI0_COM00);
    15a0:	a3 e5       	ldi	r26, 0x53	; 83
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e3 e5       	ldi	r30, 0x53	; 83
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 61       	ori	r24, 0x10	; 16
    15ac:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    15ae:	a3 e5       	ldi	r26, 0x53	; 83
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e3 e5       	ldi	r30, 0x53	; 83
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 62       	ori	r24, 0x20	; 32
    15ba:	8c 93       	st	X, r24
		break;
	}
	// * Set the preScaller
	switch (Local_Prescaler){
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3d 83       	std	Y+5, r19	; 0x05
    15c4:	2c 83       	std	Y+4, r18	; 0x04
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	85 30       	cpi	r24, 0x05	; 5
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <TI0_voidInitDelay+0xf8>
    15d0:	58 c0       	rjmp	.+176    	; 0x1682 <TI0_voidInitDelay+0x1a8>
    15d2:	2c 81       	ldd	r18, Y+4	; 0x04
    15d4:	3d 81       	ldd	r19, Y+5	; 0x05
    15d6:	26 30       	cpi	r18, 0x06	; 6
    15d8:	31 05       	cpc	r19, r1
    15da:	5c f4       	brge	.+22     	; 0x15f2 <TI0_voidInitDelay+0x118>
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	91 05       	cpc	r25, r1
    15e4:	61 f0       	breq	.+24     	; 0x15fe <TI0_voidInitDelay+0x124>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	24 30       	cpi	r18, 0x04	; 4
    15ec:	31 05       	cpc	r19, r1
    15ee:	99 f1       	breq	.+102    	; 0x1656 <TI0_voidInitDelay+0x17c>
    15f0:	1c c0       	rjmp	.+56     	; 0x162a <TI0_voidInitDelay+0x150>
    15f2:	8c 81       	ldd	r24, Y+4	; 0x04
    15f4:	9d 81       	ldd	r25, Y+5	; 0x05
    15f6:	89 30       	cpi	r24, 0x09	; 9
    15f8:	91 05       	cpc	r25, r1
    15fa:	bc f4       	brge	.+46     	; 0x162a <TI0_voidInitDelay+0x150>
    15fc:	57 c0       	rjmp	.+174    	; 0x16ac <TI0_voidInitDelay+0x1d2>
	case TI0_NoPrescale:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    15fe:	a3 e5       	ldi	r26, 0x53	; 83
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	81 60       	ori	r24, 0x01	; 1
    160a:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8d 7f       	andi	r24, 0xFD	; 253
    1618:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    161a:	a3 e5       	ldi	r26, 0x53	; 83
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e3 e5       	ldi	r30, 0x53	; 83
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	8b 7f       	andi	r24, 0xFB	; 251
    1626:	8c 93       	st	X, r24
    1628:	41 c0       	rjmp	.+130    	; 0x16ac <TI0_voidInitDelay+0x1d2>
		break;
	default:
	case TI0_Prescaler8:
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    162a:	a3 e5       	ldi	r26, 0x53	; 83
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    1638:	a3 e5       	ldi	r26, 0x53	; 83
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e3 e5       	ldi	r30, 0x53	; 83
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	82 60       	ori	r24, 0x02	; 2
    1644:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1646:	a3 e5       	ldi	r26, 0x53	; 83
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e3 e5       	ldi	r30, 0x53	; 83
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8b 7f       	andi	r24, 0xFB	; 251
    1652:	8c 93       	st	X, r24
    1654:	2b c0       	rjmp	.+86     	; 0x16ac <TI0_voidInitDelay+0x1d2>
		break;
	case TI0_Prescaler64:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    1656:	a3 e5       	ldi	r26, 0x53	; 83
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e3 e5       	ldi	r30, 0x53	; 83
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    1664:	a3 e5       	ldi	r26, 0x53	; 83
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e3 e5       	ldi	r30, 0x53	; 83
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	82 60       	ori	r24, 0x02	; 2
    1670:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1672:	a3 e5       	ldi	r26, 0x53	; 83
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e3 e5       	ldi	r30, 0x53	; 83
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8b 7f       	andi	r24, 0xFB	; 251
    167e:	8c 93       	st	X, r24
    1680:	15 c0       	rjmp	.+42     	; 0x16ac <TI0_voidInitDelay+0x1d2>
		break;
	case TI0_Prescaler256:
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    1682:	a3 e5       	ldi	r26, 0x53	; 83
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e3 e5       	ldi	r30, 0x53	; 83
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8d 7f       	andi	r24, 0xFD	; 253
    168e:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    1690:	a3 e5       	ldi	r26, 0x53	; 83
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e3 e5       	ldi	r30, 0x53	; 83
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8e 7f       	andi	r24, 0xFE	; 254
    169c:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS02);
    169e:	a3 e5       	ldi	r26, 0x53	; 83
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e3 e5       	ldi	r30, 0x53	; 83
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	84 60       	ori	r24, 0x04	; 4
    16aa:	8c 93       	st	X, r24
	case TI0_ExternalClkFalling:
	case TI0_ExternalClkRising:
		break;
	}
	// * Enable the Interrupt
	Set_Bit(TI0_TIFR,TI0_OCF0);
    16ac:	a8 e5       	ldi	r26, 0x58	; 88
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e8 e5       	ldi	r30, 0x58	; 88
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	82 60       	ori	r24, 0x02	; 2
    16b8:	8c 93       	st	X, r24
}
    16ba:	27 96       	adiw	r28, 0x07	; 7
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	f8 94       	cli
    16c0:	de bf       	out	0x3e, r29	; 62
    16c2:	0f be       	out	0x3f, r0	; 63
    16c4:	cd bf       	out	0x3d, r28	; 61
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <TI0_voidDeinit>:

void TI0_voidDeinit(){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	//No prescaler clock
	Clear_Bit(TI0_TCCR0,TI0_CS01);
    16d4:	a3 e5       	ldi	r26, 0x53	; 83
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e3 e5       	ldi	r30, 0x53	; 83
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8d 7f       	andi	r24, 0xFD	; 253
    16e0:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_CS00);
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8e 7f       	andi	r24, 0xFE	; 254
    16ee:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_CS02);
    16f0:	a3 e5       	ldi	r26, 0x53	; 83
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e3 e5       	ldi	r30, 0x53	; 83
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8b 7f       	andi	r24, 0xFB	; 251
    16fc:	8c 93       	st	X, r24
}
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <TI0_CallBackFunctionCTC>:

static void (*GPTF_CTC) (void) = NULL;

void TI0_CallBackFunctionCTC(void (*PTF)(void)){
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	00 d0       	rcall	.+0      	; 0x170a <TI0_CallBackFunctionCTC+0x6>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
	if (PTF != NULL){
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	31 f0       	breq	.+12     	; 0x1726 <TI0_CallBackFunctionCTC+0x22>
		GPTF_CTC = PTF ;
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	90 93 58 01 	sts	0x0158, r25
    1722:	80 93 57 01 	sts	0x0157, r24
	}
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <__vector_10>:
//
////CTC Mode Interrupt

void __vector_10(void){
    1730:	1f 92       	push	r1
    1732:	0f 92       	push	r0
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	0f 92       	push	r0
    1738:	11 24       	eor	r1, r1
    173a:	2f 93       	push	r18
    173c:	3f 93       	push	r19
    173e:	4f 93       	push	r20
    1740:	5f 93       	push	r21
    1742:	6f 93       	push	r22
    1744:	7f 93       	push	r23
    1746:	8f 93       	push	r24
    1748:	9f 93       	push	r25
    174a:	af 93       	push	r26
    174c:	bf 93       	push	r27
    174e:	ef 93       	push	r30
    1750:	ff 93       	push	r31
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	if(GPTF_CTC != NULL){
    175a:	80 91 57 01 	lds	r24, 0x0157
    175e:	90 91 58 01 	lds	r25, 0x0158
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	29 f0       	breq	.+10     	; 0x1770 <__vector_10+0x40>
		GPTF_CTC();
    1766:	e0 91 57 01 	lds	r30, 0x0157
    176a:	f0 91 58 01 	lds	r31, 0x0158
    176e:	09 95       	icall
	}
}
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	bf 91       	pop	r27
    177a:	af 91       	pop	r26
    177c:	9f 91       	pop	r25
    177e:	8f 91       	pop	r24
    1780:	7f 91       	pop	r23
    1782:	6f 91       	pop	r22
    1784:	5f 91       	pop	r21
    1786:	4f 91       	pop	r20
    1788:	3f 91       	pop	r19
    178a:	2f 91       	pop	r18
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <TI0_voidSetBusyWait>:

void TI0_voidSetBusyWait(u32 Copy_u32WaitTimeInMicros, u8* delayBreak){
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	2a 97       	sbiw	r28, 0x0a	; 10
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	6d 83       	std	Y+5, r22	; 0x05
    17ac:	7e 83       	std	Y+6, r23	; 0x06
    17ae:	8f 83       	std	Y+7, r24	; 0x07
    17b0:	98 87       	std	Y+8, r25	; 0x08
    17b2:	5a 87       	std	Y+10, r21	; 0x0a
    17b4:	49 87       	std	Y+9, r20	; 0x09
	u32 Local_u32Counter = 0;
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	1a 82       	std	Y+2, r1	; 0x02
    17ba:	1b 82       	std	Y+3, r1	; 0x03
    17bc:	1c 82       	std	Y+4, r1	; 0x04
    17be:	28 c0       	rjmp	.+80     	; 0x1810 <TI0_voidSetBusyWait+0x7a>
	while(Local_u32Counter < Copy_u32WaitTimeInMicros){
		if(GET_BIT(TI0_TIFR,TI0_OCF0)){
    17c0:	e8 e5       	ldi	r30, 0x58	; 88
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	86 95       	lsr	r24
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	90 70       	andi	r25, 0x00	; 0
    17d0:	88 23       	and	r24, r24
    17d2:	c9 f0       	breq	.+50     	; 0x1806 <TI0_voidSetBusyWait+0x70>
			Local_u32Counter += CompareValue;
    17d4:	80 91 56 01 	lds	r24, 0x0156
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	9a 81       	ldd	r25, Y+2	; 0x02
    17e4:	ab 81       	ldd	r26, Y+3	; 0x03
    17e6:	bc 81       	ldd	r27, Y+4	; 0x04
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	a4 1f       	adc	r26, r20
    17ee:	b5 1f       	adc	r27, r21
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	ab 83       	std	Y+3, r26	; 0x03
    17f6:	bc 83       	std	Y+4, r27	; 0x04
			SET_BIT(TI0_TIFR,TI0_OCF0);
    17f8:	a8 e5       	ldi	r26, 0x58	; 88
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e5       	ldi	r30, 0x58	; 88
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	82 60       	ori	r24, 0x02	; 2
    1804:	8c 93       	st	X, r24
		}
		if(*delayBreak){
    1806:	e9 85       	ldd	r30, Y+9	; 0x09
    1808:	fa 85       	ldd	r31, Y+10	; 0x0a
    180a:	80 81       	ld	r24, Z
    180c:	88 23       	and	r24, r24
    180e:	69 f4       	brne	.+26     	; 0x182a <TI0_voidSetBusyWait+0x94>
	}
}

void TI0_voidSetBusyWait(u32 Copy_u32WaitTimeInMicros, u8* delayBreak){
	u32 Local_u32Counter = 0;
	while(Local_u32Counter < Copy_u32WaitTimeInMicros){
    1810:	29 81       	ldd	r18, Y+1	; 0x01
    1812:	3a 81       	ldd	r19, Y+2	; 0x02
    1814:	4b 81       	ldd	r20, Y+3	; 0x03
    1816:	5c 81       	ldd	r21, Y+4	; 0x04
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	af 81       	ldd	r26, Y+7	; 0x07
    181e:	b8 85       	ldd	r27, Y+8	; 0x08
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	4a 07       	cpc	r20, r26
    1826:	5b 07       	cpc	r21, r27
    1828:	58 f2       	brcs	.-106    	; 0x17c0 <TI0_voidSetBusyWait+0x2a>
		}
		if(*delayBreak){
			return;
		}
	}
}
    182a:	2a 96       	adiw	r28, 0x0a	; 10
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <TWI_VoidMasterInit>:
#include "../../../Common/Macro.h"

#include "../Header/TWI_Interface.h"


void TWI_VoidMasterInit(void){
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	/*Set Prescaler Values*/

	Clear_Bit(TWI_TWSR, TWI_TWPS0);
    1844:	a1 e2       	ldi	r26, 0x21	; 33
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	8e 7f       	andi	r24, 0xFE	; 254
    1850:	8c 93       	st	X, r24
	Clear_Bit(TWI_TWSR, TWI_TWPS1);
    1852:	a1 e2       	ldi	r26, 0x21	; 33
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e1 e2       	ldi	r30, 0x21	; 33
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	8d 7f       	andi	r24, 0xFD	; 253
    185e:	8c 93       	st	X, r24

	/*Set TWBR with the Value =>100KHZ*/
	TWI_TWBR = 32;
    1860:	e0 e2       	ldi	r30, 0x20	; 32
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 e2       	ldi	r24, 0x20	; 32
    1866:	80 83       	st	Z, r24

	/*Enable  I2C*/
	Set_Bit(TWI_TWCR,TWI_TWEN);
    1868:	a6 e5       	ldi	r26, 0x56	; 86
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e6 e5       	ldi	r30, 0x56	; 86
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	84 60       	ori	r24, 0x04	; 4
    1874:	8c 93       	st	X, r24
}
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <TWI_u32StartCondition>:

TWI_ErrorList TWI_u32StartCondition(void){
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	0f 92       	push	r0
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorList state = NoError;
    1886:	19 82       	std	Y+1, r1	; 0x01

	/*Clear flags + start condition*/
	TWI_TWCR = (1<<TWI_TWINT)| (1<<TWI_TWSTA) |(1<<TWI_TWEN);
    1888:	e6 e5       	ldi	r30, 0x56	; 86
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	84 ea       	ldi	r24, 0xA4	; 164
    188e:	80 83       	st	Z, r24
	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1890:	e6 e5       	ldi	r30, 0x56	; 86
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	88 23       	and	r24, r24
    1898:	dc f7       	brge	.-10     	; 0x1890 <TWI_u32StartCondition+0x14>

	/*Check Status*/
	while((TWI_TWSR & 0xF8) != TWI_MTXCheckStart);
    189a:	e1 e2       	ldi	r30, 0x21	; 33
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	88 2f       	mov	r24, r24
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	88 7f       	andi	r24, 0xF8	; 248
    18a6:	90 70       	andi	r25, 0x00	; 0
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	91 05       	cpc	r25, r1
    18ac:	b1 f7       	brne	.-20     	; 0x189a <TWI_u32StartCondition+0x1e>

	if((TWI_TWSR & 0xF8) != TWI_MTXCheckStart){
    18ae:	e1 e2       	ldi	r30, 0x21	; 33
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	88 7f       	andi	r24, 0xF8	; 248
    18ba:	90 70       	andi	r25, 0x00	; 0
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	91 05       	cpc	r25, r1
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <TWI_u32StartCondition+0x4a>
		state = ErrorStartCondition;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <TWI_VoidReStartCondition>:

TWI_ErrorList TWI_VoidReStartCondition(void){
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	0f 92       	push	r0
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	TWI_ErrorList state = NoError;
    18da:	19 82       	std	Y+1, r1	; 0x01

	/*Clear flags + start condition*/
	TWI_TWCR = (1<<TWI_TWINT)| (1<<TWI_TWSTA) |(1<<TWI_TWEN);
    18dc:	e6 e5       	ldi	r30, 0x56	; 86
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	84 ea       	ldi	r24, 0xA4	; 164
    18e2:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    18e4:	e6 e5       	ldi	r30, 0x56	; 86
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	88 23       	and	r24, r24
    18ec:	dc f7       	brge	.-10     	; 0x18e4 <TWI_VoidReStartCondition+0x14>

	/*Check Status*/
	while((TWI_TWSR & 0xF8) != TWI_MTXCheckReStart);
    18ee:	e1 e2       	ldi	r30, 0x21	; 33
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	88 7f       	andi	r24, 0xF8	; 248
    18fa:	90 70       	andi	r25, 0x00	; 0
    18fc:	80 31       	cpi	r24, 0x10	; 16
    18fe:	91 05       	cpc	r25, r1
    1900:	b1 f7       	brne	.-20     	; 0x18ee <TWI_VoidReStartCondition+0x1e>

	if((TWI_TWSR & 0xF8) != TWI_MTXCheckReStart){
    1902:	e1 e2       	ldi	r30, 0x21	; 33
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 2f       	mov	r24, r24
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	88 7f       	andi	r24, 0xF8	; 248
    190e:	90 70       	andi	r25, 0x00	; 0
    1910:	80 31       	cpi	r24, 0x10	; 16
    1912:	91 05       	cpc	r25, r1
    1914:	11 f0       	breq	.+4      	; 0x191a <TWI_VoidReStartCondition+0x4a>
		state = ErrorRestartCondition;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
}
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <TWI_VoidSendSlaveAddressWithWriteACK>:

/*Send the SlaveAdd Write*/
/*this Slave Address You want Connect it */
TWI_ErrorList TWI_VoidSendSlaveAddressWithWriteACK(u8 Local_SlaveAddress){
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <TWI_VoidSendSlaveAddressWithWriteACK+0x6>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    1930:	19 82       	std	Y+1, r1	; 0x01
	/*Load the slave address*/
	TWI_TWDR = Local_SlaveAddress << 1;
    1932:	e3 e2       	ldi	r30, 0x23	; 35
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	88 0f       	add	r24, r24
    193a:	80 83       	st	Z, r24

	/*Select the write mode*/
	Clear_Bit(TWI_TWDR, 0);
    193c:	a3 e2       	ldi	r26, 0x23	; 35
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e3 e2       	ldi	r30, 0x23	; 35
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8e 7f       	andi	r24, 0xFE	; 254
    1948:	8c 93       	st	X, r24

	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	84 e8       	ldi	r24, 0x84	; 132
    1950:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1952:	e6 e5       	ldi	r30, 0x56	; 86
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	88 23       	and	r24, r24
    195a:	dc f7       	brge	.-10     	; 0x1952 <TWI_VoidSendSlaveAddressWithWriteACK+0x2e>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MTXCheckSLA_W_WithAck){
    195c:	e1 e2       	ldi	r30, 0x21	; 33
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	88 7f       	andi	r24, 0xF8	; 248
    1968:	90 70       	andi	r25, 0x00	; 0
    196a:	88 31       	cpi	r24, 0x18	; 24
    196c:	91 05       	cpc	r25, r1
    196e:	11 f0       	breq	.+4      	; 0x1974 <TWI_VoidSendSlaveAddressWithWriteACK+0x50>
		state = ErrorSlaveAddressWriteWithAck;
    1970:	83 e0       	ldi	r24, 0x03	; 3
    1972:	89 83       	std	Y+1, r24	; 0x01
	}

	return state;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <TWI_VoidSendSlaveAddressWithWriteNACK>:

TWI_ErrorList TWI_VoidSendSlaveAddressWithWriteNACK(u8 Local_SlaveAddress){
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <TWI_VoidSendSlaveAddressWithWriteNACK+0x6>
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    198c:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	Clear_Bit(TWI_TWCR,TWI_TWEA);
    198e:	a6 e5       	ldi	r26, 0x56	; 86
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e6 e5       	ldi	r30, 0x56	; 86
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8f 7b       	andi	r24, 0xBF	; 191
    199a:	8c 93       	st	X, r24

	/*Load the slave address*/
	TWI_TWDR = Local_SlaveAddress << 1;
    199c:	e3 e2       	ldi	r30, 0x23	; 35
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 0f       	add	r24, r24
    19a4:	80 83       	st	Z, r24

	/*Select the write mode*/
	Clear_Bit(TWI_TWDR, 0);
    19a6:	a3 e2       	ldi	r26, 0x23	; 35
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e3 e2       	ldi	r30, 0x23	; 35
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8e 7f       	andi	r24, 0xFE	; 254
    19b2:	8c 93       	st	X, r24

	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    19b4:	e6 e5       	ldi	r30, 0x56	; 86
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	84 e8       	ldi	r24, 0x84	; 132
    19ba:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    19bc:	e6 e5       	ldi	r30, 0x56	; 86
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	88 23       	and	r24, r24
    19c4:	dc f7       	brge	.-10     	; 0x19bc <TWI_VoidSendSlaveAddressWithWriteNACK+0x3c>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MTXCheckSLA_W_WithOutAck){
    19c6:	e1 e2       	ldi	r30, 0x21	; 33
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	88 7f       	andi	r24, 0xF8	; 248
    19d2:	90 70       	andi	r25, 0x00	; 0
    19d4:	80 32       	cpi	r24, 0x20	; 32
    19d6:	91 05       	cpc	r25, r1
    19d8:	11 f0       	breq	.+4      	; 0x19de <TWI_VoidSendSlaveAddressWithWriteNACK+0x5e>
		state = ErrorSlaveAddressWriteWithoutAck;
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    19de:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <TWI_VoidSendSlaveAddressWithReadACK>:

/*Send the SlaveAdd Read*/
TWI_ErrorList TWI_VoidSendSlaveAddressWithReadACK(u8 Local_SlaveAddress){
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <TWI_VoidSendSlaveAddressWithReadACK+0x6>
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    19f6:	19 82       	std	Y+1, r1	; 0x01

	/*Enable  ACK*/
	Set_Bit(TWI_TWCR,TWI_TWEA);
    19f8:	a6 e5       	ldi	r26, 0x56	; 86
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e6 e5       	ldi	r30, 0x56	; 86
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	80 64       	ori	r24, 0x40	; 64
    1a04:	8c 93       	st	X, r24

	/*Load the slave address*/
	TWI_TWDR = Local_SlaveAddress << 1;
    1a06:	e3 e2       	ldi	r30, 0x23	; 35
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 0f       	add	r24, r24
    1a0e:	80 83       	st	Z, r24

	/*Select the read mode*/
	Set_Bit(TWI_TWDR, 0);
    1a10:	a3 e2       	ldi	r26, 0x23	; 35
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e3 e2       	ldi	r30, 0x23	; 35
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	81 60       	ori	r24, 0x01	; 1
    1a1c:	8c 93       	st	X, r24

	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1a1e:	e6 e5       	ldi	r30, 0x56	; 86
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	84 e8       	ldi	r24, 0x84	; 132
    1a24:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1a26:	e6 e5       	ldi	r30, 0x56	; 86
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	88 23       	and	r24, r24
    1a2e:	dc f7       	brge	.-10     	; 0x1a26 <TWI_VoidSendSlaveAddressWithReadACK+0x3c>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MRXCheckSLA_R_WithAck){
    1a30:	e1 e2       	ldi	r30, 0x21	; 33
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	88 7f       	andi	r24, 0xF8	; 248
    1a3c:	90 70       	andi	r25, 0x00	; 0
    1a3e:	80 34       	cpi	r24, 0x40	; 64
    1a40:	91 05       	cpc	r25, r1
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <TWI_VoidSendSlaveAddressWithReadACK+0x5e>
		state = ErrorSlaveAddressReadWithAck;
    1a44:	85 e0       	ldi	r24, 0x05	; 5
    1a46:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <TWI_VoidSendSlaveAddressWithReadNACK>:

TWI_ErrorList TWI_VoidSendSlaveAddressWithReadNACK(u8 Local_SlaveAddress){
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <TWI_VoidSendSlaveAddressWithReadNACK+0x6>
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    1a60:	19 82       	std	Y+1, r1	; 0x01

	/*Disable  ACK*/
	Clear_Bit(TWI_TWCR,TWI_TWEA);
    1a62:	a6 e5       	ldi	r26, 0x56	; 86
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e6 e5       	ldi	r30, 0x56	; 86
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8f 7b       	andi	r24, 0xBF	; 191
    1a6e:	8c 93       	st	X, r24

	/*Load the slave address*/
	TWI_TWDR = Local_SlaveAddress << 1;
    1a70:	e3 e2       	ldi	r30, 0x23	; 35
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	88 0f       	add	r24, r24
    1a78:	80 83       	st	Z, r24

	/*Select the read mode*/
	Set_Bit(TWI_TWDR, 0);
    1a7a:	a3 e2       	ldi	r26, 0x23	; 35
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e3 e2       	ldi	r30, 0x23	; 35
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	81 60       	ori	r24, 0x01	; 1
    1a86:	8c 93       	st	X, r24

	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1a88:	e6 e5       	ldi	r30, 0x56	; 86
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	84 e8       	ldi	r24, 0x84	; 132
    1a8e:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1a90:	e6 e5       	ldi	r30, 0x56	; 86
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	88 23       	and	r24, r24
    1a98:	dc f7       	brge	.-10     	; 0x1a90 <TWI_VoidSendSlaveAddressWithReadNACK+0x3c>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MRXCheckSLA_R_WithOutAck){
    1a9a:	e1 e2       	ldi	r30, 0x21	; 33
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	88 7f       	andi	r24, 0xF8	; 248
    1aa6:	90 70       	andi	r25, 0x00	; 0
    1aa8:	88 34       	cpi	r24, 0x48	; 72
    1aaa:	91 05       	cpc	r25, r1
    1aac:	11 f0       	breq	.+4      	; 0x1ab2 <TWI_VoidSendSlaveAddressWithReadNACK+0x5e>
		state = ErrorSlaveAddressReadWithoutAck;
    1aae:	86 e0       	ldi	r24, 0x06	; 6
    1ab0:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <TWI_VoidMasterWriteDataACK>:

/* Master Send the Data*/
TWI_ErrorList TWI_VoidMasterWriteDataACK(u8 Local_Data){
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <TWI_VoidMasterWriteDataACK+0x6>
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    1aca:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWI_TWDR = Local_Data;
    1acc:	e3 e2       	ldi	r30, 0x23	; 35
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24

	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1ad4:	e6 e5       	ldi	r30, 0x56	; 86
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	84 e8       	ldi	r24, 0x84	; 132
    1ada:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1adc:	e6 e5       	ldi	r30, 0x56	; 86
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 23       	and	r24, r24
    1ae4:	dc f7       	brge	.-10     	; 0x1adc <TWI_VoidMasterWriteDataACK+0x1e>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MTXCheckData_WithAck){
    1ae6:	e1 e2       	ldi	r30, 0x21	; 33
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	88 7f       	andi	r24, 0xF8	; 248
    1af2:	90 70       	andi	r25, 0x00	; 0
    1af4:	88 32       	cpi	r24, 0x28	; 40
    1af6:	91 05       	cpc	r25, r1
    1af8:	11 f0       	breq	.+4      	; 0x1afe <TWI_VoidMasterWriteDataACK+0x40>
		state = ErrorWriteDataWithAck;
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	08 95       	ret

00001b0a <TWI_VoidMasterWriteDataNACK>:

TWI_ErrorList TWI_VoidMasterWriteDataNACK(u8 Local_Data){
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	00 d0       	rcall	.+0      	; 0x1b10 <TWI_VoidMasterWriteDataNACK+0x6>
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ErrorList state = NoError;
    1b16:	19 82       	std	Y+1, r1	; 0x01

	/*Load the data*/
	TWI_TWDR = Local_Data;
    1b18:	e3 e2       	ldi	r30, 0x23	; 35
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	80 83       	st	Z, r24

	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1b20:	e6 e5       	ldi	r30, 0x56	; 86
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	84 e8       	ldi	r24, 0x84	; 132
    1b26:	80 83       	st	Z, r24

	/*Wait for the flag*/
	while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1b28:	e6 e5       	ldi	r30, 0x56	; 86
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 23       	and	r24, r24
    1b30:	dc f7       	brge	.-10     	; 0x1b28 <TWI_VoidMasterWriteDataNACK+0x1e>

	/*Check Status*/
	if((TWI_TWSR & 0xF8) != TWI_MTXCheckData_WithOutAck){
    1b32:	e1 e2       	ldi	r30, 0x21	; 33
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	88 7f       	andi	r24, 0xF8	; 248
    1b3e:	90 70       	andi	r25, 0x00	; 0
    1b40:	80 33       	cpi	r24, 0x30	; 48
    1b42:	91 05       	cpc	r25, r1
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <TWI_VoidMasterWriteDataNACK+0x40>
		state = ErrorWriteDataWithoutAck;
    1b46:	88 e0       	ldi	r24, 0x08	; 8
    1b48:	89 83       	std	Y+1, r24	; 0x01
	}
	return state;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <TWI_u8MasterReadDataACK>:

/*Master Rx the Data*/
TWI_ErrorList  TWI_u8MasterReadDataACK(u8* ReceiveData){
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <TWI_u8MasterReadDataACK+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <TWI_u8MasterReadDataACK+0x8>
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	9b 83       	std	Y+3, r25	; 0x03
    1b64:	8a 83       	std	Y+2, r24	; 0x02

	if(ReceiveData != NULL){
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	f9 f0       	breq	.+62     	; 0x1bac <TWI_u8MasterReadDataACK+0x56>
		TWI_ErrorList state = NoError;
    1b6e:	19 82       	std	Y+1, r1	; 0x01

		/*Clear flag*/
		TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1b70:	e6 e5       	ldi	r30, 0x56	; 86
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	84 e8       	ldi	r24, 0x84	; 132
    1b76:	80 83       	st	Z, r24

		/*Wait for the flag*/
		while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1b78:	e6 e5       	ldi	r30, 0x56	; 86
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	88 23       	and	r24, r24
    1b80:	dc f7       	brge	.-10     	; 0x1b78 <TWI_u8MasterReadDataACK+0x22>

		/*Check Status*/
		if((TWI_TWSR & 0xF8) != TWI_MRXCheckData_WithAck){
    1b82:	e1 e2       	ldi	r30, 0x21	; 33
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	88 7f       	andi	r24, 0xF8	; 248
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	80 35       	cpi	r24, 0x50	; 80
    1b92:	91 05       	cpc	r25, r1
    1b94:	11 f0       	breq	.+4      	; 0x1b9a <TWI_u8MasterReadDataACK+0x44>
			state = ErrorReadDataWithoutAck;
    1b96:	8a e0       	ldi	r24, 0x0A	; 10
    1b98:	89 83       	std	Y+1, r24	; 0x01
		}

		*ReceiveData = TWI_TWDR;
    1b9a:	e3 e2       	ldi	r30, 0x23	; 35
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ba2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ba4:	80 83       	st	Z, r24
		return state;
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <TWI_u8MasterReadDataACK+0x5a>
	}
	return -1;
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	8c 83       	std	Y+4, r24	; 0x04
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <TWI_u8MasterReadDataNACK>:

TWI_ErrorList  TWI_u8MasterReadDataNACK(u8* ReceiveData){
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <TWI_u8MasterReadDataNACK+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <TWI_u8MasterReadDataNACK+0x8>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9b 83       	std	Y+3, r25	; 0x03
    1bce:	8a 83       	std	Y+2, r24	; 0x02
	if(ReceiveData != NULL){
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	f9 f0       	breq	.+62     	; 0x1c16 <TWI_u8MasterReadDataNACK+0x56>
		TWI_ErrorList state = NoError;
    1bd8:	19 82       	std	Y+1, r1	; 0x01

		/*Clear flag*/
		TWI_TWCR = (1<<TWI_TWINT)|(1<<TWI_TWEN);
    1bda:	e6 e5       	ldi	r30, 0x56	; 86
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	84 e8       	ldi	r24, 0x84	; 132
    1be0:	80 83       	st	Z, r24

		/*Wait for the flag*/
		while(Get_Bit(TWI_TWCR,TWI_TWINT) == 0);
    1be2:	e6 e5       	ldi	r30, 0x56	; 86
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	88 23       	and	r24, r24
    1bea:	dc f7       	brge	.-10     	; 0x1be2 <TWI_u8MasterReadDataNACK+0x22>

		/*Check Status*/
		if((TWI_TWSR & 0xF8) != TWI_MRXCheckData_WithOutAck){
    1bec:	e1 e2       	ldi	r30, 0x21	; 33
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	88 7f       	andi	r24, 0xF8	; 248
    1bf8:	90 70       	andi	r25, 0x00	; 0
    1bfa:	88 35       	cpi	r24, 0x58	; 88
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <TWI_u8MasterReadDataNACK+0x44>
			state = ErrorReadDataWithoutAck;
    1c00:	8a e0       	ldi	r24, 0x0A	; 10
    1c02:	89 83       	std	Y+1, r24	; 0x01
		}

		*ReceiveData = TWI_TWDR;
    1c04:	e3 e2       	ldi	r30, 0x23	; 35
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c0c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c0e:	80 83       	st	Z, r24
		return state;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <TWI_u8MasterReadDataNACK+0x5a>
	}

	return -1;
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	8c 83       	std	Y+4, r24	; 0x04
    1c1a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <TWI_VoidStopCondition>:

/*Stop*/
void TWI_VoidStopCondition(void){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	/*Clear flag*/
	TWI_TWCR = (1<<TWI_TWINT)| (1<<TWI_TWSTO) |(1<<TWI_TWEN);
    1c32:	e6 e5       	ldi	r30, 0x56	; 86
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	84 e9       	ldi	r24, 0x94	; 148
    1c38:	80 83       	st	Z, r24
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <TWI_VoidSlaveInit>:

/*Slave*/
void TWI_VoidSlaveInit(u8 Local_SlaveAddress){
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	/*Set Slave Address iN TWAR*/
	TWI_TWAR = (Local_SlaveAddress <<1);
    1c4c:	e2 e2       	ldi	r30, 0x22	; 34
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	88 0f       	add	r24, r24
    1c54:	80 83       	st	Z, r24
	/*Enable ACK*/
	//Set_Bit(TWI_TWCR , TWI_TWEA);
	/*Enable I2C*/
	Set_Bit(TWI_TWCR , TWI_TWEN);
    1c56:	a6 e5       	ldi	r26, 0x56	; 86
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e6 e5       	ldi	r30, 0x56	; 86
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	84 60       	ori	r24, 0x04	; 4
    1c62:	8c 93       	st	X, r24
}
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <GIE_voidEN>:
#include "../../../Common/STD_types.h"
#include "../../../Common/Macro.h"

#include "../Header/GIE_All.h"

void GIE_voidEN(){
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG,GIE_I);
    1c74:	af e5       	ldi	r26, 0x5F	; 95
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ef e5       	ldi	r30, 0x5F	; 95
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	80 68       	ori	r24, 0x80	; 128
    1c80:	8c 93       	st	X, r24
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <GIE_voidDis>:

void GIE_voidDis(){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GIE_SREG,GIE_I);
    1c90:	af e5       	ldi	r26, 0x5F	; 95
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	ef e5       	ldi	r30, 0x5F	; 95
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	8f 77       	andi	r24, 0x7F	; 127
    1c9c:	8c 93       	st	X, r24
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <EXTI_voidInit0>:

#include "../Header/EXTI_Interface.h"
#include "../../GIE/Header/GIE_All.h"


void EXTI_voidInit0(u8 Local_Sense){
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <EXTI_voidInit0+0x6>
    1caa:	0f 92       	push	r0
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP1,EXTI_PinINT0,Input);
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>
	DIO_u8SetPinValue(EXTI_GROUP1,EXTI_PinINT0,High);
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 ee 10 	call	0x21dc	; 0x21dc <DIO_u8SetPinValue>

	switch(Local_Sense){
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3b 83       	std	Y+3, r19	; 0x03
    1cce:	2a 83       	std	Y+2, r18	; 0x02
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	82 30       	cpi	r24, 0x02	; 2
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	29 f1       	breq	.+74     	; 0x1d24 <EXTI_voidInit0+0x80>
    1cda:	2a 81       	ldd	r18, Y+2	; 0x02
    1cdc:	3b 81       	ldd	r19, Y+3	; 0x03
    1cde:	23 30       	cpi	r18, 0x03	; 3
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	34 f4       	brge	.+12     	; 0x1cf0 <EXTI_voidInit0+0x4c>
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	91 05       	cpc	r25, r1
    1cec:	61 f0       	breq	.+24     	; 0x1d06 <EXTI_voidInit0+0x62>
    1cee:	46 c0       	rjmp	.+140    	; 0x1d7c <EXTI_voidInit0+0xd8>
    1cf0:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf2:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf4:	23 30       	cpi	r18, 0x03	; 3
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	21 f1       	breq	.+72     	; 0x1d42 <EXTI_voidInit0+0x9e>
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	91 05       	cpc	r25, r1
    1d02:	71 f1       	breq	.+92     	; 0x1d60 <EXTI_voidInit0+0xbc>
    1d04:	3b c0       	rjmp	.+118    	; 0x1d7c <EXTI_voidInit0+0xd8>
	case EXTI_LowLevel:
		Clear_Bit(EXTI_MCUCR,EXTI_ISC00);
    1d06:	a5 e5       	ldi	r26, 0x55	; 85
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e5       	ldi	r30, 0x55	; 85
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8e 7f       	andi	r24, 0xFE	; 254
    1d12:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR,EXTI_ISC01);
    1d14:	a5 e5       	ldi	r26, 0x55	; 85
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e5       	ldi	r30, 0x55	; 85
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8d 7f       	andi	r24, 0xFD	; 253
    1d20:	8c 93       	st	X, r24
    1d22:	2c c0       	rjmp	.+88     	; 0x1d7c <EXTI_voidInit0+0xd8>
		break;
	case EXTI_AnyChange:
		Set_Bit(EXTI_MCUCR,EXTI_ISC00);
    1d24:	a5 e5       	ldi	r26, 0x55	; 85
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e5 e5       	ldi	r30, 0x55	; 85
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	81 60       	ori	r24, 0x01	; 1
    1d30:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR,EXTI_ISC01);
    1d32:	a5 e5       	ldi	r26, 0x55	; 85
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e5       	ldi	r30, 0x55	; 85
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8d 7f       	andi	r24, 0xFD	; 253
    1d3e:	8c 93       	st	X, r24
    1d40:	1d c0       	rjmp	.+58     	; 0x1d7c <EXTI_voidInit0+0xd8>
		break;
	case EXTI_Falling:
		Clear_Bit(EXTI_MCUCR,EXTI_ISC00);
    1d42:	a5 e5       	ldi	r26, 0x55	; 85
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e5 e5       	ldi	r30, 0x55	; 85
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8e 7f       	andi	r24, 0xFE	; 254
    1d4e:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR,EXTI_ISC01);
    1d50:	a5 e5       	ldi	r26, 0x55	; 85
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e5       	ldi	r30, 0x55	; 85
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	82 60       	ori	r24, 0x02	; 2
    1d5c:	8c 93       	st	X, r24
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <EXTI_voidInit0+0xd8>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCR,EXTI_ISC00);
    1d60:	a5 e5       	ldi	r26, 0x55	; 85
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e5       	ldi	r30, 0x55	; 85
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR,EXTI_ISC01);
    1d6e:	a5 e5       	ldi	r26, 0x55	; 85
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e5       	ldi	r30, 0x55	; 85
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	82 60       	ori	r24, 0x02	; 2
    1d7a:	8c 93       	st	X, r24
		break;
	}

	GIE_voidEN();
    1d7c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GIE_voidEN>
	Set_Bit(EXTI_GICR,EXTI_INT0);
    1d80:	ab e5       	ldi	r26, 0x5B	; 91
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	eb e5       	ldi	r30, 0x5B	; 91
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 64       	ori	r24, 0x40	; 64
    1d8c:	8c 93       	st	X, r24
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <EXTI_voidDeinit0>:

void EXTI_voidDeinit0(){
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(EXTI_GICR,EXTI_INT0);
    1da2:	ab e5       	ldi	r26, 0x5B	; 91
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e5       	ldi	r30, 0x5B	; 91
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7b       	andi	r24, 0xBF	; 191
    1dae:	8c 93       	st	X, r24
}
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <EXTI_voidInit1>:
void EXTI_voidInit1(u8 Local_Sense){
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <EXTI_voidInit1+0x6>
    1dbc:	0f 92       	push	r0
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP1,EXTI_PinINT1,Input);
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	63 e0       	ldi	r22, 0x03	; 3
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>

	switch(Local_Sense){
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	3b 83       	std	Y+3, r19	; 0x03
    1dd6:	2a 83       	std	Y+2, r18	; 0x02
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	91 05       	cpc	r25, r1
    1de0:	29 f1       	breq	.+74     	; 0x1e2c <EXTI_voidInit1+0x76>
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	23 30       	cpi	r18, 0x03	; 3
    1de8:	31 05       	cpc	r19, r1
    1dea:	34 f4       	brge	.+12     	; 0x1df8 <EXTI_voidInit1+0x42>
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	61 f0       	breq	.+24     	; 0x1e0e <EXTI_voidInit1+0x58>
    1df6:	46 c0       	rjmp	.+140    	; 0x1e84 <EXTI_voidInit1+0xce>
    1df8:	2a 81       	ldd	r18, Y+2	; 0x02
    1dfa:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfc:	23 30       	cpi	r18, 0x03	; 3
    1dfe:	31 05       	cpc	r19, r1
    1e00:	21 f1       	breq	.+72     	; 0x1e4a <EXTI_voidInit1+0x94>
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	91 05       	cpc	r25, r1
    1e0a:	71 f1       	breq	.+92     	; 0x1e68 <EXTI_voidInit1+0xb2>
    1e0c:	3b c0       	rjmp	.+118    	; 0x1e84 <EXTI_voidInit1+0xce>
	case EXTI_LowLevel:
		Clear_Bit(EXTI_MCUCR,EXTI_ISC10);
    1e0e:	a5 e5       	ldi	r26, 0x55	; 85
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e5 e5       	ldi	r30, 0x55	; 85
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8b 7f       	andi	r24, 0xFB	; 251
    1e1a:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR,EXTI_ISC11);
    1e1c:	a5 e5       	ldi	r26, 0x55	; 85
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e5       	ldi	r30, 0x55	; 85
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	87 7f       	andi	r24, 0xF7	; 247
    1e28:	8c 93       	st	X, r24
    1e2a:	2c c0       	rjmp	.+88     	; 0x1e84 <EXTI_voidInit1+0xce>
		break;
	case EXTI_AnyChange:
		Set_Bit(EXTI_MCUCR,EXTI_ISC10);
    1e2c:	a5 e5       	ldi	r26, 0x55	; 85
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e5 e5       	ldi	r30, 0x55	; 85
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	84 60       	ori	r24, 0x04	; 4
    1e38:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR,EXTI_ISC11);
    1e3a:	a5 e5       	ldi	r26, 0x55	; 85
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e5 e5       	ldi	r30, 0x55	; 85
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	87 7f       	andi	r24, 0xF7	; 247
    1e46:	8c 93       	st	X, r24
    1e48:	1d c0       	rjmp	.+58     	; 0x1e84 <EXTI_voidInit1+0xce>
		break;
	case EXTI_Falling:
		Clear_Bit(EXTI_MCUCR,EXTI_ISC10);
    1e4a:	a5 e5       	ldi	r26, 0x55	; 85
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e5 e5       	ldi	r30, 0x55	; 85
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8b 7f       	andi	r24, 0xFB	; 251
    1e56:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR,EXTI_ISC11);
    1e58:	a5 e5       	ldi	r26, 0x55	; 85
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e5       	ldi	r30, 0x55	; 85
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	88 60       	ori	r24, 0x08	; 8
    1e64:	8c 93       	st	X, r24
    1e66:	0e c0       	rjmp	.+28     	; 0x1e84 <EXTI_voidInit1+0xce>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCR,EXTI_ISC10);
    1e68:	a5 e5       	ldi	r26, 0x55	; 85
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e5       	ldi	r30, 0x55	; 85
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	84 60       	ori	r24, 0x04	; 4
    1e74:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR,EXTI_ISC11);
    1e76:	a5 e5       	ldi	r26, 0x55	; 85
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e5 e5       	ldi	r30, 0x55	; 85
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 60       	ori	r24, 0x08	; 8
    1e82:	8c 93       	st	X, r24
		break;
	}

	GIE_voidEN();
    1e84:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GIE_voidEN>
	Set_Bit(EXTI_GICR,EXTI_INT1);
    1e88:	ab e5       	ldi	r26, 0x5B	; 91
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	eb e5       	ldi	r30, 0x5B	; 91
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	80 68       	ori	r24, 0x80	; 128
    1e94:	8c 93       	st	X, r24
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <EXTI_voidInit2>:

void EXTI_voidInit2(u8 Local_Sense){
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <EXTI_voidInit2+0x6>
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP2,EXTI_PinINT2,Input);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	62 e0       	ldi	r22, 0x02	; 2
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>

	switch(Local_Sense){
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	3b 83       	std	Y+3, r19	; 0x03
    1ec2:	2a 83       	std	Y+2, r18	; 0x02
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	83 30       	cpi	r24, 0x03	; 3
    1eca:	91 05       	cpc	r25, r1
    1ecc:	31 f0       	breq	.+12     	; 0x1eda <EXTI_voidInit2+0x38>
    1ece:	2a 81       	ldd	r18, Y+2	; 0x02
    1ed0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ed2:	24 30       	cpi	r18, 0x04	; 4
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	49 f0       	breq	.+18     	; 0x1eea <EXTI_voidInit2+0x48>
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <EXTI_voidInit2+0x56>
	case EXTI_Falling:
		Clear_Bit(EXTI_MCUCSR,EXTI_ISC2);
    1eda:	a4 e5       	ldi	r26, 0x54	; 84
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e4 e5       	ldi	r30, 0x54	; 84
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8f 7b       	andi	r24, 0xBF	; 191
    1ee6:	8c 93       	st	X, r24
    1ee8:	07 c0       	rjmp	.+14     	; 0x1ef8 <EXTI_voidInit2+0x56>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCSR,EXTI_ISC2);
    1eea:	a4 e5       	ldi	r26, 0x54	; 84
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e4 e5       	ldi	r30, 0x54	; 84
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	80 64       	ori	r24, 0x40	; 64
    1ef6:	8c 93       	st	X, r24
		break;
	}

	GIE_voidEN();
    1ef8:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <GIE_voidEN>
	Set_Bit(EXTI_GICR,EXTI_INT2);
    1efc:	ab e5       	ldi	r26, 0x5B	; 91
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	eb e5       	ldi	r30, 0x5B	; 91
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 62       	ori	r24, 0x20	; 32
    1f08:	8c 93       	st	X, r24
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <EXTI_CallBackFunction>:

static void (*GPTF_INT0) (void) = NULL;
void EXTI_CallBackFunction(void (*PTF) (void)){
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <EXTI_CallBackFunction+0x6>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
	if (PTF!=NULL){
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	31 f0       	breq	.+12     	; 0x1f38 <EXTI_CallBackFunction+0x22>
		GPTF_INT0 = PTF ;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	90 93 5a 01 	sts	0x015A, r25
    1f34:	80 93 59 01 	sts	0x0159, r24
	}
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	2f 93       	push	r18
    1f4e:	3f 93       	push	r19
    1f50:	4f 93       	push	r20
    1f52:	5f 93       	push	r21
    1f54:	6f 93       	push	r22
    1f56:	7f 93       	push	r23
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	af 93       	push	r26
    1f5e:	bf 93       	push	r27
    1f60:	ef 93       	push	r30
    1f62:	ff 93       	push	r31
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	if(GPTF_INT0 != NULL){
    1f6c:	80 91 59 01 	lds	r24, 0x0159
    1f70:	90 91 5a 01 	lds	r25, 0x015A
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	29 f0       	breq	.+10     	; 0x1f82 <__vector_1+0x40>
		GPTF_INT0();
    1f78:	e0 91 59 01 	lds	r30, 0x0159
    1f7c:	f0 91 5a 01 	lds	r31, 0x015A
    1f80:	09 95       	icall
	}
}
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <DIO_u8SetPinDir>:
#include "../../../Common/Macro.h"

#include "../Header/DIO_Register.h"
#include "../Header/DIO_Interface.h"

u8 DIO_u8SetPinDir(u8 Local_GroupName,u8 Local_PinNumber,u8 Local_PinState){
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	28 97       	sbiw	r28, 0x08	; 8
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	8a 83       	std	Y+2, r24	; 0x02
    1fbe:	6b 83       	std	Y+3, r22	; 0x03
    1fc0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <DIO_u8SetPinDir+0x22>
    1fc8:	fd c0       	rjmp	.+506    	; 0x21c4 <DIO_u8SetPinDir+0x21c>
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	88 23       	and	r24, r24
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <DIO_u8SetPinDir+0x2a>
    1fd0:	f9 c0       	rjmp	.+498    	; 0x21c4 <DIO_u8SetPinDir+0x21c>

		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <DIO_u8SetPinDir+0x32>
    1fd8:	f2 c0       	rjmp	.+484    	; 0x21be <DIO_u8SetPinDir+0x216>

			if(Local_PinState == Output){
    1fda:	8c 81       	ldd	r24, Y+4	; 0x04
    1fdc:	81 30       	cpi	r24, 0x01	; 1
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <DIO_u8SetPinDir+0x3a>
    1fe0:	71 c0       	rjmp	.+226    	; 0x20c4 <DIO_u8SetPinDir+0x11c>
				Request = RequestHandled;
    1fe2:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	38 87       	std	Y+8, r19	; 0x08
    1fec:	2f 83       	std	Y+7, r18	; 0x07
    1fee:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff0:	98 85       	ldd	r25, Y+8	; 0x08
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	51 f1       	breq	.+84     	; 0x204c <DIO_u8SetPinDir+0xa4>
    1ff8:	2f 81       	ldd	r18, Y+7	; 0x07
    1ffa:	38 85       	ldd	r19, Y+8	; 0x08
    1ffc:	23 30       	cpi	r18, 0x03	; 3
    1ffe:	31 05       	cpc	r19, r1
    2000:	34 f4       	brge	.+12     	; 0x200e <DIO_u8SetPinDir+0x66>
    2002:	8f 81       	ldd	r24, Y+7	; 0x07
    2004:	98 85       	ldd	r25, Y+8	; 0x08
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	91 05       	cpc	r25, r1
    200a:	61 f0       	breq	.+24     	; 0x2024 <DIO_u8SetPinDir+0x7c>
    200c:	dd c0       	rjmp	.+442    	; 0x21c8 <DIO_u8SetPinDir+0x220>
    200e:	2f 81       	ldd	r18, Y+7	; 0x07
    2010:	38 85       	ldd	r19, Y+8	; 0x08
    2012:	23 30       	cpi	r18, 0x03	; 3
    2014:	31 05       	cpc	r19, r1
    2016:	71 f1       	breq	.+92     	; 0x2074 <DIO_u8SetPinDir+0xcc>
    2018:	8f 81       	ldd	r24, Y+7	; 0x07
    201a:	98 85       	ldd	r25, Y+8	; 0x08
    201c:	84 30       	cpi	r24, 0x04	; 4
    201e:	91 05       	cpc	r25, r1
    2020:	e9 f1       	breq	.+122    	; 0x209c <DIO_u8SetPinDir+0xf4>
    2022:	d2 c0       	rjmp	.+420    	; 0x21c8 <DIO_u8SetPinDir+0x220>
				case DIO_GroupA:
					Set_Bit(DIO_DDRA,Local_PinNumber);
    2024:	aa e3       	ldi	r26, 0x3A	; 58
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	ea e3       	ldi	r30, 0x3A	; 58
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <DIO_u8SetPinDir+0x9a>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <DIO_u8SetPinDir+0x96>
    2046:	84 2b       	or	r24, r20
    2048:	8c 93       	st	X, r24
    204a:	be c0       	rjmp	.+380    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupB:
					Set_Bit(DIO_DDRB,Local_PinNumber);
    204c:	a7 e3       	ldi	r26, 0x37	; 55
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e7 e3       	ldi	r30, 0x37	; 55
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	48 2f       	mov	r20, r24
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	02 2e       	mov	r0, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <DIO_u8SetPinDir+0xc2>
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	0a 94       	dec	r0
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <DIO_u8SetPinDir+0xbe>
    206e:	84 2b       	or	r24, r20
    2070:	8c 93       	st	X, r24
    2072:	aa c0       	rjmp	.+340    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupC:
					Set_Bit(DIO_DDRC,Local_PinNumber);
    2074:	a4 e3       	ldi	r26, 0x34	; 52
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e4 e3       	ldi	r30, 0x34	; 52
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	48 2f       	mov	r20, r24
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 2e       	mov	r0, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <DIO_u8SetPinDir+0xea>
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <DIO_u8SetPinDir+0xe6>
    2096:	84 2b       	or	r24, r20
    2098:	8c 93       	st	X, r24
    209a:	96 c0       	rjmp	.+300    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupD:
					Set_Bit(DIO_DDRD,Local_PinNumber);
    209c:	a1 e3       	ldi	r26, 0x31	; 49
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e1 e3       	ldi	r30, 0x31	; 49
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_u8SetPinDir+0x112>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_u8SetPinDir+0x10e>
    20be:	84 2b       	or	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	82 c0       	rjmp	.+260    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				}
			}
			else if(Local_PinState == Input){
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	88 23       	and	r24, r24
    20c8:	09 f0       	breq	.+2      	; 0x20cc <DIO_u8SetPinDir+0x124>
    20ca:	76 c0       	rjmp	.+236    	; 0x21b8 <DIO_u8SetPinDir+0x210>
				Request = RequestHandled;
    20cc:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	3e 83       	std	Y+6, r19	; 0x06
    20d6:	2d 83       	std	Y+5, r18	; 0x05
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	9e 81       	ldd	r25, Y+6	; 0x06
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	91 05       	cpc	r25, r1
    20e0:	61 f1       	breq	.+88     	; 0x213a <DIO_u8SetPinDir+0x192>
    20e2:	2d 81       	ldd	r18, Y+5	; 0x05
    20e4:	3e 81       	ldd	r19, Y+6	; 0x06
    20e6:	23 30       	cpi	r18, 0x03	; 3
    20e8:	31 05       	cpc	r19, r1
    20ea:	34 f4       	brge	.+12     	; 0x20f8 <DIO_u8SetPinDir+0x150>
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	81 30       	cpi	r24, 0x01	; 1
    20f2:	91 05       	cpc	r25, r1
    20f4:	69 f0       	breq	.+26     	; 0x2110 <DIO_u8SetPinDir+0x168>
    20f6:	68 c0       	rjmp	.+208    	; 0x21c8 <DIO_u8SetPinDir+0x220>
    20f8:	2d 81       	ldd	r18, Y+5	; 0x05
    20fa:	3e 81       	ldd	r19, Y+6	; 0x06
    20fc:	23 30       	cpi	r18, 0x03	; 3
    20fe:	31 05       	cpc	r19, r1
    2100:	89 f1       	breq	.+98     	; 0x2164 <DIO_u8SetPinDir+0x1bc>
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	91 05       	cpc	r25, r1
    210a:	09 f4       	brne	.+2      	; 0x210e <DIO_u8SetPinDir+0x166>
    210c:	40 c0       	rjmp	.+128    	; 0x218e <DIO_u8SetPinDir+0x1e6>
    210e:	5c c0       	rjmp	.+184    	; 0x21c8 <DIO_u8SetPinDir+0x220>
				case DIO_GroupA:
					Clear_Bit(DIO_DDRA,Local_PinNumber);
    2110:	aa e3       	ldi	r26, 0x3A	; 58
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	ea e3       	ldi	r30, 0x3A	; 58
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	48 2f       	mov	r20, r24
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	02 2e       	mov	r0, r18
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_u8SetPinDir+0x186>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	0a 94       	dec	r0
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_u8SetPinDir+0x182>
    2132:	80 95       	com	r24
    2134:	84 23       	and	r24, r20
    2136:	8c 93       	st	X, r24
    2138:	47 c0       	rjmp	.+142    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupB:
					Clear_Bit(DIO_DDRB,Local_PinNumber);
    213a:	a7 e3       	ldi	r26, 0x37	; 55
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e7 e3       	ldi	r30, 0x37	; 55
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	48 2f       	mov	r20, r24
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	02 2e       	mov	r0, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <DIO_u8SetPinDir+0x1b0>
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	0a 94       	dec	r0
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <DIO_u8SetPinDir+0x1ac>
    215c:	80 95       	com	r24
    215e:	84 23       	and	r24, r20
    2160:	8c 93       	st	X, r24
    2162:	32 c0       	rjmp	.+100    	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupC:
					Clear_Bit(DIO_DDRC,Local_PinNumber);
    2164:	a4 e3       	ldi	r26, 0x34	; 52
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	e4 e3       	ldi	r30, 0x34	; 52
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	48 2f       	mov	r20, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	02 2e       	mov	r0, r18
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <DIO_u8SetPinDir+0x1da>
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	0a 94       	dec	r0
    2184:	e2 f7       	brpl	.-8      	; 0x217e <DIO_u8SetPinDir+0x1d6>
    2186:	80 95       	com	r24
    2188:	84 23       	and	r24, r20
    218a:	8c 93       	st	X, r24
    218c:	1d c0       	rjmp	.+58     	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				case DIO_GroupD:
					Clear_Bit(DIO_DDRD,Local_PinNumber);
    218e:	a1 e3       	ldi	r26, 0x31	; 49
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e1 e3       	ldi	r30, 0x31	; 49
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	48 2f       	mov	r20, r24
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	02 2e       	mov	r0, r18
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <DIO_u8SetPinDir+0x204>
    21a8:	88 0f       	add	r24, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	0a 94       	dec	r0
    21ae:	e2 f7       	brpl	.-8      	; 0x21a8 <DIO_u8SetPinDir+0x200>
    21b0:	80 95       	com	r24
    21b2:	84 23       	and	r24, r20
    21b4:	8c 93       	st	X, r24
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <DIO_u8SetPinDir+0x220>
					break;
				}

			}
			else{
				Request = RequestErrorNotValidState;
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <DIO_u8SetPinDir+0x220>
			}


		}
		else{
			Request = RequestErrorPinOutOfRange;
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_u8SetPinDir+0x220>
		}

	}
	else{
		Request = RequestErrorGroupOutOfRange;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ca:	28 96       	adiw	r28, 0x08	; 8
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <DIO_u8SetPinValue>:


u8 DIO_u8SetPinValue(u8 Local_GroupName,u8 Local_PinNumber,u8 Local_PinValue){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	28 97       	sbiw	r28, 0x08	; 8
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	6b 83       	std	Y+3, r22	; 0x03
    21f4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	85 30       	cpi	r24, 0x05	; 5
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <DIO_u8SetPinValue+0x22>
    21fc:	fd c0       	rjmp	.+506    	; 0x23f8 <DIO_u8SetPinValue+0x21c>
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	88 23       	and	r24, r24
    2202:	09 f4       	brne	.+2      	; 0x2206 <DIO_u8SetPinValue+0x2a>
    2204:	f9 c0       	rjmp	.+498    	; 0x23f8 <DIO_u8SetPinValue+0x21c>

		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	08 f0       	brcs	.+2      	; 0x220e <DIO_u8SetPinValue+0x32>
    220c:	f2 c0       	rjmp	.+484    	; 0x23f2 <DIO_u8SetPinValue+0x216>

			if(Local_PinValue == High){
    220e:	8c 81       	ldd	r24, Y+4	; 0x04
    2210:	81 30       	cpi	r24, 0x01	; 1
    2212:	09 f0       	breq	.+2      	; 0x2216 <DIO_u8SetPinValue+0x3a>
    2214:	71 c0       	rjmp	.+226    	; 0x22f8 <DIO_u8SetPinValue+0x11c>
				Request = RequestHandled;
    2216:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	38 87       	std	Y+8, r19	; 0x08
    2220:	2f 83       	std	Y+7, r18	; 0x07
    2222:	8f 81       	ldd	r24, Y+7	; 0x07
    2224:	98 85       	ldd	r25, Y+8	; 0x08
    2226:	82 30       	cpi	r24, 0x02	; 2
    2228:	91 05       	cpc	r25, r1
    222a:	51 f1       	breq	.+84     	; 0x2280 <DIO_u8SetPinValue+0xa4>
    222c:	2f 81       	ldd	r18, Y+7	; 0x07
    222e:	38 85       	ldd	r19, Y+8	; 0x08
    2230:	23 30       	cpi	r18, 0x03	; 3
    2232:	31 05       	cpc	r19, r1
    2234:	34 f4       	brge	.+12     	; 0x2242 <DIO_u8SetPinValue+0x66>
    2236:	8f 81       	ldd	r24, Y+7	; 0x07
    2238:	98 85       	ldd	r25, Y+8	; 0x08
    223a:	81 30       	cpi	r24, 0x01	; 1
    223c:	91 05       	cpc	r25, r1
    223e:	61 f0       	breq	.+24     	; 0x2258 <DIO_u8SetPinValue+0x7c>
    2240:	dd c0       	rjmp	.+442    	; 0x23fc <DIO_u8SetPinValue+0x220>
    2242:	2f 81       	ldd	r18, Y+7	; 0x07
    2244:	38 85       	ldd	r19, Y+8	; 0x08
    2246:	23 30       	cpi	r18, 0x03	; 3
    2248:	31 05       	cpc	r19, r1
    224a:	71 f1       	breq	.+92     	; 0x22a8 <DIO_u8SetPinValue+0xcc>
    224c:	8f 81       	ldd	r24, Y+7	; 0x07
    224e:	98 85       	ldd	r25, Y+8	; 0x08
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	91 05       	cpc	r25, r1
    2254:	e9 f1       	breq	.+122    	; 0x22d0 <DIO_u8SetPinValue+0xf4>
    2256:	d2 c0       	rjmp	.+420    	; 0x23fc <DIO_u8SetPinValue+0x220>
				case DIO_GroupA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    2258:	ab e3       	ldi	r26, 0x3B	; 59
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	eb e3       	ldi	r30, 0x3B	; 59
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	48 2f       	mov	r20, r24
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	02 2e       	mov	r0, r18
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <DIO_u8SetPinValue+0x9a>
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	0a 94       	dec	r0
    2278:	e2 f7       	brpl	.-8      	; 0x2272 <DIO_u8SetPinValue+0x96>
    227a:	84 2b       	or	r24, r20
    227c:	8c 93       	st	X, r24
    227e:	be c0       	rjmp	.+380    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    2280:	a8 e3       	ldi	r26, 0x38	; 56
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e8 e3       	ldi	r30, 0x38	; 56
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <DIO_u8SetPinValue+0xc2>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <DIO_u8SetPinValue+0xbe>
    22a2:	84 2b       	or	r24, r20
    22a4:	8c 93       	st	X, r24
    22a6:	aa c0       	rjmp	.+340    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    22a8:	a5 e3       	ldi	r26, 0x35	; 53
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e5 e3       	ldi	r30, 0x35	; 53
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	48 2f       	mov	r20, r24
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 2e       	mov	r0, r18
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <DIO_u8SetPinValue+0xea>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	0a 94       	dec	r0
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <DIO_u8SetPinValue+0xe6>
    22ca:	84 2b       	or	r24, r20
    22cc:	8c 93       	st	X, r24
    22ce:	96 c0       	rjmp	.+300    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    22d0:	a2 e3       	ldi	r26, 0x32	; 50
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e2 e3       	ldi	r30, 0x32	; 50
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	48 2f       	mov	r20, r24
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	02 2e       	mov	r0, r18
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <DIO_u8SetPinValue+0x112>
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	0a 94       	dec	r0
    22f0:	e2 f7       	brpl	.-8      	; 0x22ea <DIO_u8SetPinValue+0x10e>
    22f2:	84 2b       	or	r24, r20
    22f4:	8c 93       	st	X, r24
    22f6:	82 c0       	rjmp	.+260    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				}
			}
			else if(Local_PinValue == Low){
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	88 23       	and	r24, r24
    22fc:	09 f0       	breq	.+2      	; 0x2300 <DIO_u8SetPinValue+0x124>
    22fe:	76 c0       	rjmp	.+236    	; 0x23ec <DIO_u8SetPinValue+0x210>
				Request = RequestHandled;
    2300:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	3e 83       	std	Y+6, r19	; 0x06
    230a:	2d 83       	std	Y+5, r18	; 0x05
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	82 30       	cpi	r24, 0x02	; 2
    2312:	91 05       	cpc	r25, r1
    2314:	61 f1       	breq	.+88     	; 0x236e <DIO_u8SetPinValue+0x192>
    2316:	2d 81       	ldd	r18, Y+5	; 0x05
    2318:	3e 81       	ldd	r19, Y+6	; 0x06
    231a:	23 30       	cpi	r18, 0x03	; 3
    231c:	31 05       	cpc	r19, r1
    231e:	34 f4       	brge	.+12     	; 0x232c <DIO_u8SetPinValue+0x150>
    2320:	8d 81       	ldd	r24, Y+5	; 0x05
    2322:	9e 81       	ldd	r25, Y+6	; 0x06
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	91 05       	cpc	r25, r1
    2328:	69 f0       	breq	.+26     	; 0x2344 <DIO_u8SetPinValue+0x168>
    232a:	68 c0       	rjmp	.+208    	; 0x23fc <DIO_u8SetPinValue+0x220>
    232c:	2d 81       	ldd	r18, Y+5	; 0x05
    232e:	3e 81       	ldd	r19, Y+6	; 0x06
    2330:	23 30       	cpi	r18, 0x03	; 3
    2332:	31 05       	cpc	r19, r1
    2334:	89 f1       	breq	.+98     	; 0x2398 <DIO_u8SetPinValue+0x1bc>
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	84 30       	cpi	r24, 0x04	; 4
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <DIO_u8SetPinValue+0x166>
    2340:	40 c0       	rjmp	.+128    	; 0x23c2 <DIO_u8SetPinValue+0x1e6>
    2342:	5c c0       	rjmp	.+184    	; 0x23fc <DIO_u8SetPinValue+0x220>
				case DIO_GroupA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    2344:	ab e3       	ldi	r26, 0x3B	; 59
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	eb e3       	ldi	r30, 0x3B	; 59
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_u8SetPinValue+0x186>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_u8SetPinValue+0x182>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	8c 93       	st	X, r24
    236c:	47 c0       	rjmp	.+142    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    236e:	a8 e3       	ldi	r26, 0x38	; 56
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e8 e3       	ldi	r30, 0x38	; 56
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_u8SetPinValue+0x1b0>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_u8SetPinValue+0x1ac>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	8c 93       	st	X, r24
    2396:	32 c0       	rjmp	.+100    	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    2398:	a5 e3       	ldi	r26, 0x35	; 53
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e5 e3       	ldi	r30, 0x35	; 53
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_u8SetPinValue+0x1da>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_u8SetPinValue+0x1d6>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24
    23c0:	1d c0       	rjmp	.+58     	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    23c2:	a2 e3       	ldi	r26, 0x32	; 50
    23c4:	b0 e0       	ldi	r27, 0x00	; 0
    23c6:	e2 e3       	ldi	r30, 0x32	; 50
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	48 2f       	mov	r20, r24
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	28 2f       	mov	r18, r24
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	02 2e       	mov	r0, r18
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <DIO_u8SetPinValue+0x204>
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <DIO_u8SetPinValue+0x200>
    23e4:	80 95       	com	r24
    23e6:	84 23       	and	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	08 c0       	rjmp	.+16     	; 0x23fc <DIO_u8SetPinValue+0x220>
					break;
				}

			}
			else{
				Request = RequestErrorNotValidValue;
    23ec:	84 e0       	ldi	r24, 0x04	; 4
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	05 c0       	rjmp	.+10     	; 0x23fc <DIO_u8SetPinValue+0x220>
			}


		}
		else{
			Request = RequestErrorPinOutOfRange;
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <DIO_u8SetPinValue+0x220>
		}

	}
	else{
		Request = RequestErrorGroupOutOfRange;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23fe:	28 96       	adiw	r28, 0x08	; 8
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Local_GroupName,u8 Local_PinNumber,u8* Reference_Value){
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	27 97       	sbiw	r28, 0x07	; 7
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	6b 83       	std	Y+3, r22	; 0x03
    2428:	5d 83       	std	Y+5, r21	; 0x05
    242a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	85 30       	cpi	r24, 0x05	; 5
    2430:	08 f0       	brcs	.+2      	; 0x2434 <DIO_u8GetPinValue+0x24>
    2432:	7d c0       	rjmp	.+250    	; 0x252e <DIO_u8GetPinValue+0x11e>
    2434:	8a 81       	ldd	r24, Y+2	; 0x02
    2436:	88 23       	and	r24, r24
    2438:	09 f4       	brne	.+2      	; 0x243c <DIO_u8GetPinValue+0x2c>
    243a:	79 c0       	rjmp	.+242    	; 0x252e <DIO_u8GetPinValue+0x11e>

		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 30       	cpi	r24, 0x08	; 8
    2440:	08 f0       	brcs	.+2      	; 0x2444 <DIO_u8GetPinValue+0x34>
    2442:	72 c0       	rjmp	.+228    	; 0x2528 <DIO_u8GetPinValue+0x118>
			Request = RequestHandled;
    2444:	19 82       	std	Y+1, r1	; 0x01
			switch(Local_GroupName){
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3f 83       	std	Y+7, r19	; 0x07
    244e:	2e 83       	std	Y+6, r18	; 0x06
    2450:	4e 81       	ldd	r20, Y+6	; 0x06
    2452:	5f 81       	ldd	r21, Y+7	; 0x07
    2454:	42 30       	cpi	r20, 0x02	; 2
    2456:	51 05       	cpc	r21, r1
    2458:	59 f1       	breq	.+86     	; 0x24b0 <DIO_u8GetPinValue+0xa0>
    245a:	8e 81       	ldd	r24, Y+6	; 0x06
    245c:	9f 81       	ldd	r25, Y+7	; 0x07
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	91 05       	cpc	r25, r1
    2462:	34 f4       	brge	.+12     	; 0x2470 <DIO_u8GetPinValue+0x60>
    2464:	2e 81       	ldd	r18, Y+6	; 0x06
    2466:	3f 81       	ldd	r19, Y+7	; 0x07
    2468:	21 30       	cpi	r18, 0x01	; 1
    246a:	31 05       	cpc	r19, r1
    246c:	69 f0       	breq	.+26     	; 0x2488 <DIO_u8GetPinValue+0x78>
    246e:	61 c0       	rjmp	.+194    	; 0x2532 <DIO_u8GetPinValue+0x122>
    2470:	4e 81       	ldd	r20, Y+6	; 0x06
    2472:	5f 81       	ldd	r21, Y+7	; 0x07
    2474:	43 30       	cpi	r20, 0x03	; 3
    2476:	51 05       	cpc	r21, r1
    2478:	79 f1       	breq	.+94     	; 0x24d8 <DIO_u8GetPinValue+0xc8>
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	9f 81       	ldd	r25, Y+7	; 0x07
    247e:	84 30       	cpi	r24, 0x04	; 4
    2480:	91 05       	cpc	r25, r1
    2482:	09 f4       	brne	.+2      	; 0x2486 <DIO_u8GetPinValue+0x76>
    2484:	3d c0       	rjmp	.+122    	; 0x2500 <DIO_u8GetPinValue+0xf0>
    2486:	55 c0       	rjmp	.+170    	; 0x2532 <DIO_u8GetPinValue+0x122>
			case DIO_GroupA:
				*Reference_Value = Get_Bit(DIO_PINA,Local_PinNumber);
    2488:	e9 e3       	ldi	r30, 0x39	; 57
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	88 2f       	mov	r24, r24
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a9 01       	movw	r20, r18
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <DIO_u8GetPinValue+0x90>
    249c:	55 95       	asr	r21
    249e:	47 95       	ror	r20
    24a0:	8a 95       	dec	r24
    24a2:	e2 f7       	brpl	.-8      	; 0x249c <DIO_u8GetPinValue+0x8c>
    24a4:	ca 01       	movw	r24, r20
    24a6:	81 70       	andi	r24, 0x01	; 1
    24a8:	ec 81       	ldd	r30, Y+4	; 0x04
    24aa:	fd 81       	ldd	r31, Y+5	; 0x05
    24ac:	80 83       	st	Z, r24
    24ae:	41 c0       	rjmp	.+130    	; 0x2532 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_GroupB:
				*Reference_Value = Get_Bit(DIO_PINB,Local_PinNumber);
    24b0:	e6 e3       	ldi	r30, 0x36	; 54
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	88 2f       	mov	r24, r24
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a9 01       	movw	r20, r18
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <DIO_u8GetPinValue+0xb8>
    24c4:	55 95       	asr	r21
    24c6:	47 95       	ror	r20
    24c8:	8a 95       	dec	r24
    24ca:	e2 f7       	brpl	.-8      	; 0x24c4 <DIO_u8GetPinValue+0xb4>
    24cc:	ca 01       	movw	r24, r20
    24ce:	81 70       	andi	r24, 0x01	; 1
    24d0:	ec 81       	ldd	r30, Y+4	; 0x04
    24d2:	fd 81       	ldd	r31, Y+5	; 0x05
    24d4:	80 83       	st	Z, r24
    24d6:	2d c0       	rjmp	.+90     	; 0x2532 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_GroupC:
				*Reference_Value = Get_Bit(DIO_PINC,Local_PinNumber);
    24d8:	e3 e3       	ldi	r30, 0x33	; 51
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	88 2f       	mov	r24, r24
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a9 01       	movw	r20, r18
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <DIO_u8GetPinValue+0xe0>
    24ec:	55 95       	asr	r21
    24ee:	47 95       	ror	r20
    24f0:	8a 95       	dec	r24
    24f2:	e2 f7       	brpl	.-8      	; 0x24ec <DIO_u8GetPinValue+0xdc>
    24f4:	ca 01       	movw	r24, r20
    24f6:	81 70       	andi	r24, 0x01	; 1
    24f8:	ec 81       	ldd	r30, Y+4	; 0x04
    24fa:	fd 81       	ldd	r31, Y+5	; 0x05
    24fc:	80 83       	st	Z, r24
    24fe:	19 c0       	rjmp	.+50     	; 0x2532 <DIO_u8GetPinValue+0x122>
				break;
			case DIO_GroupD:
				*Reference_Value = Get_Bit(DIO_PIND,Local_PinNumber);
    2500:	e0 e3       	ldi	r30, 0x30	; 48
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	a9 01       	movw	r20, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <DIO_u8GetPinValue+0x108>
    2514:	55 95       	asr	r21
    2516:	47 95       	ror	r20
    2518:	8a 95       	dec	r24
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <DIO_u8GetPinValue+0x104>
    251c:	ca 01       	movw	r24, r20
    251e:	81 70       	andi	r24, 0x01	; 1
    2520:	ec 81       	ldd	r30, Y+4	; 0x04
    2522:	fd 81       	ldd	r31, Y+5	; 0x05
    2524:	80 83       	st	Z, r24
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <DIO_u8GetPinValue+0x122>
				break;
			}
		}
		else{
			Request = RequestErrorPinOutOfRange;
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <DIO_u8GetPinValue+0x122>
		}

	}
	else{
		Request = RequestErrorGroupOutOfRange;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2532:	89 81       	ldd	r24, Y+1	; 0x01
}
    2534:	27 96       	adiw	r28, 0x07	; 7
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	cf 91       	pop	r28
    2542:	df 91       	pop	r29
    2544:	08 95       	ret

00002546 <DIO_u8SetPortDir>:

u8 DIO_u8SetPortDir(u8 Local_GroupName,u8 Local_PortState){
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	00 d0       	rcall	.+0      	; 0x254c <DIO_u8SetPortDir+0x6>
    254c:	00 d0       	rcall	.+0      	; 0x254e <DIO_u8SetPortDir+0x8>
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	8a 83       	std	Y+2, r24	; 0x02
    2556:	6b 83       	std	Y+3, r22	; 0x03
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	85 30       	cpi	r24, 0x05	; 5
    255c:	c0 f5       	brcc	.+112    	; 0x25ce <DIO_u8SetPortDir+0x88>
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	88 23       	and	r24, r24
    2562:	a9 f1       	breq	.+106    	; 0x25ce <DIO_u8SetPortDir+0x88>
		if(Local_PortState <= DIO_GroupOutput){
			Request = RequestHandled;
    2564:	19 82       	std	Y+1, r1	; 0x01
			switch(Local_GroupName){
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	3d 83       	std	Y+5, r19	; 0x05
    256e:	2c 83       	std	Y+4, r18	; 0x04
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	9d 81       	ldd	r25, Y+5	; 0x05
    2574:	82 30       	cpi	r24, 0x02	; 2
    2576:	91 05       	cpc	r25, r1
    2578:	d9 f0       	breq	.+54     	; 0x25b0 <DIO_u8SetPortDir+0x6a>
    257a:	2c 81       	ldd	r18, Y+4	; 0x04
    257c:	3d 81       	ldd	r19, Y+5	; 0x05
    257e:	23 30       	cpi	r18, 0x03	; 3
    2580:	31 05       	cpc	r19, r1
    2582:	34 f4       	brge	.+12     	; 0x2590 <DIO_u8SetPortDir+0x4a>
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	9d 81       	ldd	r25, Y+5	; 0x05
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	91 05       	cpc	r25, r1
    258c:	61 f0       	breq	.+24     	; 0x25a6 <DIO_u8SetPortDir+0x60>
    258e:	21 c0       	rjmp	.+66     	; 0x25d2 <DIO_u8SetPortDir+0x8c>
    2590:	2c 81       	ldd	r18, Y+4	; 0x04
    2592:	3d 81       	ldd	r19, Y+5	; 0x05
    2594:	23 30       	cpi	r18, 0x03	; 3
    2596:	31 05       	cpc	r19, r1
    2598:	81 f0       	breq	.+32     	; 0x25ba <DIO_u8SetPortDir+0x74>
    259a:	8c 81       	ldd	r24, Y+4	; 0x04
    259c:	9d 81       	ldd	r25, Y+5	; 0x05
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	91 05       	cpc	r25, r1
    25a2:	81 f0       	breq	.+32     	; 0x25c4 <DIO_u8SetPortDir+0x7e>
    25a4:	16 c0       	rjmp	.+44     	; 0x25d2 <DIO_u8SetPortDir+0x8c>
			case DIO_GroupA:
				DIO_DDRA = Local_PortState;
    25a6:	ea e3       	ldi	r30, 0x3A	; 58
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	80 83       	st	Z, r24
    25ae:	11 c0       	rjmp	.+34     	; 0x25d2 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupB:
				DIO_DDRB = Local_PortState;
    25b0:	e7 e3       	ldi	r30, 0x37	; 55
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	80 83       	st	Z, r24
    25b8:	0c c0       	rjmp	.+24     	; 0x25d2 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupC:
				DIO_DDRC = Local_PortState;
    25ba:	e4 e3       	ldi	r30, 0x34	; 52
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	80 83       	st	Z, r24
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupD:
				DIO_DDRD = Local_PortState;
    25c4:	e1 e3       	ldi	r30, 0x31	; 49
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	80 83       	st	Z, r24
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <DIO_u8SetPortDir+0x8c>
		}


	}
	else{
		Request = RequestErrorGroupOutOfRange;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Local_GroupName,u8 Local_PortState){
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <DIO_u8SetPortValue+0x6>
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <DIO_u8SetPortValue+0x8>
    25ec:	0f 92       	push	r0
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	8a 83       	std	Y+2, r24	; 0x02
    25f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	85 30       	cpi	r24, 0x05	; 5
    25fa:	c0 f5       	brcc	.+112    	; 0x266c <DIO_u8SetPortValue+0x88>
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	88 23       	and	r24, r24
    2600:	a9 f1       	breq	.+106    	; 0x266c <DIO_u8SetPortValue+0x88>
		if(Local_PortState <= DIO_GroupHigh){
			Request = RequestHandled;
    2602:	19 82       	std	Y+1, r1	; 0x01
			switch(Local_GroupName){
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	3d 83       	std	Y+5, r19	; 0x05
    260c:	2c 83       	std	Y+4, r18	; 0x04
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	91 05       	cpc	r25, r1
    2616:	d9 f0       	breq	.+54     	; 0x264e <DIO_u8SetPortValue+0x6a>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	23 30       	cpi	r18, 0x03	; 3
    261e:	31 05       	cpc	r19, r1
    2620:	34 f4       	brge	.+12     	; 0x262e <DIO_u8SetPortValue+0x4a>
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	91 05       	cpc	r25, r1
    262a:	61 f0       	breq	.+24     	; 0x2644 <DIO_u8SetPortValue+0x60>
    262c:	21 c0       	rjmp	.+66     	; 0x2670 <DIO_u8SetPortValue+0x8c>
    262e:	2c 81       	ldd	r18, Y+4	; 0x04
    2630:	3d 81       	ldd	r19, Y+5	; 0x05
    2632:	23 30       	cpi	r18, 0x03	; 3
    2634:	31 05       	cpc	r19, r1
    2636:	81 f0       	breq	.+32     	; 0x2658 <DIO_u8SetPortValue+0x74>
    2638:	8c 81       	ldd	r24, Y+4	; 0x04
    263a:	9d 81       	ldd	r25, Y+5	; 0x05
    263c:	84 30       	cpi	r24, 0x04	; 4
    263e:	91 05       	cpc	r25, r1
    2640:	81 f0       	breq	.+32     	; 0x2662 <DIO_u8SetPortValue+0x7e>
    2642:	16 c0       	rjmp	.+44     	; 0x2670 <DIO_u8SetPortValue+0x8c>
			case DIO_GroupA:
				DIO_PORTA = Local_PortState;
    2644:	eb e3       	ldi	r30, 0x3B	; 59
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	80 83       	st	Z, r24
    264c:	11 c0       	rjmp	.+34     	; 0x2670 <DIO_u8SetPortValue+0x8c>
				break;
			case DIO_GroupB:
				DIO_PORTB = Local_PortState;
    264e:	e8 e3       	ldi	r30, 0x38	; 56
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	80 83       	st	Z, r24
    2656:	0c c0       	rjmp	.+24     	; 0x2670 <DIO_u8SetPortValue+0x8c>
				break;
			case DIO_GroupC:
				DIO_PORTC = Local_PortState;
    2658:	e5 e3       	ldi	r30, 0x35	; 53
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	80 83       	st	Z, r24
    2660:	07 c0       	rjmp	.+14     	; 0x2670 <DIO_u8SetPortValue+0x8c>
				break;
			case DIO_GroupD:
				DIO_PORTD = Local_PortState;
    2662:	e2 e3       	ldi	r30, 0x32	; 50
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	80 83       	st	Z, r24
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <DIO_u8SetPortValue+0x8c>
		}


	}
	else{
		Request = RequestErrorGroupOutOfRange;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2670:	89 81       	ldd	r24, Y+1	; 0x01
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Local_GroupName,u8* Reference_Value){
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <DIO_u8GetPortValue+0x6>
    2688:	00 d0       	rcall	.+0      	; 0x268a <DIO_u8GetPortValue+0x8>
    268a:	00 d0       	rcall	.+0      	; 0x268c <DIO_u8GetPortValue+0xa>
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	8a 83       	std	Y+2, r24	; 0x02
    2692:	7c 83       	std	Y+4, r23	; 0x04
    2694:	6b 83       	std	Y+3, r22	; 0x03
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	85 30       	cpi	r24, 0x05	; 5
    269a:	08 f0       	brcs	.+2      	; 0x269e <DIO_u8GetPortValue+0x1c>
    269c:	40 c0       	rjmp	.+128    	; 0x271e <DIO_u8GetPortValue+0x9c>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	88 23       	and	r24, r24
    26a2:	e9 f1       	breq	.+122    	; 0x271e <DIO_u8GetPortValue+0x9c>
		Request = RequestHandled;
    26a4:	19 82       	std	Y+1, r1	; 0x01
		switch(Local_GroupName){
    26a6:	8a 81       	ldd	r24, Y+2	; 0x02
    26a8:	28 2f       	mov	r18, r24
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	3e 83       	std	Y+6, r19	; 0x06
    26ae:	2d 83       	std	Y+5, r18	; 0x05
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	9e 81       	ldd	r25, Y+6	; 0x06
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	91 05       	cpc	r25, r1
    26b8:	e9 f0       	breq	.+58     	; 0x26f4 <DIO_u8GetPortValue+0x72>
    26ba:	2d 81       	ldd	r18, Y+5	; 0x05
    26bc:	3e 81       	ldd	r19, Y+6	; 0x06
    26be:	23 30       	cpi	r18, 0x03	; 3
    26c0:	31 05       	cpc	r19, r1
    26c2:	34 f4       	brge	.+12     	; 0x26d0 <DIO_u8GetPortValue+0x4e>
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	81 30       	cpi	r24, 0x01	; 1
    26ca:	91 05       	cpc	r25, r1
    26cc:	61 f0       	breq	.+24     	; 0x26e6 <DIO_u8GetPortValue+0x64>
    26ce:	29 c0       	rjmp	.+82     	; 0x2722 <DIO_u8GetPortValue+0xa0>
    26d0:	2d 81       	ldd	r18, Y+5	; 0x05
    26d2:	3e 81       	ldd	r19, Y+6	; 0x06
    26d4:	23 30       	cpi	r18, 0x03	; 3
    26d6:	31 05       	cpc	r19, r1
    26d8:	a1 f0       	breq	.+40     	; 0x2702 <DIO_u8GetPortValue+0x80>
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	84 30       	cpi	r24, 0x04	; 4
    26e0:	91 05       	cpc	r25, r1
    26e2:	b1 f0       	breq	.+44     	; 0x2710 <DIO_u8GetPortValue+0x8e>
    26e4:	1e c0       	rjmp	.+60     	; 0x2722 <DIO_u8GetPortValue+0xa0>
		case DIO_GroupA:
			*Reference_Value = DIO_PORTA;
    26e6:	eb e3       	ldi	r30, 0x3B	; 59
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	eb 81       	ldd	r30, Y+3	; 0x03
    26ee:	fc 81       	ldd	r31, Y+4	; 0x04
    26f0:	80 83       	st	Z, r24
    26f2:	17 c0       	rjmp	.+46     	; 0x2722 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_GroupB:
			*Reference_Value = DIO_PORTB;
    26f4:	e8 e3       	ldi	r30, 0x38	; 56
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	80 81       	ld	r24, Z
    26fa:	eb 81       	ldd	r30, Y+3	; 0x03
    26fc:	fc 81       	ldd	r31, Y+4	; 0x04
    26fe:	80 83       	st	Z, r24
    2700:	10 c0       	rjmp	.+32     	; 0x2722 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_GroupC:
			*Reference_Value = DIO_PORTC;
    2702:	e5 e3       	ldi	r30, 0x35	; 53
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	eb 81       	ldd	r30, Y+3	; 0x03
    270a:	fc 81       	ldd	r31, Y+4	; 0x04
    270c:	80 83       	st	Z, r24
    270e:	09 c0       	rjmp	.+18     	; 0x2722 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_GroupD:
			*Reference_Value = DIO_PORTD;
    2710:	e2 e3       	ldi	r30, 0x32	; 50
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	eb 81       	ldd	r30, Y+3	; 0x03
    2718:	fc 81       	ldd	r31, Y+4	; 0x04
    271a:	80 83       	st	Z, r24
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <DIO_u8GetPortValue+0xa0>
			break;
		}
	}
	else{
		Request = RequestErrorGroupOutOfRange;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
}
    2724:	26 96       	adiw	r28, 0x06	; 6
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <DIO_u8ControlPullUp>:

u8 DIO_u8ControlPullUp(u8 Local_GroupName, u8 Local_ConnectionType, u8 Local_PinNumber, u8 Local_PullUpState){
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	2d 97       	sbiw	r28, 0x0d	; 13
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
    274a:	8a 83       	std	Y+2, r24	; 0x02
    274c:	6b 83       	std	Y+3, r22	; 0x03
    274e:	4c 83       	std	Y+4, r20	; 0x04
    2750:	2d 83       	std	Y+5, r18	; 0x05
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	85 30       	cpi	r24, 0x05	; 5
    2756:	08 f0       	brcs	.+2      	; 0x275a <DIO_u8ControlPullUp+0x24>
    2758:	77 c1       	rjmp	.+750    	; 0x2a48 <DIO_u8ControlPullUp+0x312>
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	88 23       	and	r24, r24
    275e:	09 f4       	brne	.+2      	; 0x2762 <DIO_u8ControlPullUp+0x2c>
    2760:	73 c1       	rjmp	.+742    	; 0x2a48 <DIO_u8ControlPullUp+0x312>
		if(Local_ConnectionType == DIO_PortConnection){
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	88 23       	and	r24, r24
    2766:	09 f0       	breq	.+2      	; 0x276a <DIO_u8ControlPullUp+0x34>
    2768:	6f c0       	rjmp	.+222    	; 0x2848 <DIO_u8ControlPullUp+0x112>
			if(Local_PullUpState == En){
    276a:	8d 81       	ldd	r24, Y+5	; 0x05
    276c:	81 30       	cpi	r24, 0x01	; 1
    276e:	a9 f5       	brne	.+106    	; 0x27da <DIO_u8ControlPullUp+0xa4>
				Request = RequestHandled;
    2770:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	3d 87       	std	Y+13, r19	; 0x0d
    277a:	2c 87       	std	Y+12, r18	; 0x0c
    277c:	8c 85       	ldd	r24, Y+12	; 0x0c
    277e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	91 05       	cpc	r25, r1
    2784:	d9 f0       	breq	.+54     	; 0x27bc <DIO_u8ControlPullUp+0x86>
    2786:	2c 85       	ldd	r18, Y+12	; 0x0c
    2788:	3d 85       	ldd	r19, Y+13	; 0x0d
    278a:	23 30       	cpi	r18, 0x03	; 3
    278c:	31 05       	cpc	r19, r1
    278e:	34 f4       	brge	.+12     	; 0x279c <DIO_u8ControlPullUp+0x66>
    2790:	8c 85       	ldd	r24, Y+12	; 0x0c
    2792:	9d 85       	ldd	r25, Y+13	; 0x0d
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	91 05       	cpc	r25, r1
    2798:	61 f0       	breq	.+24     	; 0x27b2 <DIO_u8ControlPullUp+0x7c>
    279a:	58 c1       	rjmp	.+688    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
    279c:	2c 85       	ldd	r18, Y+12	; 0x0c
    279e:	3d 85       	ldd	r19, Y+13	; 0x0d
    27a0:	23 30       	cpi	r18, 0x03	; 3
    27a2:	31 05       	cpc	r19, r1
    27a4:	81 f0       	breq	.+32     	; 0x27c6 <DIO_u8ControlPullUp+0x90>
    27a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    27a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    27aa:	84 30       	cpi	r24, 0x04	; 4
    27ac:	91 05       	cpc	r25, r1
    27ae:	81 f0       	breq	.+32     	; 0x27d0 <DIO_u8ControlPullUp+0x9a>
    27b0:	4d c1       	rjmp	.+666    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
				case DIO_GroupA:
					DIO_PORTA = DIO_GroupHigh;
    27b2:	eb e3       	ldi	r30, 0x3B	; 59
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	8f ef       	ldi	r24, 0xFF	; 255
    27b8:	80 83       	st	Z, r24
    27ba:	48 c1       	rjmp	.+656    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupB:
					DIO_PORTB = DIO_GroupHigh;
    27bc:	e8 e3       	ldi	r30, 0x38	; 56
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	80 83       	st	Z, r24
    27c4:	43 c1       	rjmp	.+646    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupC:
					DIO_PORTC = DIO_GroupHigh;
    27c6:	e5 e3       	ldi	r30, 0x35	; 53
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	80 83       	st	Z, r24
    27ce:	3e c1       	rjmp	.+636    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupD:
					DIO_PORTD = DIO_GroupHigh;
    27d0:	e2 e3       	ldi	r30, 0x32	; 50
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	8f ef       	ldi	r24, 0xFF	; 255
    27d6:	80 83       	st	Z, r24
    27d8:	39 c1       	rjmp	.+626    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				}
			}
			else if(Local_PullUpState == Dis){
    27da:	8d 81       	ldd	r24, Y+5	; 0x05
    27dc:	88 23       	and	r24, r24
    27de:	89 f5       	brne	.+98     	; 0x2842 <DIO_u8ControlPullUp+0x10c>
				Request = RequestHandled;
    27e0:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	3b 87       	std	Y+11, r19	; 0x0b
    27ea:	2a 87       	std	Y+10, r18	; 0x0a
    27ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    27f0:	82 30       	cpi	r24, 0x02	; 2
    27f2:	91 05       	cpc	r25, r1
    27f4:	d1 f0       	breq	.+52     	; 0x282a <DIO_u8ControlPullUp+0xf4>
    27f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    27f8:	3b 85       	ldd	r19, Y+11	; 0x0b
    27fa:	23 30       	cpi	r18, 0x03	; 3
    27fc:	31 05       	cpc	r19, r1
    27fe:	34 f4       	brge	.+12     	; 0x280c <DIO_u8ControlPullUp+0xd6>
    2800:	8a 85       	ldd	r24, Y+10	; 0x0a
    2802:	9b 85       	ldd	r25, Y+11	; 0x0b
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	91 05       	cpc	r25, r1
    2808:	61 f0       	breq	.+24     	; 0x2822 <DIO_u8ControlPullUp+0xec>
    280a:	20 c1       	rjmp	.+576    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
    280c:	2a 85       	ldd	r18, Y+10	; 0x0a
    280e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2810:	23 30       	cpi	r18, 0x03	; 3
    2812:	31 05       	cpc	r19, r1
    2814:	71 f0       	breq	.+28     	; 0x2832 <DIO_u8ControlPullUp+0xfc>
    2816:	8a 85       	ldd	r24, Y+10	; 0x0a
    2818:	9b 85       	ldd	r25, Y+11	; 0x0b
    281a:	84 30       	cpi	r24, 0x04	; 4
    281c:	91 05       	cpc	r25, r1
    281e:	69 f0       	breq	.+26     	; 0x283a <DIO_u8ControlPullUp+0x104>
    2820:	15 c1       	rjmp	.+554    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
				case DIO_GroupA:
					DIO_PORTA = DIO_GroupLow;
    2822:	eb e3       	ldi	r30, 0x3B	; 59
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	10 82       	st	Z, r1
    2828:	11 c1       	rjmp	.+546    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupB:
					DIO_PORTB = DIO_GroupLow;
    282a:	e8 e3       	ldi	r30, 0x38	; 56
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	10 82       	st	Z, r1
    2830:	0d c1       	rjmp	.+538    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupC:
					DIO_PORTC = DIO_GroupLow;
    2832:	e5 e3       	ldi	r30, 0x35	; 53
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	10 82       	st	Z, r1
    2838:	09 c1       	rjmp	.+530    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				case DIO_GroupD:
					DIO_PORTD = DIO_GroupLow;
    283a:	e2 e3       	ldi	r30, 0x32	; 50
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	10 82       	st	Z, r1
    2840:	05 c1       	rjmp	.+522    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					break;
				}
			}
			else{
				Request = RequestErrorNotValidPullUpState;
    2842:	86 e0       	ldi	r24, 0x06	; 6
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	02 c1       	rjmp	.+516    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
			}

		}
		else if(Local_ConnectionType == DIO_PinConnection){
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	09 f0       	breq	.+2      	; 0x2850 <DIO_u8ControlPullUp+0x11a>
    284e:	f9 c0       	rjmp	.+498    	; 0x2a42 <DIO_u8ControlPullUp+0x30c>

			if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    2850:	8c 81       	ldd	r24, Y+4	; 0x04
    2852:	88 30       	cpi	r24, 0x08	; 8
    2854:	08 f0       	brcs	.+2      	; 0x2858 <DIO_u8ControlPullUp+0x122>
    2856:	f2 c0       	rjmp	.+484    	; 0x2a3c <DIO_u8ControlPullUp+0x306>
				if(Local_PullUpState == En){
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	81 30       	cpi	r24, 0x01	; 1
    285c:	09 f0       	breq	.+2      	; 0x2860 <DIO_u8ControlPullUp+0x12a>
    285e:	71 c0       	rjmp	.+226    	; 0x2942 <DIO_u8ControlPullUp+0x20c>
					Request = RequestHandled;
    2860:	19 82       	std	Y+1, r1	; 0x01
					switch(Local_GroupName){
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	28 2f       	mov	r18, r24
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	39 87       	std	Y+9, r19	; 0x09
    286a:	28 87       	std	Y+8, r18	; 0x08
    286c:	88 85       	ldd	r24, Y+8	; 0x08
    286e:	99 85       	ldd	r25, Y+9	; 0x09
    2870:	82 30       	cpi	r24, 0x02	; 2
    2872:	91 05       	cpc	r25, r1
    2874:	51 f1       	breq	.+84     	; 0x28ca <DIO_u8ControlPullUp+0x194>
    2876:	28 85       	ldd	r18, Y+8	; 0x08
    2878:	39 85       	ldd	r19, Y+9	; 0x09
    287a:	23 30       	cpi	r18, 0x03	; 3
    287c:	31 05       	cpc	r19, r1
    287e:	34 f4       	brge	.+12     	; 0x288c <DIO_u8ControlPullUp+0x156>
    2880:	88 85       	ldd	r24, Y+8	; 0x08
    2882:	99 85       	ldd	r25, Y+9	; 0x09
    2884:	81 30       	cpi	r24, 0x01	; 1
    2886:	91 05       	cpc	r25, r1
    2888:	61 f0       	breq	.+24     	; 0x28a2 <DIO_u8ControlPullUp+0x16c>
    288a:	e0 c0       	rjmp	.+448    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
    288c:	28 85       	ldd	r18, Y+8	; 0x08
    288e:	39 85       	ldd	r19, Y+9	; 0x09
    2890:	23 30       	cpi	r18, 0x03	; 3
    2892:	31 05       	cpc	r19, r1
    2894:	71 f1       	breq	.+92     	; 0x28f2 <DIO_u8ControlPullUp+0x1bc>
    2896:	88 85       	ldd	r24, Y+8	; 0x08
    2898:	99 85       	ldd	r25, Y+9	; 0x09
    289a:	84 30       	cpi	r24, 0x04	; 4
    289c:	91 05       	cpc	r25, r1
    289e:	e9 f1       	breq	.+122    	; 0x291a <DIO_u8ControlPullUp+0x1e4>
    28a0:	d5 c0       	rjmp	.+426    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					case DIO_GroupA:
						Set_Bit(DIO_PORTA,Local_PinNumber);
    28a2:	ab e3       	ldi	r26, 0x3B	; 59
    28a4:	b0 e0       	ldi	r27, 0x00	; 0
    28a6:	eb e3       	ldi	r30, 0x3B	; 59
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	48 2f       	mov	r20, r24
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	02 2e       	mov	r0, r18
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <DIO_u8ControlPullUp+0x18a>
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	0a 94       	dec	r0
    28c2:	e2 f7       	brpl	.-8      	; 0x28bc <DIO_u8ControlPullUp+0x186>
    28c4:	84 2b       	or	r24, r20
    28c6:	8c 93       	st	X, r24
    28c8:	c1 c0       	rjmp	.+386    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupB:
						Set_Bit(DIO_PORTB,Local_PinNumber);
    28ca:	a8 e3       	ldi	r26, 0x38	; 56
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e8 e3       	ldi	r30, 0x38	; 56
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	48 2f       	mov	r20, r24
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	28 2f       	mov	r18, r24
    28da:	30 e0       	ldi	r19, 0x00	; 0
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	02 2e       	mov	r0, r18
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <DIO_u8ControlPullUp+0x1b2>
    28e4:	88 0f       	add	r24, r24
    28e6:	99 1f       	adc	r25, r25
    28e8:	0a 94       	dec	r0
    28ea:	e2 f7       	brpl	.-8      	; 0x28e4 <DIO_u8ControlPullUp+0x1ae>
    28ec:	84 2b       	or	r24, r20
    28ee:	8c 93       	st	X, r24
    28f0:	ad c0       	rjmp	.+346    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupC:
						Set_Bit(DIO_PORTC,Local_PinNumber);
    28f2:	a5 e3       	ldi	r26, 0x35	; 53
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	e5 e3       	ldi	r30, 0x35	; 53
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	48 2f       	mov	r20, r24
    28fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2900:	28 2f       	mov	r18, r24
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	02 2e       	mov	r0, r18
    290a:	02 c0       	rjmp	.+4      	; 0x2910 <DIO_u8ControlPullUp+0x1da>
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	0a 94       	dec	r0
    2912:	e2 f7       	brpl	.-8      	; 0x290c <DIO_u8ControlPullUp+0x1d6>
    2914:	84 2b       	or	r24, r20
    2916:	8c 93       	st	X, r24
    2918:	99 c0       	rjmp	.+306    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupD:
						Set_Bit(DIO_PORTD,Local_PinNumber);
    291a:	a2 e3       	ldi	r26, 0x32	; 50
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e2 e3       	ldi	r30, 0x32	; 50
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	48 2f       	mov	r20, r24
    2926:	8c 81       	ldd	r24, Y+4	; 0x04
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	02 2e       	mov	r0, r18
    2932:	02 c0       	rjmp	.+4      	; 0x2938 <DIO_u8ControlPullUp+0x202>
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	0a 94       	dec	r0
    293a:	e2 f7       	brpl	.-8      	; 0x2934 <DIO_u8ControlPullUp+0x1fe>
    293c:	84 2b       	or	r24, r20
    293e:	8c 93       	st	X, r24
    2940:	85 c0       	rjmp	.+266    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					}
				}
				else if(Local_PullUpState == Dis){
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	88 23       	and	r24, r24
    2946:	09 f0       	breq	.+2      	; 0x294a <DIO_u8ControlPullUp+0x214>
    2948:	76 c0       	rjmp	.+236    	; 0x2a36 <DIO_u8ControlPullUp+0x300>
					Request = RequestHandled;
    294a:	19 82       	std	Y+1, r1	; 0x01
					switch(Local_GroupName){
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	3f 83       	std	Y+7, r19	; 0x07
    2954:	2e 83       	std	Y+6, r18	; 0x06
    2956:	8e 81       	ldd	r24, Y+6	; 0x06
    2958:	9f 81       	ldd	r25, Y+7	; 0x07
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	91 05       	cpc	r25, r1
    295e:	61 f1       	breq	.+88     	; 0x29b8 <DIO_u8ControlPullUp+0x282>
    2960:	2e 81       	ldd	r18, Y+6	; 0x06
    2962:	3f 81       	ldd	r19, Y+7	; 0x07
    2964:	23 30       	cpi	r18, 0x03	; 3
    2966:	31 05       	cpc	r19, r1
    2968:	34 f4       	brge	.+12     	; 0x2976 <DIO_u8ControlPullUp+0x240>
    296a:	8e 81       	ldd	r24, Y+6	; 0x06
    296c:	9f 81       	ldd	r25, Y+7	; 0x07
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	91 05       	cpc	r25, r1
    2972:	69 f0       	breq	.+26     	; 0x298e <DIO_u8ControlPullUp+0x258>
    2974:	6b c0       	rjmp	.+214    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
    2976:	2e 81       	ldd	r18, Y+6	; 0x06
    2978:	3f 81       	ldd	r19, Y+7	; 0x07
    297a:	23 30       	cpi	r18, 0x03	; 3
    297c:	31 05       	cpc	r19, r1
    297e:	89 f1       	breq	.+98     	; 0x29e2 <DIO_u8ControlPullUp+0x2ac>
    2980:	8e 81       	ldd	r24, Y+6	; 0x06
    2982:	9f 81       	ldd	r25, Y+7	; 0x07
    2984:	84 30       	cpi	r24, 0x04	; 4
    2986:	91 05       	cpc	r25, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <DIO_u8ControlPullUp+0x256>
    298a:	40 c0       	rjmp	.+128    	; 0x2a0c <DIO_u8ControlPullUp+0x2d6>
    298c:	5f c0       	rjmp	.+190    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
					case DIO_GroupA:
						Clear_Bit(DIO_PORTA,Local_PinNumber);
    298e:	ab e3       	ldi	r26, 0x3B	; 59
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	eb e3       	ldi	r30, 0x3B	; 59
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	48 2f       	mov	r20, r24
    299a:	8c 81       	ldd	r24, Y+4	; 0x04
    299c:	28 2f       	mov	r18, r24
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	02 2e       	mov	r0, r18
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <DIO_u8ControlPullUp+0x276>
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	0a 94       	dec	r0
    29ae:	e2 f7       	brpl	.-8      	; 0x29a8 <DIO_u8ControlPullUp+0x272>
    29b0:	80 95       	com	r24
    29b2:	84 23       	and	r24, r20
    29b4:	8c 93       	st	X, r24
    29b6:	4a c0       	rjmp	.+148    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupB:
						Clear_Bit(DIO_PORTB,Local_PinNumber);
    29b8:	a8 e3       	ldi	r26, 0x38	; 56
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	e8 e3       	ldi	r30, 0x38	; 56
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	48 2f       	mov	r20, r24
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	02 2e       	mov	r0, r18
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <DIO_u8ControlPullUp+0x2a0>
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	0a 94       	dec	r0
    29d8:	e2 f7       	brpl	.-8      	; 0x29d2 <DIO_u8ControlPullUp+0x29c>
    29da:	80 95       	com	r24
    29dc:	84 23       	and	r24, r20
    29de:	8c 93       	st	X, r24
    29e0:	35 c0       	rjmp	.+106    	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupC:
						Clear_Bit(DIO_PORTC,Local_PinNumber);
    29e2:	a5 e3       	ldi	r26, 0x35	; 53
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	e5 e3       	ldi	r30, 0x35	; 53
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	48 2f       	mov	r20, r24
    29ee:	8c 81       	ldd	r24, Y+4	; 0x04
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	02 2e       	mov	r0, r18
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <DIO_u8ControlPullUp+0x2ca>
    29fc:	88 0f       	add	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	0a 94       	dec	r0
    2a02:	e2 f7       	brpl	.-8      	; 0x29fc <DIO_u8ControlPullUp+0x2c6>
    2a04:	80 95       	com	r24
    2a06:	84 23       	and	r24, r20
    2a08:	8c 93       	st	X, r24
    2a0a:	20 c0       	rjmp	.+64     	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					case DIO_GroupD:
						Clear_Bit(DIO_PORTD,Local_PinNumber);
    2a0c:	a2 e3       	ldi	r26, 0x32	; 50
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e2 e3       	ldi	r30, 0x32	; 50
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	48 2f       	mov	r20, r24
    2a18:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	02 2e       	mov	r0, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <DIO_u8ControlPullUp+0x2f4>
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	0a 94       	dec	r0
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <DIO_u8ControlPullUp+0x2f0>
    2a2e:	80 95       	com	r24
    2a30:	84 23       	and	r24, r20
    2a32:	8c 93       	st	X, r24
    2a34:	0b c0       	rjmp	.+22     	; 0x2a4c <DIO_u8ControlPullUp+0x316>
						break;
					}
				}
				else{
					Request = RequestErrorNotValidPullUpState;
    2a36:	86 e0       	ldi	r24, 0x06	; 6
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	08 c0       	rjmp	.+16     	; 0x2a4c <DIO_u8ControlPullUp+0x316>
				}
			}
			else{
				Request = RequestErrorPinOutOfRange;
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	05 c0       	rjmp	.+10     	; 0x2a4c <DIO_u8ControlPullUp+0x316>
			}

		}
		else{
			Request = RequestErrorNotValidConnectionType;
    2a42:	85 e0       	ldi	r24, 0x05	; 5
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <DIO_u8ControlPullUp+0x316>
		}

	}
	else{
		Request = RequestErrorGroupOutOfRange;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4e:	2d 96       	adiw	r28, 0x0d	; 13
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	cf 91       	pop	r28
    2a5c:	df 91       	pop	r29
    2a5e:	08 95       	ret

00002a60 <LCD4_voidInit>:
#include "../../../MCAL/TWI/Header/TWI_Interface.h"
#include "../Header/LCD4_Interface.h"

#include "util/delay.h"

void LCD4_voidInit(){
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	cc 58       	subi	r28, 0x8C	; 140
    2a6e:	d0 40       	sbci	r29, 0x00	; 0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDir(DIO_GroupC,DIO_PIN0,Output);
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(DIO_GroupC,DIO_PIN1,Output);
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	61 e0       	ldi	r22, 0x01	; 1
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <DIO_u8SetPinDir>

	TWI_VoidMasterInit();
    2a8e:	0e 94 1e 0c 	call	0x183c	; 0x183c <TWI_VoidMasterInit>
	LCD4_voidStartCommunication();
    2a92:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <LCD4_voidStartCommunication>
    2a96:	fe 01       	movw	r30, r28
    2a98:	e7 57       	subi	r30, 0x77	; 119
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	a8 ec       	ldi	r26, 0xC8	; 200
    2aa2:	b2 e4       	ldi	r27, 0x42	; 66
    2aa4:	80 83       	st	Z, r24
    2aa6:	91 83       	std	Z+1, r25	; 0x01
    2aa8:	a2 83       	std	Z+2, r26	; 0x02
    2aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aac:	8e 01       	movw	r16, r28
    2aae:	0b 57       	subi	r16, 0x7B	; 123
    2ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e7 57       	subi	r30, 0x77	; 119
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	80 83       	st	Z, r24
    2ad4:	91 83       	std	Z+1, r25	; 0x01
    2ad6:	a2 83       	std	Z+2, r26	; 0x02
    2ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ada:	fe 01       	movw	r30, r28
    2adc:	eb 57       	subi	r30, 0x7B	; 123
    2ade:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae0:	60 81       	ld	r22, Z
    2ae2:	71 81       	ldd	r23, Z+1	; 0x01
    2ae4:	82 81       	ldd	r24, Z+2	; 0x02
    2ae6:	93 81       	ldd	r25, Z+3	; 0x03
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e8       	ldi	r20, 0x80	; 128
    2aee:	5f e3       	ldi	r21, 0x3F	; 63
    2af0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af4:	88 23       	and	r24, r24
    2af6:	44 f4       	brge	.+16     	; 0x2b08 <LCD4_voidInit+0xa8>
		__ticks = 1;
    2af8:	fe 01       	movw	r30, r28
    2afa:	ed 57       	subi	r30, 0x7D	; 125
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    2b06:	64 c0       	rjmp	.+200    	; 0x2bd0 <LCD4_voidInit+0x170>
	else if (__tmp > 65535)
    2b08:	fe 01       	movw	r30, r28
    2b0a:	eb 57       	subi	r30, 0x7B	; 123
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	3f ef       	ldi	r19, 0xFF	; 255
    2b1a:	4f e7       	ldi	r20, 0x7F	; 127
    2b1c:	57 e4       	ldi	r21, 0x47	; 71
    2b1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b22:	18 16       	cp	r1, r24
    2b24:	0c f0       	brlt	.+2      	; 0x2b28 <LCD4_voidInit+0xc8>
    2b26:	43 c0       	rjmp	.+134    	; 0x2bae <LCD4_voidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 57       	subi	r30, 0x77	; 119
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	60 81       	ld	r22, Z
    2b30:	71 81       	ldd	r23, Z+1	; 0x01
    2b32:	82 81       	ldd	r24, Z+2	; 0x02
    2b34:	93 81       	ldd	r25, Z+3	; 0x03
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	8e 01       	movw	r16, r28
    2b48:	0d 57       	subi	r16, 0x7D	; 125
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	1f c0       	rjmp	.+62     	; 0x2b9e <LCD4_voidInit+0x13e>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 57       	subi	r30, 0x7F	; 127
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	88 ec       	ldi	r24, 0xC8	; 200
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b6e:	fe 01       	movw	r30, r28
    2b70:	ef 57       	subi	r30, 0x7F	; 127
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <LCD4_voidInit+0x118>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ef 57       	subi	r30, 0x7F	; 127
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	de 01       	movw	r26, r28
    2b88:	ad 57       	subi	r26, 0x7D	; 125
    2b8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ed 57       	subi	r30, 0x7D	; 125
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 81       	ld	r24, Z
    2b94:	91 81       	ldd	r25, Z+1	; 0x01
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	11 96       	adiw	r26, 0x01	; 1
    2b9a:	9c 93       	st	X, r25
    2b9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	ed 57       	subi	r30, 0x7D	; 125
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	d1 f6       	brne	.-76     	; 0x2b60 <LCD4_voidInit+0x100>
    2bac:	27 c0       	rjmp	.+78     	; 0x2bfc <LCD4_voidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	8e 01       	movw	r16, r28
    2bb0:	0d 57       	subi	r16, 0x7D	; 125
    2bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	eb 57       	subi	r30, 0x7B	; 123
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	60 81       	ld	r22, Z
    2bbc:	71 81       	ldd	r23, Z+1	; 0x01
    2bbe:	82 81       	ldd	r24, Z+2	; 0x02
    2bc0:	93 81       	ldd	r25, Z+3	; 0x03
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	f8 01       	movw	r30, r16
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	de 01       	movw	r26, r28
    2bd2:	a1 58       	subi	r26, 0x81	; 129
    2bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	ed 57       	subi	r30, 0x7D	; 125
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	80 81       	ld	r24, Z
    2bde:	91 81       	ldd	r25, Z+1	; 0x01
    2be0:	8d 93       	st	X+, r24
    2be2:	9c 93       	st	X, r25
    2be4:	fe 01       	movw	r30, r28
    2be6:	e1 58       	subi	r30, 0x81	; 129
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 81       	ld	r24, Z
    2bec:	91 81       	ldd	r25, Z+1	; 0x01
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD4_voidInit+0x18e>
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e1 58       	subi	r30, 0x81	; 129
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD4_voidSendInitCommands(LCD4_SpecialFunctionSet);
    2bfc:	80 e3       	ldi	r24, 0x30	; 48
    2bfe:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <LCD4_voidSendInitCommands>
    2c02:	fe 01       	movw	r30, r28
    2c04:	e5 58       	subi	r30, 0x85	; 133
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	a0 ea       	ldi	r26, 0xA0	; 160
    2c0e:	b0 e4       	ldi	r27, 0x40	; 64
    2c10:	80 83       	st	Z, r24
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	a2 83       	std	Z+2, r26	; 0x02
    2c16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	8e 01       	movw	r16, r28
    2c1a:	09 58       	subi	r16, 0x89	; 137
    2c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e5 58       	subi	r30, 0x85	; 133
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a ef       	ldi	r20, 0xFA	; 250
    2c32:	54 e4       	ldi	r21, 0x44	; 68
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	80 83       	st	Z, r24
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	a2 83       	std	Z+2, r26	; 0x02
    2c44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c46:	fe 01       	movw	r30, r28
    2c48:	e9 58       	subi	r30, 0x89	; 137
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	44 f4       	brge	.+16     	; 0x2c74 <LCD4_voidInit+0x214>
		__ticks = 1;
    2c64:	fe 01       	movw	r30, r28
    2c66:	eb 58       	subi	r30, 0x8B	; 139
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	80 83       	st	Z, r24
    2c72:	64 c0       	rjmp	.+200    	; 0x2d3c <LCD4_voidInit+0x2dc>
	else if (__tmp > 65535)
    2c74:	fe 01       	movw	r30, r28
    2c76:	e9 58       	subi	r30, 0x89	; 137
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	60 81       	ld	r22, Z
    2c7c:	71 81       	ldd	r23, Z+1	; 0x01
    2c7e:	82 81       	ldd	r24, Z+2	; 0x02
    2c80:	93 81       	ldd	r25, Z+3	; 0x03
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	0c f0       	brlt	.+2      	; 0x2c94 <LCD4_voidInit+0x234>
    2c92:	43 c0       	rjmp	.+134    	; 0x2d1a <LCD4_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c94:	fe 01       	movw	r30, r28
    2c96:	e5 58       	subi	r30, 0x85	; 133
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	0b 58       	subi	r16, 0x8B	; 139
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	91 83       	std	Z+1, r25	; 0x01
    2cc8:	80 83       	st	Z, r24
    2cca:	1f c0       	rjmp	.+62     	; 0x2d0a <LCD4_voidInit+0x2aa>
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ed 58       	subi	r30, 0x8D	; 141
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	88 ec       	ldi	r24, 0xC8	; 200
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	80 83       	st	Z, r24
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ed 58       	subi	r30, 0x8D	; 141
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	80 81       	ld	r24, Z
    2ce2:	91 81       	ldd	r25, Z+1	; 0x01
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD4_voidInit+0x284>
    2ce8:	fe 01       	movw	r30, r28
    2cea:	ed 58       	subi	r30, 0x8D	; 141
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	de 01       	movw	r26, r28
    2cf4:	ab 58       	subi	r26, 0x8B	; 139
    2cf6:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	eb 58       	subi	r30, 0x8B	; 139
    2cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfe:	80 81       	ld	r24, Z
    2d00:	91 81       	ldd	r25, Z+1	; 0x01
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	11 96       	adiw	r26, 0x01	; 1
    2d06:	9c 93       	st	X, r25
    2d08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	eb 58       	subi	r30, 0x8B	; 139
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	80 81       	ld	r24, Z
    2d12:	91 81       	ldd	r25, Z+1	; 0x01
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	d1 f6       	brne	.-76     	; 0x2ccc <LCD4_voidInit+0x26c>
    2d18:	27 c0       	rjmp	.+78     	; 0x2d68 <LCD4_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1a:	8e 01       	movw	r16, r28
    2d1c:	0b 58       	subi	r16, 0x8B	; 139
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d20:	fe 01       	movw	r30, r28
    2d22:	e9 58       	subi	r30, 0x89	; 137
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	91 83       	std	Z+1, r25	; 0x01
    2d3a:	80 83       	st	Z, r24
    2d3c:	de 01       	movw	r26, r28
    2d3e:	af 58       	subi	r26, 0x8F	; 143
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	fe 01       	movw	r30, r28
    2d44:	eb 58       	subi	r30, 0x8B	; 139
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	8d 93       	st	X+, r24
    2d4e:	9c 93       	st	X, r25
    2d50:	fe 01       	movw	r30, r28
    2d52:	ef 58       	subi	r30, 0x8F	; 143
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD4_voidInit+0x2fa>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ef 58       	subi	r30, 0x8F	; 143
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	91 83       	std	Z+1, r25	; 0x01
    2d66:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD4_voidSendInitCommands(LCD4_SpecialFunctionSet);
    2d68:	80 e3       	ldi	r24, 0x30	; 48
    2d6a:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <LCD4_voidSendInitCommands>
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e3 59       	subi	r30, 0x93	; 147
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	a0 e8       	ldi	r26, 0x80	; 128
    2d7a:	bf e3       	ldi	r27, 0x3F	; 63
    2d7c:	80 83       	st	Z, r24
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	a2 83       	std	Z+2, r26	; 0x02
    2d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	8e 01       	movw	r16, r28
    2d86:	07 59       	subi	r16, 0x97	; 151
    2d88:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	e3 59       	subi	r30, 0x93	; 147
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	60 81       	ld	r22, Z
    2d92:	71 81       	ldd	r23, Z+1	; 0x01
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	4a ef       	ldi	r20, 0xFA	; 250
    2d9e:	54 e4       	ldi	r21, 0x44	; 68
    2da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da4:	dc 01       	movw	r26, r24
    2da6:	cb 01       	movw	r24, r22
    2da8:	f8 01       	movw	r30, r16
    2daa:	80 83       	st	Z, r24
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	a2 83       	std	Z+2, r26	; 0x02
    2db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db2:	fe 01       	movw	r30, r28
    2db4:	e7 59       	subi	r30, 0x97	; 151
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e8       	ldi	r20, 0x80	; 128
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dcc:	88 23       	and	r24, r24
    2dce:	44 f4       	brge	.+16     	; 0x2de0 <LCD4_voidInit+0x380>
		__ticks = 1;
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e9 59       	subi	r30, 0x99	; 153
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	80 83       	st	Z, r24
    2dde:	64 c0       	rjmp	.+200    	; 0x2ea8 <LCD4_voidInit+0x448>
	else if (__tmp > 65535)
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 59       	subi	r30, 0x97	; 151
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	3f ef       	ldi	r19, 0xFF	; 255
    2df2:	4f e7       	ldi	r20, 0x7F	; 127
    2df4:	57 e4       	ldi	r21, 0x47	; 71
    2df6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dfa:	18 16       	cp	r1, r24
    2dfc:	0c f0       	brlt	.+2      	; 0x2e00 <LCD4_voidInit+0x3a0>
    2dfe:	43 c0       	rjmp	.+134    	; 0x2e86 <LCD4_voidInit+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e00:	fe 01       	movw	r30, r28
    2e02:	e3 59       	subi	r30, 0x93	; 147
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	60 81       	ld	r22, Z
    2e08:	71 81       	ldd	r23, Z+1	; 0x01
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	8e 01       	movw	r16, r28
    2e20:	09 59       	subi	r16, 0x99	; 153
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	1f c0       	rjmp	.+62     	; 0x2e76 <LCD4_voidInit+0x416>
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 59       	subi	r30, 0x9B	; 155
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	88 ec       	ldi	r24, 0xC8	; 200
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	fe 01       	movw	r30, r28
    2e48:	eb 59       	subi	r30, 0x9B	; 155
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <LCD4_voidInit+0x3f0>
    2e54:	fe 01       	movw	r30, r28
    2e56:	eb 59       	subi	r30, 0x9B	; 155
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	91 83       	std	Z+1, r25	; 0x01
    2e5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	de 01       	movw	r26, r28
    2e60:	a9 59       	subi	r26, 0x99	; 153
    2e62:	bf 4f       	sbci	r27, 0xFF	; 255
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 59       	subi	r30, 0x99	; 153
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	11 96       	adiw	r26, 0x01	; 1
    2e72:	9c 93       	st	X, r25
    2e74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e76:	fe 01       	movw	r30, r28
    2e78:	e9 59       	subi	r30, 0x99	; 153
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	80 81       	ld	r24, Z
    2e7e:	91 81       	ldd	r25, Z+1	; 0x01
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	d1 f6       	brne	.-76     	; 0x2e38 <LCD4_voidInit+0x3d8>
    2e84:	27 c0       	rjmp	.+78     	; 0x2ed4 <LCD4_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	8e 01       	movw	r16, r28
    2e88:	09 59       	subi	r16, 0x99	; 153
    2e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e7 59       	subi	r30, 0x97	; 151
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
    2ea8:	de 01       	movw	r26, r28
    2eaa:	ad 59       	subi	r26, 0x9D	; 157
    2eac:	bf 4f       	sbci	r27, 0xFF	; 255
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e9 59       	subi	r30, 0x99	; 153
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	80 81       	ld	r24, Z
    2eb6:	91 81       	ldd	r25, Z+1	; 0x01
    2eb8:	8d 93       	st	X+, r24
    2eba:	9c 93       	st	X, r25
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ed 59       	subi	r30, 0x9D	; 157
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	91 81       	ldd	r25, Z+1	; 0x01
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <LCD4_voidInit+0x466>
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ed 59       	subi	r30, 0x9D	; 157
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD4_voidSendInitCommands(LCD4_SpecialFunctionSet);
    2ed4:	80 e3       	ldi	r24, 0x30	; 48
    2ed6:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <LCD4_voidSendInitCommands>
    2eda:	fe 01       	movw	r30, r28
    2edc:	e1 5a       	subi	r30, 0xA1	; 161
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	a0 e8       	ldi	r26, 0x80	; 128
    2ee6:	bf e3       	ldi	r27, 0x3F	; 63
    2ee8:	80 83       	st	Z, r24
    2eea:	91 83       	std	Z+1, r25	; 0x01
    2eec:	a2 83       	std	Z+2, r26	; 0x02
    2eee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef0:	8e 01       	movw	r16, r28
    2ef2:	05 5a       	subi	r16, 0xA5	; 165
    2ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	e1 5a       	subi	r30, 0xA1	; 161
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	60 81       	ld	r22, Z
    2efe:	71 81       	ldd	r23, Z+1	; 0x01
    2f00:	82 81       	ldd	r24, Z+2	; 0x02
    2f02:	93 81       	ldd	r25, Z+3	; 0x03
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	f8 01       	movw	r30, r16
    2f16:	80 83       	st	Z, r24
    2f18:	91 83       	std	Z+1, r25	; 0x01
    2f1a:	a2 83       	std	Z+2, r26	; 0x02
    2f1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e5 5a       	subi	r30, 0xA5	; 165
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e8       	ldi	r20, 0x80	; 128
    2f32:	5f e3       	ldi	r21, 0x3F	; 63
    2f34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f38:	88 23       	and	r24, r24
    2f3a:	44 f4       	brge	.+16     	; 0x2f4c <LCD4_voidInit+0x4ec>
		__ticks = 1;
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e7 5a       	subi	r30, 0xA7	; 167
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
    2f4a:	64 c0       	rjmp	.+200    	; 0x3014 <LCD4_voidInit+0x5b4>
	else if (__tmp > 65535)
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	e5 5a       	subi	r30, 0xA5	; 165
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	60 81       	ld	r22, Z
    2f54:	71 81       	ldd	r23, Z+1	; 0x01
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	3f ef       	ldi	r19, 0xFF	; 255
    2f5e:	4f e7       	ldi	r20, 0x7F	; 127
    2f60:	57 e4       	ldi	r21, 0x47	; 71
    2f62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f66:	18 16       	cp	r1, r24
    2f68:	0c f0       	brlt	.+2      	; 0x2f6c <LCD4_voidInit+0x50c>
    2f6a:	43 c0       	rjmp	.+134    	; 0x2ff2 <LCD4_voidInit+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6c:	fe 01       	movw	r30, r28
    2f6e:	e1 5a       	subi	r30, 0xA1	; 161
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e2       	ldi	r20, 0x20	; 32
    2f80:	51 e4       	ldi	r21, 0x41	; 65
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	8e 01       	movw	r16, r28
    2f8c:	07 5a       	subi	r16, 0xA7	; 167
    2f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	f8 01       	movw	r30, r16
    2f9e:	91 83       	std	Z+1, r25	; 0x01
    2fa0:	80 83       	st	Z, r24
    2fa2:	1f c0       	rjmp	.+62     	; 0x2fe2 <LCD4_voidInit+0x582>
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	e9 5a       	subi	r30, 0xA9	; 169
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	88 ec       	ldi	r24, 0xC8	; 200
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	80 83       	st	Z, r24
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e9 5a       	subi	r30, 0xA9	; 169
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	f1 f7       	brne	.-4      	; 0x2fbc <LCD4_voidInit+0x55c>
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	e9 5a       	subi	r30, 0xA9	; 169
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fca:	de 01       	movw	r26, r28
    2fcc:	a7 5a       	subi	r26, 0xA7	; 167
    2fce:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	e7 5a       	subi	r30, 0xA7	; 167
    2fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd6:	80 81       	ld	r24, Z
    2fd8:	91 81       	ldd	r25, Z+1	; 0x01
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	11 96       	adiw	r26, 0x01	; 1
    2fde:	9c 93       	st	X, r25
    2fe0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	e7 5a       	subi	r30, 0xA7	; 167
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	d1 f6       	brne	.-76     	; 0x2fa4 <LCD4_voidInit+0x544>
    2ff0:	27 c0       	rjmp	.+78     	; 0x3040 <LCD4_voidInit+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	07 5a       	subi	r16, 0xA7	; 167
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e5 5a       	subi	r30, 0xA5	; 165
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	f8 01       	movw	r30, r16
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	de 01       	movw	r26, r28
    3016:	ab 5a       	subi	r26, 0xAB	; 171
    3018:	bf 4f       	sbci	r27, 0xFF	; 255
    301a:	fe 01       	movw	r30, r28
    301c:	e7 5a       	subi	r30, 0xA7	; 167
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	80 81       	ld	r24, Z
    3022:	91 81       	ldd	r25, Z+1	; 0x01
    3024:	8d 93       	st	X+, r24
    3026:	9c 93       	st	X, r25
    3028:	fe 01       	movw	r30, r28
    302a:	eb 5a       	subi	r30, 0xAB	; 171
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 81       	ld	r24, Z
    3030:	91 81       	ldd	r25, Z+1	; 0x01
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD4_voidInit+0x5d2>
    3036:	fe 01       	movw	r30, r28
    3038:	eb 5a       	subi	r30, 0xAB	; 171
    303a:	ff 4f       	sbci	r31, 0xFF	; 255
    303c:	91 83       	std	Z+1, r25	; 0x01
    303e:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD4_voidSendInitCommands(LCD4_4BitMode);//4-bit mode
    3040:	80 e2       	ldi	r24, 0x20	; 32
    3042:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <LCD4_voidSendInitCommands>
    3046:	fe 01       	movw	r30, r28
    3048:	ef 5a       	subi	r30, 0xAF	; 175
    304a:	ff 4f       	sbci	r31, 0xFF	; 255
    304c:	80 e0       	ldi	r24, 0x00	; 0
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	a0 e8       	ldi	r26, 0x80	; 128
    3052:	bf e3       	ldi	r27, 0x3F	; 63
    3054:	80 83       	st	Z, r24
    3056:	91 83       	std	Z+1, r25	; 0x01
    3058:	a2 83       	std	Z+2, r26	; 0x02
    305a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305c:	8e 01       	movw	r16, r28
    305e:	03 5b       	subi	r16, 0xB3	; 179
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	fe 01       	movw	r30, r28
    3064:	ef 5a       	subi	r30, 0xAF	; 175
    3066:	ff 4f       	sbci	r31, 0xFF	; 255
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a ef       	ldi	r20, 0xFA	; 250
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	f8 01       	movw	r30, r16
    3082:	80 83       	st	Z, r24
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	a2 83       	std	Z+2, r26	; 0x02
    3088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    308a:	fe 01       	movw	r30, r28
    308c:	e3 5b       	subi	r30, 0xB3	; 179
    308e:	ff 4f       	sbci	r31, 0xFF	; 255
    3090:	60 81       	ld	r22, Z
    3092:	71 81       	ldd	r23, Z+1	; 0x01
    3094:	82 81       	ldd	r24, Z+2	; 0x02
    3096:	93 81       	ldd	r25, Z+3	; 0x03
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e8       	ldi	r20, 0x80	; 128
    309e:	5f e3       	ldi	r21, 0x3F	; 63
    30a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30a4:	88 23       	and	r24, r24
    30a6:	44 f4       	brge	.+16     	; 0x30b8 <LCD4_voidInit+0x658>
		__ticks = 1;
    30a8:	fe 01       	movw	r30, r28
    30aa:	e5 5b       	subi	r30, 0xB5	; 181
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
    30b6:	64 c0       	rjmp	.+200    	; 0x3180 <LCD4_voidInit+0x720>
	else if (__tmp > 65535)
    30b8:	fe 01       	movw	r30, r28
    30ba:	e3 5b       	subi	r30, 0xB3	; 179
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	60 81       	ld	r22, Z
    30c0:	71 81       	ldd	r23, Z+1	; 0x01
    30c2:	82 81       	ldd	r24, Z+2	; 0x02
    30c4:	93 81       	ldd	r25, Z+3	; 0x03
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	3f ef       	ldi	r19, 0xFF	; 255
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	57 e4       	ldi	r21, 0x47	; 71
    30ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	0c f0       	brlt	.+2      	; 0x30d8 <LCD4_voidInit+0x678>
    30d6:	43 c0       	rjmp	.+134    	; 0x315e <LCD4_voidInit+0x6fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d8:	fe 01       	movw	r30, r28
    30da:	ef 5a       	subi	r30, 0xAF	; 175
    30dc:	ff 4f       	sbci	r31, 0xFF	; 255
    30de:	60 81       	ld	r22, Z
    30e0:	71 81       	ldd	r23, Z+1	; 0x01
    30e2:	82 81       	ldd	r24, Z+2	; 0x02
    30e4:	93 81       	ldd	r25, Z+3	; 0x03
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e2       	ldi	r20, 0x20	; 32
    30ec:	51 e4       	ldi	r21, 0x41	; 65
    30ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8e 01       	movw	r16, r28
    30f8:	05 5b       	subi	r16, 0xB5	; 181
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	f8 01       	movw	r30, r16
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
    310e:	1f c0       	rjmp	.+62     	; 0x314e <LCD4_voidInit+0x6ee>
    3110:	fe 01       	movw	r30, r28
    3112:	e7 5b       	subi	r30, 0xB7	; 183
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	88 ec       	ldi	r24, 0xC8	; 200
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
    311e:	fe 01       	movw	r30, r28
    3120:	e7 5b       	subi	r30, 0xB7	; 183
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	91 81       	ldd	r25, Z+1	; 0x01
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	f1 f7       	brne	.-4      	; 0x3128 <LCD4_voidInit+0x6c8>
    312c:	fe 01       	movw	r30, r28
    312e:	e7 5b       	subi	r30, 0xB7	; 183
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	91 83       	std	Z+1, r25	; 0x01
    3134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3136:	de 01       	movw	r26, r28
    3138:	a5 5b       	subi	r26, 0xB5	; 181
    313a:	bf 4f       	sbci	r27, 0xFF	; 255
    313c:	fe 01       	movw	r30, r28
    313e:	e5 5b       	subi	r30, 0xB5	; 181
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	11 96       	adiw	r26, 0x01	; 1
    314a:	9c 93       	st	X, r25
    314c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314e:	fe 01       	movw	r30, r28
    3150:	e5 5b       	subi	r30, 0xB5	; 181
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 81       	ld	r24, Z
    3156:	91 81       	ldd	r25, Z+1	; 0x01
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	d1 f6       	brne	.-76     	; 0x3110 <LCD4_voidInit+0x6b0>
    315c:	27 c0       	rjmp	.+78     	; 0x31ac <LCD4_voidInit+0x74c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315e:	8e 01       	movw	r16, r28
    3160:	05 5b       	subi	r16, 0xB5	; 181
    3162:	1f 4f       	sbci	r17, 0xFF	; 255
    3164:	fe 01       	movw	r30, r28
    3166:	e3 5b       	subi	r30, 0xB3	; 179
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	60 81       	ld	r22, Z
    316c:	71 81       	ldd	r23, Z+1	; 0x01
    316e:	82 81       	ldd	r24, Z+2	; 0x02
    3170:	93 81       	ldd	r25, Z+3	; 0x03
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	f8 01       	movw	r30, r16
    317c:	91 83       	std	Z+1, r25	; 0x01
    317e:	80 83       	st	Z, r24
    3180:	de 01       	movw	r26, r28
    3182:	a9 5b       	subi	r26, 0xB9	; 185
    3184:	bf 4f       	sbci	r27, 0xFF	; 255
    3186:	fe 01       	movw	r30, r28
    3188:	e5 5b       	subi	r30, 0xB5	; 181
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	8d 93       	st	X+, r24
    3192:	9c 93       	st	X, r25
    3194:	fe 01       	movw	r30, r28
    3196:	e9 5b       	subi	r30, 0xB9	; 185
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD4_voidInit+0x73e>
    31a2:	fe 01       	movw	r30, r28
    31a4:	e9 5b       	subi	r30, 0xB9	; 185
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	91 83       	std	Z+1, r25	; 0x01
    31aa:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD4_voidWriteCommand(LCD4_FunctionSet);//Function Set
    31ac:	88 e2       	ldi	r24, 0x28	; 40
    31ae:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
    31b2:	fe 01       	movw	r30, r28
    31b4:	ed 5b       	subi	r30, 0xBD	; 189
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 e8       	ldi	r26, 0x80	; 128
    31be:	bf e3       	ldi	r27, 0x3F	; 63
    31c0:	80 83       	st	Z, r24
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	a2 83       	std	Z+2, r26	; 0x02
    31c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	8e 01       	movw	r16, r28
    31ca:	01 5c       	subi	r16, 0xC1	; 193
    31cc:	1f 4f       	sbci	r17, 0xFF	; 255
    31ce:	fe 01       	movw	r30, r28
    31d0:	ed 5b       	subi	r30, 0xBD	; 189
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a ef       	ldi	r20, 0xFA	; 250
    31e2:	54 e4       	ldi	r21, 0x44	; 68
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	f8 01       	movw	r30, r16
    31ee:	80 83       	st	Z, r24
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	a2 83       	std	Z+2, r26	; 0x02
    31f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31f6:	fe 01       	movw	r30, r28
    31f8:	ff 96       	adiw	r30, 0x3f	; 63
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <LCD4_voidInit+0x7bc>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e af       	std	Y+62, r25	; 0x3e
    3218:	8d af       	std	Y+61, r24	; 0x3d
    321a:	46 c0       	rjmp	.+140    	; 0x32a8 <LCD4_voidInit+0x848>
	else if (__tmp > 65535)
    321c:	fe 01       	movw	r30, r28
    321e:	ff 96       	adiw	r30, 0x3f	; 63
    3220:	60 81       	ld	r22, Z
    3222:	71 81       	ldd	r23, Z+1	; 0x01
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	3f ef       	ldi	r19, 0xFF	; 255
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	57 e4       	ldi	r21, 0x47	; 71
    3230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	64 f5       	brge	.+88     	; 0x3290 <LCD4_voidInit+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	fe 01       	movw	r30, r28
    323a:	ed 5b       	subi	r30, 0xBD	; 189
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e2       	ldi	r20, 0x20	; 32
    324c:	51 e4       	ldi	r21, 0x41	; 65
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	9e af       	std	Y+62, r25	; 0x3e
    3264:	8d af       	std	Y+61, r24	; 0x3d
    3266:	0f c0       	rjmp	.+30     	; 0x3286 <LCD4_voidInit+0x826>
    3268:	88 ec       	ldi	r24, 0xC8	; 200
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9c af       	std	Y+60, r25	; 0x3c
    326e:	8b af       	std	Y+59, r24	; 0x3b
    3270:	8b ad       	ldd	r24, Y+59	; 0x3b
    3272:	9c ad       	ldd	r25, Y+60	; 0x3c
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD4_voidInit+0x814>
    3278:	9c af       	std	Y+60, r25	; 0x3c
    327a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327c:	8d ad       	ldd	r24, Y+61	; 0x3d
    327e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	9e af       	std	Y+62, r25	; 0x3e
    3284:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3286:	8d ad       	ldd	r24, Y+61	; 0x3d
    3288:	9e ad       	ldd	r25, Y+62	; 0x3e
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	69 f7       	brne	.-38     	; 0x3268 <LCD4_voidInit+0x808>
    328e:	16 c0       	rjmp	.+44     	; 0x32bc <LCD4_voidInit+0x85c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3290:	fe 01       	movw	r30, r28
    3292:	ff 96       	adiw	r30, 0x3f	; 63
    3294:	60 81       	ld	r22, Z
    3296:	71 81       	ldd	r23, Z+1	; 0x01
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	93 81       	ldd	r25, Z+3	; 0x03
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	9e af       	std	Y+62, r25	; 0x3e
    32a6:	8d af       	std	Y+61, r24	; 0x3d
    32a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    32ac:	9a af       	std	Y+58, r25	; 0x3a
    32ae:	89 af       	std	Y+57, r24	; 0x39
    32b0:	89 ad       	ldd	r24, Y+57	; 0x39
    32b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <LCD4_voidInit+0x854>
    32b8:	9a af       	std	Y+58, r25	; 0x3a
    32ba:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD4_voidWriteCommand(LCD4_DisplayOFF);//Display ON/OFF
    32bc:	88 e0       	ldi	r24, 0x08	; 8
    32be:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a0 e8       	ldi	r26, 0x80	; 128
    32c8:	bf e3       	ldi	r27, 0x3F	; 63
    32ca:	8d ab       	std	Y+53, r24	; 0x35
    32cc:	9e ab       	std	Y+54, r25	; 0x36
    32ce:	af ab       	std	Y+55, r26	; 0x37
    32d0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d2:	6d a9       	ldd	r22, Y+53	; 0x35
    32d4:	7e a9       	ldd	r23, Y+54	; 0x36
    32d6:	8f a9       	ldd	r24, Y+55	; 0x37
    32d8:	98 ad       	ldd	r25, Y+56	; 0x38
    32da:	20 e0       	ldi	r18, 0x00	; 0
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	4a ef       	ldi	r20, 0xFA	; 250
    32e0:	54 e4       	ldi	r21, 0x44	; 68
    32e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e6:	dc 01       	movw	r26, r24
    32e8:	cb 01       	movw	r24, r22
    32ea:	89 ab       	std	Y+49, r24	; 0x31
    32ec:	9a ab       	std	Y+50, r25	; 0x32
    32ee:	ab ab       	std	Y+51, r26	; 0x33
    32f0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32f2:	69 a9       	ldd	r22, Y+49	; 0x31
    32f4:	7a a9       	ldd	r23, Y+50	; 0x32
    32f6:	8b a9       	ldd	r24, Y+51	; 0x33
    32f8:	9c a9       	ldd	r25, Y+52	; 0x34
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e8       	ldi	r20, 0x80	; 128
    3300:	5f e3       	ldi	r21, 0x3F	; 63
    3302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3306:	88 23       	and	r24, r24
    3308:	2c f4       	brge	.+10     	; 0x3314 <LCD4_voidInit+0x8b4>
		__ticks = 1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	98 ab       	std	Y+48, r25	; 0x30
    3310:	8f a7       	std	Y+47, r24	; 0x2f
    3312:	3f c0       	rjmp	.+126    	; 0x3392 <LCD4_voidInit+0x932>
	else if (__tmp > 65535)
    3314:	69 a9       	ldd	r22, Y+49	; 0x31
    3316:	7a a9       	ldd	r23, Y+50	; 0x32
    3318:	8b a9       	ldd	r24, Y+51	; 0x33
    331a:	9c a9       	ldd	r25, Y+52	; 0x34
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	3f ef       	ldi	r19, 0xFF	; 255
    3320:	4f e7       	ldi	r20, 0x7F	; 127
    3322:	57 e4       	ldi	r21, 0x47	; 71
    3324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3328:	18 16       	cp	r1, r24
    332a:	4c f5       	brge	.+82     	; 0x337e <LCD4_voidInit+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332c:	6d a9       	ldd	r22, Y+53	; 0x35
    332e:	7e a9       	ldd	r23, Y+54	; 0x36
    3330:	8f a9       	ldd	r24, Y+55	; 0x37
    3332:	98 ad       	ldd	r25, Y+56	; 0x38
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	40 e2       	ldi	r20, 0x20	; 32
    333a:	51 e4       	ldi	r21, 0x41	; 65
    333c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	98 ab       	std	Y+48, r25	; 0x30
    3352:	8f a7       	std	Y+47, r24	; 0x2f
    3354:	0f c0       	rjmp	.+30     	; 0x3374 <LCD4_voidInit+0x914>
    3356:	88 ec       	ldi	r24, 0xC8	; 200
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	9e a7       	std	Y+46, r25	; 0x2e
    335c:	8d a7       	std	Y+45, r24	; 0x2d
    335e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3360:	9e a5       	ldd	r25, Y+46	; 0x2e
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <LCD4_voidInit+0x902>
    3366:	9e a7       	std	Y+46, r25	; 0x2e
    3368:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    336a:	8f a5       	ldd	r24, Y+47	; 0x2f
    336c:	98 a9       	ldd	r25, Y+48	; 0x30
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	98 ab       	std	Y+48, r25	; 0x30
    3372:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3374:	8f a5       	ldd	r24, Y+47	; 0x2f
    3376:	98 a9       	ldd	r25, Y+48	; 0x30
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	69 f7       	brne	.-38     	; 0x3356 <LCD4_voidInit+0x8f6>
    337c:	14 c0       	rjmp	.+40     	; 0x33a6 <LCD4_voidInit+0x946>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337e:	69 a9       	ldd	r22, Y+49	; 0x31
    3380:	7a a9       	ldd	r23, Y+50	; 0x32
    3382:	8b a9       	ldd	r24, Y+51	; 0x33
    3384:	9c a9       	ldd	r25, Y+52	; 0x34
    3386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	98 ab       	std	Y+48, r25	; 0x30
    3390:	8f a7       	std	Y+47, r24	; 0x2f
    3392:	8f a5       	ldd	r24, Y+47	; 0x2f
    3394:	98 a9       	ldd	r25, Y+48	; 0x30
    3396:	9c a7       	std	Y+44, r25	; 0x2c
    3398:	8b a7       	std	Y+43, r24	; 0x2b
    339a:	8b a5       	ldd	r24, Y+43	; 0x2b
    339c:	9c a5       	ldd	r25, Y+44	; 0x2c
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <LCD4_voidInit+0x93e>
    33a2:	9c a7       	std	Y+44, r25	; 0x2c
    33a4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD4_voidWriteCommand(LCD4_ClearDisplay);//Clear Display
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
    33ac:	80 e0       	ldi	r24, 0x00	; 0
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	a0 ea       	ldi	r26, 0xA0	; 160
    33b2:	b0 e4       	ldi	r27, 0x40	; 64
    33b4:	8f a3       	std	Y+39, r24	; 0x27
    33b6:	98 a7       	std	Y+40, r25	; 0x28
    33b8:	a9 a7       	std	Y+41, r26	; 0x29
    33ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33bc:	6f a1       	ldd	r22, Y+39	; 0x27
    33be:	78 a5       	ldd	r23, Y+40	; 0x28
    33c0:	89 a5       	ldd	r24, Y+41	; 0x29
    33c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	4a ef       	ldi	r20, 0xFA	; 250
    33ca:	54 e4       	ldi	r21, 0x44	; 68
    33cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	8b a3       	std	Y+35, r24	; 0x23
    33d6:	9c a3       	std	Y+36, r25	; 0x24
    33d8:	ad a3       	std	Y+37, r26	; 0x25
    33da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33dc:	6b a1       	ldd	r22, Y+35	; 0x23
    33de:	7c a1       	ldd	r23, Y+36	; 0x24
    33e0:	8d a1       	ldd	r24, Y+37	; 0x25
    33e2:	9e a1       	ldd	r25, Y+38	; 0x26
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e8       	ldi	r20, 0x80	; 128
    33ea:	5f e3       	ldi	r21, 0x3F	; 63
    33ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33f0:	88 23       	and	r24, r24
    33f2:	2c f4       	brge	.+10     	; 0x33fe <LCD4_voidInit+0x99e>
		__ticks = 1;
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9a a3       	std	Y+34, r25	; 0x22
    33fa:	89 a3       	std	Y+33, r24	; 0x21
    33fc:	3f c0       	rjmp	.+126    	; 0x347c <LCD4_voidInit+0xa1c>
	else if (__tmp > 65535)
    33fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3400:	7c a1       	ldd	r23, Y+36	; 0x24
    3402:	8d a1       	ldd	r24, Y+37	; 0x25
    3404:	9e a1       	ldd	r25, Y+38	; 0x26
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	3f ef       	ldi	r19, 0xFF	; 255
    340a:	4f e7       	ldi	r20, 0x7F	; 127
    340c:	57 e4       	ldi	r21, 0x47	; 71
    340e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3412:	18 16       	cp	r1, r24
    3414:	4c f5       	brge	.+82     	; 0x3468 <LCD4_voidInit+0xa08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3416:	6f a1       	ldd	r22, Y+39	; 0x27
    3418:	78 a5       	ldd	r23, Y+40	; 0x28
    341a:	89 a5       	ldd	r24, Y+41	; 0x29
    341c:	9a a5       	ldd	r25, Y+42	; 0x2a
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e2       	ldi	r20, 0x20	; 32
    3424:	51 e4       	ldi	r21, 0x41	; 65
    3426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9a a3       	std	Y+34, r25	; 0x22
    343c:	89 a3       	std	Y+33, r24	; 0x21
    343e:	0f c0       	rjmp	.+30     	; 0x345e <LCD4_voidInit+0x9fe>
    3440:	88 ec       	ldi	r24, 0xC8	; 200
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	98 a3       	std	Y+32, r25	; 0x20
    3446:	8f 8f       	std	Y+31, r24	; 0x1f
    3448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    344a:	98 a1       	ldd	r25, Y+32	; 0x20
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <LCD4_voidInit+0x9ec>
    3450:	98 a3       	std	Y+32, r25	; 0x20
    3452:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3454:	89 a1       	ldd	r24, Y+33	; 0x21
    3456:	9a a1       	ldd	r25, Y+34	; 0x22
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	9a a3       	std	Y+34, r25	; 0x22
    345c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	89 a1       	ldd	r24, Y+33	; 0x21
    3460:	9a a1       	ldd	r25, Y+34	; 0x22
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	69 f7       	brne	.-38     	; 0x3440 <LCD4_voidInit+0x9e0>
    3466:	14 c0       	rjmp	.+40     	; 0x3490 <LCD4_voidInit+0xa30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3468:	6b a1       	ldd	r22, Y+35	; 0x23
    346a:	7c a1       	ldd	r23, Y+36	; 0x24
    346c:	8d a1       	ldd	r24, Y+37	; 0x25
    346e:	9e a1       	ldd	r25, Y+38	; 0x26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9a a3       	std	Y+34, r25	; 0x22
    347a:	89 a3       	std	Y+33, r24	; 0x21
    347c:	89 a1       	ldd	r24, Y+33	; 0x21
    347e:	9a a1       	ldd	r25, Y+34	; 0x22
    3480:	9e 8f       	std	Y+30, r25	; 0x1e
    3482:	8d 8f       	std	Y+29, r24	; 0x1d
    3484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	f1 f7       	brne	.-4      	; 0x3488 <LCD4_voidInit+0xa28>
    348c:	9e 8f       	std	Y+30, r25	; 0x1e
    348e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD4_voidWriteCommand(LCD4_EntryMode);//Entry Mode Set
    3490:	86 e0       	ldi	r24, 0x06	; 6
    3492:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a0 e8       	ldi	r26, 0x80	; 128
    349c:	bf e3       	ldi	r27, 0x3F	; 63
    349e:	89 8f       	std	Y+25, r24	; 0x19
    34a0:	9a 8f       	std	Y+26, r25	; 0x1a
    34a2:	ab 8f       	std	Y+27, r26	; 0x1b
    34a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a6:	69 8d       	ldd	r22, Y+25	; 0x19
    34a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	4a ef       	ldi	r20, 0xFA	; 250
    34b4:	54 e4       	ldi	r21, 0x44	; 68
    34b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	8d 8b       	std	Y+21, r24	; 0x15
    34c0:	9e 8b       	std	Y+22, r25	; 0x16
    34c2:	af 8b       	std	Y+23, r26	; 0x17
    34c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34c6:	6d 89       	ldd	r22, Y+21	; 0x15
    34c8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e8       	ldi	r20, 0x80	; 128
    34d4:	5f e3       	ldi	r21, 0x3F	; 63
    34d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34da:	88 23       	and	r24, r24
    34dc:	2c f4       	brge	.+10     	; 0x34e8 <LCD4_voidInit+0xa88>
		__ticks = 1;
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	9c 8b       	std	Y+20, r25	; 0x14
    34e4:	8b 8b       	std	Y+19, r24	; 0x13
    34e6:	3f c0       	rjmp	.+126    	; 0x3566 <LCD4_voidInit+0xb06>
	else if (__tmp > 65535)
    34e8:	6d 89       	ldd	r22, Y+21	; 0x15
    34ea:	7e 89       	ldd	r23, Y+22	; 0x16
    34ec:	8f 89       	ldd	r24, Y+23	; 0x17
    34ee:	98 8d       	ldd	r25, Y+24	; 0x18
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	3f ef       	ldi	r19, 0xFF	; 255
    34f4:	4f e7       	ldi	r20, 0x7F	; 127
    34f6:	57 e4       	ldi	r21, 0x47	; 71
    34f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34fc:	18 16       	cp	r1, r24
    34fe:	4c f5       	brge	.+82     	; 0x3552 <LCD4_voidInit+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3500:	69 8d       	ldd	r22, Y+25	; 0x19
    3502:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3504:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3506:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	30 e0       	ldi	r19, 0x00	; 0
    350c:	40 e2       	ldi	r20, 0x20	; 32
    350e:	51 e4       	ldi	r21, 0x41	; 65
    3510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	9c 8b       	std	Y+20, r25	; 0x14
    3526:	8b 8b       	std	Y+19, r24	; 0x13
    3528:	0f c0       	rjmp	.+30     	; 0x3548 <LCD4_voidInit+0xae8>
    352a:	88 ec       	ldi	r24, 0xC8	; 200
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	9a 8b       	std	Y+18, r25	; 0x12
    3530:	89 8b       	std	Y+17, r24	; 0x11
    3532:	89 89       	ldd	r24, Y+17	; 0x11
    3534:	9a 89       	ldd	r25, Y+18	; 0x12
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <LCD4_voidInit+0xad6>
    353a:	9a 8b       	std	Y+18, r25	; 0x12
    353c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353e:	8b 89       	ldd	r24, Y+19	; 0x13
    3540:	9c 89       	ldd	r25, Y+20	; 0x14
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	9c 8b       	std	Y+20, r25	; 0x14
    3546:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3548:	8b 89       	ldd	r24, Y+19	; 0x13
    354a:	9c 89       	ldd	r25, Y+20	; 0x14
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	69 f7       	brne	.-38     	; 0x352a <LCD4_voidInit+0xaca>
    3550:	14 c0       	rjmp	.+40     	; 0x357a <LCD4_voidInit+0xb1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3552:	6d 89       	ldd	r22, Y+21	; 0x15
    3554:	7e 89       	ldd	r23, Y+22	; 0x16
    3556:	8f 89       	ldd	r24, Y+23	; 0x17
    3558:	98 8d       	ldd	r25, Y+24	; 0x18
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	9c 8b       	std	Y+20, r25	; 0x14
    3564:	8b 8b       	std	Y+19, r24	; 0x13
    3566:	8b 89       	ldd	r24, Y+19	; 0x13
    3568:	9c 89       	ldd	r25, Y+20	; 0x14
    356a:	98 8b       	std	Y+16, r25	; 0x10
    356c:	8f 87       	std	Y+15, r24	; 0x0f
    356e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3570:	98 89       	ldd	r25, Y+16	; 0x10
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <LCD4_voidInit+0xb12>
    3576:	98 8b       	std	Y+16, r25	; 0x10
    3578:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD4_voidWriteCommand(LCD4_DisplayON);//Turn Display ON
    357a:	8c e0       	ldi	r24, 0x0C	; 12
    357c:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	a0 e8       	ldi	r26, 0x80	; 128
    3586:	bf e3       	ldi	r27, 0x3F	; 63
    3588:	8b 87       	std	Y+11, r24	; 0x0b
    358a:	9c 87       	std	Y+12, r25	; 0x0c
    358c:	ad 87       	std	Y+13, r26	; 0x0d
    358e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3590:	6b 85       	ldd	r22, Y+11	; 0x0b
    3592:	7c 85       	ldd	r23, Y+12	; 0x0c
    3594:	8d 85       	ldd	r24, Y+13	; 0x0d
    3596:	9e 85       	ldd	r25, Y+14	; 0x0e
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	4a ef       	ldi	r20, 0xFA	; 250
    359e:	54 e4       	ldi	r21, 0x44	; 68
    35a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	8f 83       	std	Y+7, r24	; 0x07
    35aa:	98 87       	std	Y+8, r25	; 0x08
    35ac:	a9 87       	std	Y+9, r26	; 0x09
    35ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 e8       	ldi	r20, 0x80	; 128
    35be:	5f e3       	ldi	r21, 0x3F	; 63
    35c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35c4:	88 23       	and	r24, r24
    35c6:	2c f4       	brge	.+10     	; 0x35d2 <LCD4_voidInit+0xb72>
		__ticks = 1;
    35c8:	81 e0       	ldi	r24, 0x01	; 1
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9e 83       	std	Y+6, r25	; 0x06
    35ce:	8d 83       	std	Y+5, r24	; 0x05
    35d0:	3f c0       	rjmp	.+126    	; 0x3650 <LCD4_voidInit+0xbf0>
	else if (__tmp > 65535)
    35d2:	6f 81       	ldd	r22, Y+7	; 0x07
    35d4:	78 85       	ldd	r23, Y+8	; 0x08
    35d6:	89 85       	ldd	r24, Y+9	; 0x09
    35d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	3f ef       	ldi	r19, 0xFF	; 255
    35de:	4f e7       	ldi	r20, 0x7F	; 127
    35e0:	57 e4       	ldi	r21, 0x47	; 71
    35e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35e6:	18 16       	cp	r1, r24
    35e8:	4c f5       	brge	.+82     	; 0x363c <LCD4_voidInit+0xbdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	40 e2       	ldi	r20, 0x20	; 32
    35f8:	51 e4       	ldi	r21, 0x41	; 65
    35fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fe:	dc 01       	movw	r26, r24
    3600:	cb 01       	movw	r24, r22
    3602:	bc 01       	movw	r22, r24
    3604:	cd 01       	movw	r24, r26
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	9e 83       	std	Y+6, r25	; 0x06
    3610:	8d 83       	std	Y+5, r24	; 0x05
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <LCD4_voidInit+0xbd2>
    3614:	88 ec       	ldi	r24, 0xC8	; 200
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
    361c:	8b 81       	ldd	r24, Y+3	; 0x03
    361e:	9c 81       	ldd	r25, Y+4	; 0x04
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <LCD4_voidInit+0xbc0>
    3624:	9c 83       	std	Y+4, r25	; 0x04
    3626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	01 97       	sbiw	r24, 0x01	; 1
    362e:	9e 83       	std	Y+6, r25	; 0x06
    3630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	00 97       	sbiw	r24, 0x00	; 0
    3638:	69 f7       	brne	.-38     	; 0x3614 <LCD4_voidInit+0xbb4>
    363a:	14 c0       	rjmp	.+40     	; 0x3664 <LCD4_voidInit+0xc04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363c:	6f 81       	ldd	r22, Y+7	; 0x07
    363e:	78 85       	ldd	r23, Y+8	; 0x08
    3640:	89 85       	ldd	r24, Y+9	; 0x09
    3642:	9a 85       	ldd	r25, Y+10	; 0x0a
    3644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3648:	dc 01       	movw	r26, r24
    364a:	cb 01       	movw	r24, r22
    364c:	9e 83       	std	Y+6, r25	; 0x06
    364e:	8d 83       	std	Y+5, r24	; 0x05
    3650:	8d 81       	ldd	r24, Y+5	; 0x05
    3652:	9e 81       	ldd	r25, Y+6	; 0x06
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	9a 81       	ldd	r25, Y+2	; 0x02
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <LCD4_voidInit+0xbfc>
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3664:	c4 57       	subi	r28, 0x74	; 116
    3666:	df 4f       	sbci	r29, 0xFF	; 255
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	f8 94       	cli
    366c:	de bf       	out	0x3e, r29	; 62
    366e:	0f be       	out	0x3f, r0	; 63
    3670:	cd bf       	out	0x3d, r28	; 61
    3672:	cf 91       	pop	r28
    3674:	df 91       	pop	r29
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	08 95       	ret

0000367c <LCD4_voidWriteCommand>:


void LCD4_voidWriteCommand(u8 Local_Command){
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	6e 97       	sbiw	r28, 0x1e	; 30
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 data = 0x00; //RS = 0 , RW = 0
    3692:	1d 8e       	std	Y+29, r1	; 0x1d
	data |= (1<<LCD4_Backlight) | (Local_Command & 0xF0); //Send the upper 4 bits
    3694:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3696:	80 7f       	andi	r24, 0xF0	; 240
    3698:	98 2f       	mov	r25, r24
    369a:	98 60       	ori	r25, 0x08	; 8
    369c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    369e:	89 2b       	or	r24, r25
    36a0:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(data,LCD4_EN);
    36a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36a4:	84 60       	ori	r24, 0x04	; 4
    36a6:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    36a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36aa:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
	Clear_Bit(data,LCD4_EN); //EN = 0
    36ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b0:	8b 7f       	andi	r24, 0xFB	; 251
    36b2:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    36b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36b6:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a0 ea       	ldi	r26, 0xA0	; 160
    36c0:	b0 e4       	ldi	r27, 0x40	; 64
    36c2:	89 8f       	std	Y+25, r24	; 0x19
    36c4:	9a 8f       	std	Y+26, r25	; 0x1a
    36c6:	ab 8f       	std	Y+27, r26	; 0x1b
    36c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ca:	69 8d       	ldd	r22, Y+25	; 0x19
    36cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a ef       	ldi	r20, 0xFA	; 250
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8d 8b       	std	Y+21, r24	; 0x15
    36e4:	9e 8b       	std	Y+22, r25	; 0x16
    36e6:	af 8b       	std	Y+23, r26	; 0x17
    36e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36ea:	6d 89       	ldd	r22, Y+21	; 0x15
    36ec:	7e 89       	ldd	r23, Y+22	; 0x16
    36ee:	8f 89       	ldd	r24, Y+23	; 0x17
    36f0:	98 8d       	ldd	r25, Y+24	; 0x18
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <LCD4_voidWriteCommand+0x90>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9c 8b       	std	Y+20, r25	; 0x14
    3708:	8b 8b       	std	Y+19, r24	; 0x13
    370a:	3f c0       	rjmp	.+126    	; 0x378a <LCD4_voidWriteCommand+0x10e>
	else if (__tmp > 65535)
    370c:	6d 89       	ldd	r22, Y+21	; 0x15
    370e:	7e 89       	ldd	r23, Y+22	; 0x16
    3710:	8f 89       	ldd	r24, Y+23	; 0x17
    3712:	98 8d       	ldd	r25, Y+24	; 0x18
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	4c f5       	brge	.+82     	; 0x3776 <LCD4_voidWriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	69 8d       	ldd	r22, Y+25	; 0x19
    3726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e2       	ldi	r20, 0x20	; 32
    3732:	51 e4       	ldi	r21, 0x41	; 65
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9c 8b       	std	Y+20, r25	; 0x14
    374a:	8b 8b       	std	Y+19, r24	; 0x13
    374c:	0f c0       	rjmp	.+30     	; 0x376c <LCD4_voidWriteCommand+0xf0>
    374e:	88 ec       	ldi	r24, 0xC8	; 200
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9a 8b       	std	Y+18, r25	; 0x12
    3754:	89 8b       	std	Y+17, r24	; 0x11
    3756:	89 89       	ldd	r24, Y+17	; 0x11
    3758:	9a 89       	ldd	r25, Y+18	; 0x12
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <LCD4_voidWriteCommand+0xde>
    375e:	9a 8b       	std	Y+18, r25	; 0x12
    3760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	9c 8b       	std	Y+20, r25	; 0x14
    376a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376c:	8b 89       	ldd	r24, Y+19	; 0x13
    376e:	9c 89       	ldd	r25, Y+20	; 0x14
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	69 f7       	brne	.-38     	; 0x374e <LCD4_voidWriteCommand+0xd2>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <LCD4_voidWriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3776:	6d 89       	ldd	r22, Y+21	; 0x15
    3778:	7e 89       	ldd	r23, Y+22	; 0x16
    377a:	8f 89       	ldd	r24, Y+23	; 0x17
    377c:	98 8d       	ldd	r25, Y+24	; 0x18
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9c 8b       	std	Y+20, r25	; 0x14
    3788:	8b 8b       	std	Y+19, r24	; 0x13
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	9c 89       	ldd	r25, Y+20	; 0x14
    378e:	98 8b       	std	Y+16, r25	; 0x10
    3790:	8f 87       	std	Y+15, r24	; 0x0f
    3792:	8f 85       	ldd	r24, Y+15	; 0x0f
    3794:	98 89       	ldd	r25, Y+16	; 0x10
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <LCD4_voidWriteCommand+0x11a>
    379a:	98 8b       	std	Y+16, r25	; 0x10
    379c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(5);

	data = 0x00;//RS = 0 , RW = 0
    379e:	1d 8e       	std	Y+29, r1	; 0x1d
	data |= (1<<LCD4_Backlight) | ((Local_Command & 0x0F) << LCD4_Data1); //Send the Lower 4 bits
    37a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37a2:	88 2f       	mov	r24, r24
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	82 95       	swap	r24
    37a8:	92 95       	swap	r25
    37aa:	90 7f       	andi	r25, 0xF0	; 240
    37ac:	98 27       	eor	r25, r24
    37ae:	80 7f       	andi	r24, 0xF0	; 240
    37b0:	98 27       	eor	r25, r24
    37b2:	98 2f       	mov	r25, r24
    37b4:	98 60       	ori	r25, 0x08	; 8
    37b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37b8:	89 2b       	or	r24, r25
    37ba:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(data,LCD4_EN); //EN = 1
    37bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37be:	84 60       	ori	r24, 0x04	; 4
    37c0:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    37c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37c4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
	Clear_Bit(data,LCD4_EN); //EN = 0
    37c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37ca:	8b 7f       	andi	r24, 0xFB	; 251
    37cc:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    37ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37d0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	a0 ea       	ldi	r26, 0xA0	; 160
    37da:	b0 e4       	ldi	r27, 0x40	; 64
    37dc:	8b 87       	std	Y+11, r24	; 0x0b
    37de:	9c 87       	std	Y+12, r25	; 0x0c
    37e0:	ad 87       	std	Y+13, r26	; 0x0d
    37e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	4a ef       	ldi	r20, 0xFA	; 250
    37f2:	54 e4       	ldi	r21, 0x44	; 68
    37f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f8:	dc 01       	movw	r26, r24
    37fa:	cb 01       	movw	r24, r22
    37fc:	8f 83       	std	Y+7, r24	; 0x07
    37fe:	98 87       	std	Y+8, r25	; 0x08
    3800:	a9 87       	std	Y+9, r26	; 0x09
    3802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3804:	6f 81       	ldd	r22, Y+7	; 0x07
    3806:	78 85       	ldd	r23, Y+8	; 0x08
    3808:	89 85       	ldd	r24, Y+9	; 0x09
    380a:	9a 85       	ldd	r25, Y+10	; 0x0a
    380c:	20 e0       	ldi	r18, 0x00	; 0
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	40 e8       	ldi	r20, 0x80	; 128
    3812:	5f e3       	ldi	r21, 0x3F	; 63
    3814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3818:	88 23       	and	r24, r24
    381a:	2c f4       	brge	.+10     	; 0x3826 <LCD4_voidWriteCommand+0x1aa>
		__ticks = 1;
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	9e 83       	std	Y+6, r25	; 0x06
    3822:	8d 83       	std	Y+5, r24	; 0x05
    3824:	3f c0       	rjmp	.+126    	; 0x38a4 <LCD4_voidWriteCommand+0x228>
	else if (__tmp > 65535)
    3826:	6f 81       	ldd	r22, Y+7	; 0x07
    3828:	78 85       	ldd	r23, Y+8	; 0x08
    382a:	89 85       	ldd	r24, Y+9	; 0x09
    382c:	9a 85       	ldd	r25, Y+10	; 0x0a
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	3f ef       	ldi	r19, 0xFF	; 255
    3832:	4f e7       	ldi	r20, 0x7F	; 127
    3834:	57 e4       	ldi	r21, 0x47	; 71
    3836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    383a:	18 16       	cp	r1, r24
    383c:	4c f5       	brge	.+82     	; 0x3890 <LCD4_voidWriteCommand+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3840:	7c 85       	ldd	r23, Y+12	; 0x0c
    3842:	8d 85       	ldd	r24, Y+13	; 0x0d
    3844:	9e 85       	ldd	r25, Y+14	; 0x0e
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e2       	ldi	r20, 0x20	; 32
    384c:	51 e4       	ldi	r21, 0x41	; 65
    384e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3852:	dc 01       	movw	r26, r24
    3854:	cb 01       	movw	r24, r22
    3856:	bc 01       	movw	r22, r24
    3858:	cd 01       	movw	r24, r26
    385a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	9e 83       	std	Y+6, r25	; 0x06
    3864:	8d 83       	std	Y+5, r24	; 0x05
    3866:	0f c0       	rjmp	.+30     	; 0x3886 <LCD4_voidWriteCommand+0x20a>
    3868:	88 ec       	ldi	r24, 0xC8	; 200
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	9c 83       	std	Y+4, r25	; 0x04
    386e:	8b 83       	std	Y+3, r24	; 0x03
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	9c 81       	ldd	r25, Y+4	; 0x04
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	f1 f7       	brne	.-4      	; 0x3874 <LCD4_voidWriteCommand+0x1f8>
    3878:	9c 83       	std	Y+4, r25	; 0x04
    387a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    387c:	8d 81       	ldd	r24, Y+5	; 0x05
    387e:	9e 81       	ldd	r25, Y+6	; 0x06
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	9e 83       	std	Y+6, r25	; 0x06
    3884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3886:	8d 81       	ldd	r24, Y+5	; 0x05
    3888:	9e 81       	ldd	r25, Y+6	; 0x06
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	69 f7       	brne	.-38     	; 0x3868 <LCD4_voidWriteCommand+0x1ec>
    388e:	14 c0       	rjmp	.+40     	; 0x38b8 <LCD4_voidWriteCommand+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3890:	6f 81       	ldd	r22, Y+7	; 0x07
    3892:	78 85       	ldd	r23, Y+8	; 0x08
    3894:	89 85       	ldd	r24, Y+9	; 0x09
    3896:	9a 85       	ldd	r25, Y+10	; 0x0a
    3898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389c:	dc 01       	movw	r26, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	9e 81       	ldd	r25, Y+6	; 0x06
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <LCD4_voidWriteCommand+0x234>
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    38b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    38b8:	6e 96       	adiw	r28, 0x1e	; 30
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	08 95       	ret

000038ca <LCD4_voidWriteChar>:

void LCD4_voidWriteChar(u8 Local_Data){
    38ca:	df 93       	push	r29
    38cc:	cf 93       	push	r28
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	6e 97       	sbiw	r28, 0x1e	; 30
    38d4:	0f b6       	in	r0, 0x3f	; 63
    38d6:	f8 94       	cli
    38d8:	de bf       	out	0x3e, r29	; 62
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	cd bf       	out	0x3d, r28	; 61
    38de:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 data = 0x00; //RW = 0
    38e0:	1d 8e       	std	Y+29, r1	; 0x1d
	data |= (1<<LCD4_Backlight) | (1 << LCD4_RS) | (Local_Data & 0xF0) ; //Send the upper 4 bits and RS = 1
    38e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38e4:	80 7f       	andi	r24, 0xF0	; 240
    38e6:	98 2f       	mov	r25, r24
    38e8:	99 60       	ori	r25, 0x09	; 9
    38ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38ec:	89 2b       	or	r24, r25
    38ee:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(data,LCD4_EN); //EN = 1
    38f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f2:	84 60       	ori	r24, 0x04	; 4
    38f4:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    38f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38f8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
	Clear_Bit(data,LCD4_EN); //EN = 0
    38fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38fe:	8b 7f       	andi	r24, 0xFB	; 251
    3900:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    3902:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3904:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	a0 ea       	ldi	r26, 0xA0	; 160
    390e:	b0 e4       	ldi	r27, 0x40	; 64
    3910:	89 8f       	std	Y+25, r24	; 0x19
    3912:	9a 8f       	std	Y+26, r25	; 0x1a
    3914:	ab 8f       	std	Y+27, r26	; 0x1b
    3916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3918:	69 8d       	ldd	r22, Y+25	; 0x19
    391a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	4a ef       	ldi	r20, 0xFA	; 250
    3926:	54 e4       	ldi	r21, 0x44	; 68
    3928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	8d 8b       	std	Y+21, r24	; 0x15
    3932:	9e 8b       	std	Y+22, r25	; 0x16
    3934:	af 8b       	std	Y+23, r26	; 0x17
    3936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3938:	6d 89       	ldd	r22, Y+21	; 0x15
    393a:	7e 89       	ldd	r23, Y+22	; 0x16
    393c:	8f 89       	ldd	r24, Y+23	; 0x17
    393e:	98 8d       	ldd	r25, Y+24	; 0x18
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e8       	ldi	r20, 0x80	; 128
    3946:	5f e3       	ldi	r21, 0x3F	; 63
    3948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    394c:	88 23       	and	r24, r24
    394e:	2c f4       	brge	.+10     	; 0x395a <LCD4_voidWriteChar+0x90>
		__ticks = 1;
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	9c 8b       	std	Y+20, r25	; 0x14
    3956:	8b 8b       	std	Y+19, r24	; 0x13
    3958:	3f c0       	rjmp	.+126    	; 0x39d8 <LCD4_voidWriteChar+0x10e>
	else if (__tmp > 65535)
    395a:	6d 89       	ldd	r22, Y+21	; 0x15
    395c:	7e 89       	ldd	r23, Y+22	; 0x16
    395e:	8f 89       	ldd	r24, Y+23	; 0x17
    3960:	98 8d       	ldd	r25, Y+24	; 0x18
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	3f ef       	ldi	r19, 0xFF	; 255
    3966:	4f e7       	ldi	r20, 0x7F	; 127
    3968:	57 e4       	ldi	r21, 0x47	; 71
    396a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    396e:	18 16       	cp	r1, r24
    3970:	4c f5       	brge	.+82     	; 0x39c4 <LCD4_voidWriteChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3972:	69 8d       	ldd	r22, Y+25	; 0x19
    3974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	40 e2       	ldi	r20, 0x20	; 32
    3980:	51 e4       	ldi	r21, 0x41	; 65
    3982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9c 8b       	std	Y+20, r25	; 0x14
    3998:	8b 8b       	std	Y+19, r24	; 0x13
    399a:	0f c0       	rjmp	.+30     	; 0x39ba <LCD4_voidWriteChar+0xf0>
    399c:	88 ec       	ldi	r24, 0xC8	; 200
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	9a 8b       	std	Y+18, r25	; 0x12
    39a2:	89 8b       	std	Y+17, r24	; 0x11
    39a4:	89 89       	ldd	r24, Y+17	; 0x11
    39a6:	9a 89       	ldd	r25, Y+18	; 0x12
    39a8:	01 97       	sbiw	r24, 0x01	; 1
    39aa:	f1 f7       	brne	.-4      	; 0x39a8 <LCD4_voidWriteChar+0xde>
    39ac:	9a 8b       	std	Y+18, r25	; 0x12
    39ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b0:	8b 89       	ldd	r24, Y+19	; 0x13
    39b2:	9c 89       	ldd	r25, Y+20	; 0x14
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	9c 8b       	std	Y+20, r25	; 0x14
    39b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ba:	8b 89       	ldd	r24, Y+19	; 0x13
    39bc:	9c 89       	ldd	r25, Y+20	; 0x14
    39be:	00 97       	sbiw	r24, 0x00	; 0
    39c0:	69 f7       	brne	.-38     	; 0x399c <LCD4_voidWriteChar+0xd2>
    39c2:	14 c0       	rjmp	.+40     	; 0x39ec <LCD4_voidWriteChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c4:	6d 89       	ldd	r22, Y+21	; 0x15
    39c6:	7e 89       	ldd	r23, Y+22	; 0x16
    39c8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ca:	98 8d       	ldd	r25, Y+24	; 0x18
    39cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	9c 8b       	std	Y+20, r25	; 0x14
    39d6:	8b 8b       	std	Y+19, r24	; 0x13
    39d8:	8b 89       	ldd	r24, Y+19	; 0x13
    39da:	9c 89       	ldd	r25, Y+20	; 0x14
    39dc:	98 8b       	std	Y+16, r25	; 0x10
    39de:	8f 87       	std	Y+15, r24	; 0x0f
    39e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e2:	98 89       	ldd	r25, Y+16	; 0x10
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	f1 f7       	brne	.-4      	; 0x39e4 <LCD4_voidWriteChar+0x11a>
    39e8:	98 8b       	std	Y+16, r25	; 0x10
    39ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	data = 0x00; //RW = 0
    39ec:	1d 8e       	std	Y+29, r1	; 0x1d
	data |= (1<<LCD4_Backlight) | (1 << LCD4_RS) | ((Local_Data & 0x0F) << LCD4_Data1); //Send the Lower 4 bits and RS = 1
    39ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    39f0:	88 2f       	mov	r24, r24
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	82 95       	swap	r24
    39f6:	92 95       	swap	r25
    39f8:	90 7f       	andi	r25, 0xF0	; 240
    39fa:	98 27       	eor	r25, r24
    39fc:	80 7f       	andi	r24, 0xF0	; 240
    39fe:	98 27       	eor	r25, r24
    3a00:	98 2f       	mov	r25, r24
    3a02:	99 60       	ori	r25, 0x09	; 9
    3a04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a06:	89 2b       	or	r24, r25
    3a08:	8d 8f       	std	Y+29, r24	; 0x1d

	Set_Bit(data,LCD4_EN); //EN = 1
    3a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a0c:	84 60       	ori	r24, 0x04	; 4
    3a0e:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    3a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a12:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
	Clear_Bit(data,LCD4_EN); //EN = 0
    3a16:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a18:	8b 7f       	andi	r24, 0xFB	; 251
    3a1a:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_VoidMasterWriteDataACK(data);
    3a1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a1e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	a0 ea       	ldi	r26, 0xA0	; 160
    3a28:	b0 e4       	ldi	r27, 0x40	; 64
    3a2a:	8b 87       	std	Y+11, r24	; 0x0b
    3a2c:	9c 87       	std	Y+12, r25	; 0x0c
    3a2e:	ad 87       	std	Y+13, r26	; 0x0d
    3a30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a ef       	ldi	r20, 0xFA	; 250
    3a40:	54 e4       	ldi	r21, 0x44	; 68
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	8f 83       	std	Y+7, r24	; 0x07
    3a4c:	98 87       	std	Y+8, r25	; 0x08
    3a4e:	a9 87       	std	Y+9, r26	; 0x09
    3a50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a52:	6f 81       	ldd	r22, Y+7	; 0x07
    3a54:	78 85       	ldd	r23, Y+8	; 0x08
    3a56:	89 85       	ldd	r24, Y+9	; 0x09
    3a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	2c f4       	brge	.+10     	; 0x3a74 <LCD4_voidWriteChar+0x1aa>
		__ticks = 1;
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	9e 83       	std	Y+6, r25	; 0x06
    3a70:	8d 83       	std	Y+5, r24	; 0x05
    3a72:	3f c0       	rjmp	.+126    	; 0x3af2 <LCD4_voidWriteChar+0x228>
	else if (__tmp > 65535)
    3a74:	6f 81       	ldd	r22, Y+7	; 0x07
    3a76:	78 85       	ldd	r23, Y+8	; 0x08
    3a78:	89 85       	ldd	r24, Y+9	; 0x09
    3a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	4c f5       	brge	.+82     	; 0x3ade <LCD4_voidWriteChar+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9e 83       	std	Y+6, r25	; 0x06
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
    3ab4:	0f c0       	rjmp	.+30     	; 0x3ad4 <LCD4_voidWriteChar+0x20a>
    3ab6:	88 ec       	ldi	r24, 0xC8	; 200
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    3abc:	8b 83       	std	Y+3, r24	; 0x03
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <LCD4_voidWriteChar+0x1f8>
    3ac6:	9c 83       	std	Y+4, r25	; 0x04
    3ac8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aca:	8d 81       	ldd	r24, Y+5	; 0x05
    3acc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	69 f7       	brne	.-38     	; 0x3ab6 <LCD4_voidWriteChar+0x1ec>
    3adc:	14 c0       	rjmp	.+40     	; 0x3b06 <LCD4_voidWriteChar+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ade:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae0:	78 85       	ldd	r23, Y+8	; 0x08
    3ae2:	89 85       	ldd	r24, Y+9	; 0x09
    3ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	9a 83       	std	Y+2, r25	; 0x02
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	89 81       	ldd	r24, Y+1	; 0x01
    3afc:	9a 81       	ldd	r25, Y+2	; 0x02
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <LCD4_voidWriteChar+0x234>
    3b02:	9a 83       	std	Y+2, r25	; 0x02
    3b04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    3b06:	6e 96       	adiw	r28, 0x1e	; 30
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <LCD4_voidStartCommunication>:

void LCD4_voidStartCommunication(){
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	cd b7       	in	r28, 0x3d	; 61
    3b1e:	de b7       	in	r29, 0x3e	; 62
	TWI_u32StartCondition();
    3b20:	0e 94 3e 0c 	call	0x187c	; 0x187c <TWI_u32StartCondition>
	TWI_VoidSendSlaveAddressWithWriteACK(LCD4_SlaveAddress);
    3b24:	87 e2       	ldi	r24, 0x27	; 39
    3b26:	0e 94 92 0c 	call	0x1924	; 0x1924 <TWI_VoidSendSlaveAddressWithWriteACK>
}
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <LCD4_voidStopCommunication>:

void LCD4_voidStopCommunication(){
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
	TWI_VoidStopCondition();
    3b38:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <TWI_VoidStopCondition>
}
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <LCD4_voidRestartCommunication>:

void LCD4_voidRestartCommunication(){
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	TWI_VoidReStartCondition();
    3b4a:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <TWI_VoidReStartCondition>
	TWI_VoidSendSlaveAddressWithWriteACK(LCD4_SlaveAddress);
    3b4e:	87 e2       	ldi	r24, 0x27	; 39
    3b50:	0e 94 92 0c 	call	0x1924	; 0x1924 <TWI_VoidSendSlaveAddressWithWriteACK>
}
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <LCD4_voidSendInitCommands>:

void LCD4_voidSendInitCommands(u8 data){
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	0f 92       	push	r0
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
    3b64:	89 83       	std	Y+1, r24	; 0x01
	data |= (1<<LCD4_Backlight);
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	88 60       	ori	r24, 0x08	; 8
    3b6a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(data,LCD4_EN);
    3b6c:	89 81       	ldd	r24, Y+1	; 0x01
    3b6e:	84 60       	ori	r24, 0x04	; 4
    3b70:	89 83       	std	Y+1, r24	; 0x01
	TWI_VoidMasterWriteDataACK(data);
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
	Clear_Bit(data,LCD4_EN); //EN = 0
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	8b 7f       	andi	r24, 0xFB	; 251
    3b7c:	89 83       	std	Y+1, r24	; 0x01
	TWI_VoidMasterWriteDataACK(data);
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <TWI_VoidMasterWriteDataACK>
}
    3b84:	0f 90       	pop	r0
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <LCD4_voidWriteString>:

void LCD4_voidWriteString(u8* Local_Data){
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <LCD4_voidWriteString+0x6>
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <LCD4_voidWriteString+0x8>
    3b94:	00 d0       	rcall	.+0      	; 0x3b96 <LCD4_voidWriteString+0xa>
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
	u32 counter=0;
    3b9e:	19 82       	std	Y+1, r1	; 0x01
    3ba0:	1a 82       	std	Y+2, r1	; 0x02
    3ba2:	1b 82       	std	Y+3, r1	; 0x03
    3ba4:	1c 82       	std	Y+4, r1	; 0x04
    3ba6:	15 c0       	rjmp	.+42     	; 0x3bd2 <LCD4_voidWriteString+0x46>
	while(Local_Data[counter] != '\0'){
		LCD4_voidWriteChar(Local_Data[counter]);
    3ba8:	29 81       	ldd	r18, Y+1	; 0x01
    3baa:	3a 81       	ldd	r19, Y+2	; 0x02
    3bac:	8d 81       	ldd	r24, Y+5	; 0x05
    3bae:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	e2 0f       	add	r30, r18
    3bb4:	f3 1f       	adc	r31, r19
    3bb6:	80 81       	ld	r24, Z
    3bb8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
		counter++;
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc0:	ab 81       	ldd	r26, Y+3	; 0x03
    3bc2:	bc 81       	ldd	r27, Y+4	; 0x04
    3bc4:	01 96       	adiw	r24, 0x01	; 1
    3bc6:	a1 1d       	adc	r26, r1
    3bc8:	b1 1d       	adc	r27, r1
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	9a 83       	std	Y+2, r25	; 0x02
    3bce:	ab 83       	std	Y+3, r26	; 0x03
    3bd0:	bc 83       	std	Y+4, r27	; 0x04
	TWI_VoidMasterWriteDataACK(data);
}

void LCD4_voidWriteString(u8* Local_Data){
	u32 counter=0;
	while(Local_Data[counter] != '\0'){
    3bd2:	29 81       	ldd	r18, Y+1	; 0x01
    3bd4:	3a 81       	ldd	r19, Y+2	; 0x02
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	fc 01       	movw	r30, r24
    3bdc:	e2 0f       	add	r30, r18
    3bde:	f3 1f       	adc	r31, r19
    3be0:	80 81       	ld	r24, Z
    3be2:	88 23       	and	r24, r24
    3be4:	09 f7       	brne	.-62     	; 0x3ba8 <LCD4_voidWriteString+0x1c>
		LCD4_voidWriteChar(Local_Data[counter]);
		counter++;
	}
}
    3be6:	26 96       	adiw	r28, 0x06	; 6
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <LCD4_ptrIntToString>:

u8* LCD4_ptrIntToString(s32 anInteger,u8 *str){
    3bf8:	0f 93       	push	r16
    3bfa:	1f 93       	push	r17
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	2e 97       	sbiw	r28, 0x0e	; 14
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	69 87       	std	Y+9, r22	; 0x09
    3c12:	7a 87       	std	Y+10, r23	; 0x0a
    3c14:	8b 87       	std	Y+11, r24	; 0x0b
    3c16:	9c 87       	std	Y+12, r25	; 0x0c
    3c18:	5e 87       	std	Y+14, r21	; 0x0e
    3c1a:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3c1c:	1d 82       	std	Y+5, r1	; 0x05
    3c1e:	1e 82       	std	Y+6, r1	; 0x06
    3c20:	1f 82       	std	Y+7, r1	; 0x07
    3c22:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3c24:	83 e1       	ldi	r24, 0x13	; 19
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	a0 e0       	ldi	r26, 0x00	; 0
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	ab 83       	std	Y+3, r26	; 0x03
    3c32:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3c34:	29 81       	ldd	r18, Y+1	; 0x01
    3c36:	3a 81       	ldd	r19, Y+2	; 0x02
    3c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	e2 0f       	add	r30, r18
    3c40:	f3 1f       	adc	r31, r19
    3c42:	10 82       	st	Z, r1
    3c44:	89 81       	ldd	r24, Y+1	; 0x01
    3c46:	9a 81       	ldd	r25, Y+2	; 0x02
    3c48:	ab 81       	ldd	r26, Y+3	; 0x03
    3c4a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c4c:	01 97       	sbiw	r24, 0x01	; 1
    3c4e:	a1 09       	sbc	r26, r1
    3c50:	b1 09       	sbc	r27, r1
    3c52:	89 83       	std	Y+1, r24	; 0x01
    3c54:	9a 83       	std	Y+2, r25	; 0x02
    3c56:	ab 83       	std	Y+3, r26	; 0x03
    3c58:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    3c5a:	89 85       	ldd	r24, Y+9	; 0x09
    3c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c5e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c60:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c62:	bb 23       	and	r27, r27
    3c64:	0c f0       	brlt	.+2      	; 0x3c68 <LCD4_ptrIntToString+0x70>
    3c66:	4d c0       	rjmp	.+154    	; 0x3d02 <LCD4_ptrIntToString+0x10a>
		flag = 1;
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	a0 e0       	ldi	r26, 0x00	; 0
    3c6e:	b0 e0       	ldi	r27, 0x00	; 0
    3c70:	8d 83       	std	Y+5, r24	; 0x05
    3c72:	9e 83       	std	Y+6, r25	; 0x06
    3c74:	af 83       	std	Y+7, r26	; 0x07
    3c76:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    3c78:	89 85       	ldd	r24, Y+9	; 0x09
    3c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c7c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3c7e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3c80:	b0 95       	com	r27
    3c82:	a0 95       	com	r26
    3c84:	90 95       	com	r25
    3c86:	81 95       	neg	r24
    3c88:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8a:	af 4f       	sbci	r26, 0xFF	; 255
    3c8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8e:	89 87       	std	Y+9, r24	; 0x09
    3c90:	9a 87       	std	Y+10, r25	; 0x0a
    3c92:	ab 87       	std	Y+11, r26	; 0x0b
    3c94:	bc 87       	std	Y+12, r27	; 0x0c
    3c96:	35 c0       	rjmp	.+106    	; 0x3d02 <LCD4_ptrIntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    3c98:	29 81       	ldd	r18, Y+1	; 0x01
    3c9a:	3a 81       	ldd	r19, Y+2	; 0x02
    3c9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca0:	8c 01       	movw	r16, r24
    3ca2:	02 0f       	add	r16, r18
    3ca4:	13 1f       	adc	r17, r19
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cac:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cae:	2a e0       	ldi	r18, 0x0A	; 10
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	50 e0       	ldi	r21, 0x00	; 0
    3cb6:	bc 01       	movw	r22, r24
    3cb8:	cd 01       	movw	r24, r26
    3cba:	0e 94 92 2a 	call	0x5524	; 0x5524 <__divmodsi4>
    3cbe:	dc 01       	movw	r26, r24
    3cc0:	cb 01       	movw	r24, r22
    3cc2:	80 5d       	subi	r24, 0xD0	; 208
    3cc4:	f8 01       	movw	r30, r16
    3cc6:	80 83       	st	Z, r24
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	9a 81       	ldd	r25, Y+2	; 0x02
    3ccc:	ab 81       	ldd	r26, Y+3	; 0x03
    3cce:	bc 81       	ldd	r27, Y+4	; 0x04
    3cd0:	01 97       	sbiw	r24, 0x01	; 1
    3cd2:	a1 09       	sbc	r26, r1
    3cd4:	b1 09       	sbc	r27, r1
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	ab 83       	std	Y+3, r26	; 0x03
    3cdc:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3cde:	89 85       	ldd	r24, Y+9	; 0x09
    3ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce2:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ce4:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ce6:	2a e0       	ldi	r18, 0x0A	; 10
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	40 e0       	ldi	r20, 0x00	; 0
    3cec:	50 e0       	ldi	r21, 0x00	; 0
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 92 2a 	call	0x5524	; 0x5524 <__divmodsi4>
    3cf6:	da 01       	movw	r26, r20
    3cf8:	c9 01       	movw	r24, r18
    3cfa:	89 87       	std	Y+9, r24	; 0x09
    3cfc:	9a 87       	std	Y+10, r25	; 0x0a
    3cfe:	ab 87       	std	Y+11, r26	; 0x0b
    3d00:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3d02:	89 85       	ldd	r24, Y+9	; 0x09
    3d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d06:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d08:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d0a:	00 97       	sbiw	r24, 0x00	; 0
    3d0c:	a1 05       	cpc	r26, r1
    3d0e:	b1 05       	cpc	r27, r1
    3d10:	19 f6       	brne	.-122    	; 0x3c98 <LCD4_ptrIntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	af 81       	ldd	r26, Y+7	; 0x07
    3d18:	b8 85       	ldd	r27, Y+8	; 0x08
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	a1 05       	cpc	r26, r1
    3d1e:	b1 05       	cpc	r27, r1
    3d20:	a1 f0       	breq	.+40     	; 0x3d4a <LCD4_ptrIntToString+0x152>
		str[i--] = '-';
    3d22:	29 81       	ldd	r18, Y+1	; 0x01
    3d24:	3a 81       	ldd	r19, Y+2	; 0x02
    3d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	e2 0f       	add	r30, r18
    3d2e:	f3 1f       	adc	r31, r19
    3d30:	8d e2       	ldi	r24, 0x2D	; 45
    3d32:	80 83       	st	Z, r24
    3d34:	89 81       	ldd	r24, Y+1	; 0x01
    3d36:	9a 81       	ldd	r25, Y+2	; 0x02
    3d38:	ab 81       	ldd	r26, Y+3	; 0x03
    3d3a:	bc 81       	ldd	r27, Y+4	; 0x04
    3d3c:	01 97       	sbiw	r24, 0x01	; 1
    3d3e:	a1 09       	sbc	r26, r1
    3d40:	b1 09       	sbc	r27, r1
    3d42:	89 83       	std	Y+1, r24	; 0x01
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	ab 83       	std	Y+3, r26	; 0x03
    3d48:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d50:	bc 81       	ldd	r27, Y+4	; 0x04
    3d52:	01 96       	adiw	r24, 0x01	; 1
    3d54:	a1 1d       	adc	r26, r1
    3d56:	b1 1d       	adc	r27, r1
    3d58:	89 83       	std	Y+1, r24	; 0x01
    3d5a:	9a 83       	std	Y+2, r25	; 0x02
    3d5c:	ab 83       	std	Y+3, r26	; 0x03
    3d5e:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3d60:	29 81       	ldd	r18, Y+1	; 0x01
    3d62:	3a 81       	ldd	r19, Y+2	; 0x02
    3d64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d68:	82 0f       	add	r24, r18
    3d6a:	93 1f       	adc	r25, r19

}
    3d6c:	2e 96       	adiw	r28, 0x0e	; 14
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	1f 91       	pop	r17
    3d7e:	0f 91       	pop	r16
    3d80:	08 95       	ret

00003d82 <LCD4_voidWriteIntData>:

void LCD4_voidWriteIntData(s32 Data){
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	6a 97       	sbiw	r28, 0x1a	; 26
    3d8c:	0f b6       	in	r0, 0x3f	; 63
    3d8e:	f8 94       	cli
    3d90:	de bf       	out	0x3e, r29	; 62
    3d92:	0f be       	out	0x3f, r0	; 63
    3d94:	cd bf       	out	0x3d, r28	; 61
    3d96:	6f 8b       	std	Y+23, r22	; 0x17
    3d98:	78 8f       	std	Y+24, r23	; 0x18
    3d9a:	89 8f       	std	Y+25, r24	; 0x19
    3d9c:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3da0:	98 8d       	ldd	r25, Y+24	; 0x18
    3da2:	a9 8d       	ldd	r26, Y+25	; 0x19
    3da4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	a1 05       	cpc	r26, r1
    3daa:	b1 05       	cpc	r27, r1
    3dac:	99 f0       	breq	.+38     	; 0x3dd4 <LCD4_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		//sprintf(str,"%d",Data);
		u8 *str = LCD4_ptrIntToString(Data,arr);
    3dae:	8f 89       	ldd	r24, Y+23	; 0x17
    3db0:	98 8d       	ldd	r25, Y+24	; 0x18
    3db2:	a9 8d       	ldd	r26, Y+25	; 0x19
    3db4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3db6:	9e 01       	movw	r18, r28
    3db8:	2d 5f       	subi	r18, 0xFD	; 253
    3dba:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbc:	bc 01       	movw	r22, r24
    3dbe:	cd 01       	movw	r24, r26
    3dc0:	a9 01       	movw	r20, r18
    3dc2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <LCD4_ptrIntToString>
    3dc6:	9a 83       	std	Y+2, r25	; 0x02
    3dc8:	89 83       	std	Y+1, r24	; 0x01
		LCD4_voidWriteString(str);
    3dca:	89 81       	ldd	r24, Y+1	; 0x01
    3dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dce:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <LCD4_voidWriteString>
    3dd2:	03 c0       	rjmp	.+6      	; 0x3dda <LCD4_voidWriteIntData+0x58>
	}
	else{
		LCD4_voidWriteChar('0');
    3dd4:	80 e3       	ldi	r24, 0x30	; 48
    3dd6:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
	}
}
    3dda:	6a 96       	adiw	r28, 0x1a	; 26
    3ddc:	0f b6       	in	r0, 0x3f	; 63
    3dde:	f8 94       	cli
    3de0:	de bf       	out	0x3e, r29	; 62
    3de2:	0f be       	out	0x3f, r0	; 63
    3de4:	cd bf       	out	0x3d, r28	; 61
    3de6:	cf 91       	pop	r28
    3de8:	df 91       	pop	r29
    3dea:	08 95       	ret

00003dec <LCD4_voidWriteFloatData>:

void LCD4_voidWriteFloatData(f32 Data){
    3dec:	df 93       	push	r29
    3dee:	cf 93       	push	r28
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	a6 97       	sbiw	r28, 0x26	; 38
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	6b a3       	std	Y+35, r22	; 0x23
    3e02:	7c a3       	std	Y+36, r23	; 0x24
    3e04:	8d a3       	std	Y+37, r24	; 0x25
    3e06:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    3e08:	6b a1       	ldd	r22, Y+35	; 0x23
    3e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	48 ec       	ldi	r20, 0xC8	; 200
    3e16:	52 e4       	ldi	r21, 0x42	; 66
    3e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e1c:	dc 01       	movw	r26, r24
    3e1e:	cb 01       	movw	r24, r22
    3e20:	bc 01       	movw	r22, r24
    3e22:	cd 01       	movw	r24, r26
    3e24:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    3e28:	dc 01       	movw	r26, r24
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	8b 87       	std	Y+11, r24	; 0x0b
    3e2e:	9c 87       	std	Y+12, r25	; 0x0c
    3e30:	ad 87       	std	Y+13, r26	; 0x0d
    3e32:	be 87       	std	Y+14, r27	; 0x0e
	//sprintf(str,"%d",number);
	u8 *str = LCD4_ptrIntToString(number,arr);
    3e34:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e36:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e38:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e3a:	be 85       	ldd	r27, Y+14	; 0x0e
    3e3c:	9e 01       	movw	r18, r28
    3e3e:	21 5f       	subi	r18, 0xF1	; 241
    3e40:	3f 4f       	sbci	r19, 0xFF	; 255
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	a9 01       	movw	r20, r18
    3e48:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <LCD4_ptrIntToString>
    3e4c:	9a 87       	std	Y+10, r25	; 0x0a
    3e4e:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    3e50:	1d 82       	std	Y+5, r1	; 0x05
    3e52:	1e 82       	std	Y+6, r1	; 0x06
    3e54:	1f 82       	std	Y+7, r1	; 0x07
    3e56:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    3e58:	19 82       	std	Y+1, r1	; 0x01
    3e5a:	1a 82       	std	Y+2, r1	; 0x02
    3e5c:	1b 82       	std	Y+3, r1	; 0x03
    3e5e:	1c 82       	std	Y+4, r1	; 0x04
    3e60:	0b c0       	rjmp	.+22     	; 0x3e78 <LCD4_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	9e 81       	ldd	r25, Y+6	; 0x06
    3e66:	af 81       	ldd	r26, Y+7	; 0x07
    3e68:	b8 85       	ldd	r27, Y+8	; 0x08
    3e6a:	01 96       	adiw	r24, 0x01	; 1
    3e6c:	a1 1d       	adc	r26, r1
    3e6e:	b1 1d       	adc	r27, r1
    3e70:	8d 83       	std	Y+5, r24	; 0x05
    3e72:	9e 83       	std	Y+6, r25	; 0x06
    3e74:	af 83       	std	Y+7, r26	; 0x07
    3e76:	b8 87       	std	Y+8, r27	; 0x08
	s32 number = (s32) (Data * 100);
	//sprintf(str,"%d",number);
	u8 *str = LCD4_ptrIntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    3e78:	2d 81       	ldd	r18, Y+5	; 0x05
    3e7a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e7c:	89 85       	ldd	r24, Y+9	; 0x09
    3e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e80:	fc 01       	movw	r30, r24
    3e82:	e2 0f       	add	r30, r18
    3e84:	f3 1f       	adc	r31, r19
    3e86:	80 81       	ld	r24, Z
    3e88:	88 23       	and	r24, r24
    3e8a:	59 f7       	brne	.-42     	; 0x3e62 <LCD4_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e90:	af 81       	ldd	r26, Y+7	; 0x07
    3e92:	b8 85       	ldd	r27, Y+8	; 0x08
    3e94:	02 97       	sbiw	r24, 0x02	; 2
    3e96:	a1 09       	sbc	r26, r1
    3e98:	b1 09       	sbc	r27, r1
    3e9a:	8d 83       	std	Y+5, r24	; 0x05
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	af 83       	std	Y+7, r26	; 0x07
    3ea0:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	af 81       	ldd	r26, Y+7	; 0x07
    3ea8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	a1 05       	cpc	r26, r1
    3eae:	b1 05       	cpc	r27, r1
    3eb0:	49 f5       	brne	.+82     	; 0x3f04 <LCD4_voidWriteFloatData+0x118>
		LCD4_voidWriteChar('0');
    3eb2:	80 e3       	ldi	r24, 0x30	; 48
    3eb4:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
    3eb8:	25 c0       	rjmp	.+74     	; 0x3f04 <LCD4_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3eba:	29 81       	ldd	r18, Y+1	; 0x01
    3ebc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ebe:	4b 81       	ldd	r20, Y+3	; 0x03
    3ec0:	5c 81       	ldd	r21, Y+4	; 0x04
    3ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec6:	af 81       	ldd	r26, Y+7	; 0x07
    3ec8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eca:	28 17       	cp	r18, r24
    3ecc:	39 07       	cpc	r19, r25
    3ece:	4a 07       	cpc	r20, r26
    3ed0:	5b 07       	cpc	r21, r27
    3ed2:	19 f4       	brne	.+6      	; 0x3eda <LCD4_voidWriteFloatData+0xee>
			LCD4_voidWriteChar('.');
    3ed4:	8e e2       	ldi	r24, 0x2E	; 46
    3ed6:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
		}
		LCD4_voidWriteChar(str[counter2]);
    3eda:	29 81       	ldd	r18, Y+1	; 0x01
    3edc:	3a 81       	ldd	r19, Y+2	; 0x02
    3ede:	89 85       	ldd	r24, Y+9	; 0x09
    3ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	e2 0f       	add	r30, r18
    3ee6:	f3 1f       	adc	r31, r19
    3ee8:	80 81       	ld	r24, Z
    3eea:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
		counter2++;
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ef4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ef6:	01 96       	adiw	r24, 0x01	; 1
    3ef8:	a1 1d       	adc	r26, r1
    3efa:	b1 1d       	adc	r27, r1
    3efc:	89 83       	std	Y+1, r24	; 0x01
    3efe:	9a 83       	std	Y+2, r25	; 0x02
    3f00:	ab 83       	std	Y+3, r26	; 0x03
    3f02:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD4_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    3f04:	29 81       	ldd	r18, Y+1	; 0x01
    3f06:	3a 81       	ldd	r19, Y+2	; 0x02
    3f08:	89 85       	ldd	r24, Y+9	; 0x09
    3f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e2 0f       	add	r30, r18
    3f10:	f3 1f       	adc	r31, r19
    3f12:	80 81       	ld	r24, Z
    3f14:	88 23       	and	r24, r24
    3f16:	89 f6       	brne	.-94     	; 0x3eba <LCD4_voidWriteFloatData+0xce>
			LCD4_voidWriteChar('.');
		}
		LCD4_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    3f18:	a6 96       	adiw	r28, 0x26	; 38
    3f1a:	0f b6       	in	r0, 0x3f	; 63
    3f1c:	f8 94       	cli
    3f1e:	de bf       	out	0x3e, r29	; 62
    3f20:	0f be       	out	0x3f, r0	; 63
    3f22:	cd bf       	out	0x3d, r28	; 61
    3f24:	cf 91       	pop	r28
    3f26:	df 91       	pop	r29
    3f28:	08 95       	ret

00003f2a <LCD4_voidDisplaySpecialChar>:

void LCD4_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	cd b7       	in	r28, 0x3d	; 61
    3f30:	de b7       	in	r29, 0x3e	; 62
    3f32:	27 97       	sbiw	r28, 0x07	; 7
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	9c 83       	std	Y+4, r25	; 0x04
    3f40:	8b 83       	std	Y+3, r24	; 0x03
    3f42:	6d 83       	std	Y+5, r22	; 0x05
    3f44:	4e 83       	std	Y+6, r20	; 0x06
    3f46:	2f 83       	std	Y+7, r18	; 0x07
	LCD4_voidGoToPosition(row,column);
    3f48:	8e 81       	ldd	r24, Y+6	; 0x06
    3f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4c:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <LCD4_voidGoToPosition>
	LCD4_voidWriteChar(CGRam_index);
    3f50:	8d 81       	ldd	r24, Y+5	; 0x05
    3f52:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
	u8 address = 0;
    3f56:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    3f58:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    3f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f5c:	88 30       	cpi	r24, 0x08	; 8
    3f5e:	30 f5       	brcc	.+76     	; 0x3fac <LCD4_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    3f60:	8d 81       	ldd	r24, Y+5	; 0x05
    3f62:	88 2f       	mov	r24, r24
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	8a 83       	std	Y+2, r24	; 0x02
		SET_BIT(address,6);
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	80 64       	ori	r24, 0x40	; 64
    3f78:	8a 83       	std	Y+2, r24	; 0x02
		CLR_BIT(address,7);
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	8f 77       	andi	r24, 0x7F	; 127
    3f7e:	8a 83       	std	Y+2, r24	; 0x02
		LCD4_voidWriteCommand(address);
    3f80:	8a 81       	ldd	r24, Y+2	; 0x02
    3f82:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
		for(index = 0; index < 8; index++){
    3f86:	19 82       	std	Y+1, r1	; 0x01
    3f88:	0e c0       	rjmp	.+28     	; 0x3fa6 <LCD4_voidDisplaySpecialChar+0x7c>
			LCD4_voidWriteChar(char_ptr[index]);
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	28 2f       	mov	r18, r24
    3f8e:	30 e0       	ldi	r19, 0x00	; 0
    3f90:	8b 81       	ldd	r24, Y+3	; 0x03
    3f92:	9c 81       	ldd	r25, Y+4	; 0x04
    3f94:	fc 01       	movw	r30, r24
    3f96:	e2 0f       	add	r30, r18
    3f98:	f3 1f       	adc	r31, r19
    3f9a:	80 81       	ld	r24, Z
    3f9c:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LCD4_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD4_voidWriteCommand(address);
		for(index = 0; index < 8; index++){
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	8f 5f       	subi	r24, 0xFF	; 255
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	88 30       	cpi	r24, 0x08	; 8
    3faa:	78 f3       	brcs	.-34     	; 0x3f8a <LCD4_voidDisplaySpecialChar+0x60>
			LCD4_voidWriteChar(char_ptr[index]);
		}
	}
	LCD4_voidWriteCommand(LCD4_ReturnHome);
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
}
    3fb2:	27 96       	adiw	r28, 0x07	; 7
    3fb4:	0f b6       	in	r0, 0x3f	; 63
    3fb6:	f8 94       	cli
    3fb8:	de bf       	out	0x3e, r29	; 62
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	cd bf       	out	0x3d, r28	; 61
    3fbe:	cf 91       	pop	r28
    3fc0:	df 91       	pop	r29
    3fc2:	08 95       	ret

00003fc4 <LCD4_voidGoToPosition>:

void LCD4_voidGoToPosition(u8 X_Position, u8 Y_Position){
    3fc4:	df 93       	push	r29
    3fc6:	cf 93       	push	r28
    3fc8:	00 d0       	rcall	.+0      	; 0x3fca <LCD4_voidGoToPosition+0x6>
    3fca:	0f 92       	push	r0
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	8a 83       	std	Y+2, r24	; 0x02
    3fd2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    3fd4:	19 82       	std	Y+1, r1	; 0x01

	if(X_Position == 0){
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	88 23       	and	r24, r24
    3fda:	19 f4       	brne	.+6      	; 0x3fe2 <LCD4_voidGoToPosition+0x1e>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    3fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fde:	89 83       	std	Y+1, r24	; 0x01
    3fe0:	06 c0       	rjmp	.+12     	; 0x3fee <LCD4_voidGoToPosition+0x2a>
	}
	else if(X_Position == 1){
    3fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe4:	81 30       	cpi	r24, 0x01	; 1
    3fe6:	19 f4       	brne	.+6      	; 0x3fee <LCD4_voidGoToPosition+0x2a>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    3fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fea:	80 5c       	subi	r24, 0xC0	; 192
    3fec:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
    3ff0:	80 68       	ori	r24, 0x80	; 128
    3ff2:	89 83       	std	Y+1, r24	; 0x01
	LCD4_voidWriteCommand(Local_Address);
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD4_voidWriteCommand>
}
    3ffa:	0f 90       	pop	r0
    3ffc:	0f 90       	pop	r0
    3ffe:	0f 90       	pop	r0
    4000:	cf 91       	pop	r28
    4002:	df 91       	pop	r29
    4004:	08 95       	ret

00004006 <IR_voidInit>:
//#include "../../../MCAL/GIE/Header/GIE_All.h"

static u32 number = 0;
extern u32 IRsignal;
extern u8 disableIR;
void IR_voidInit(){
    4006:	df 93       	push	r29
    4008:	cf 93       	push	r28
    400a:	cd b7       	in	r28, 0x3d	; 61
    400c:	de b7       	in	r29, 0x3e	; 62
	//LCD4_voidInit();
	ICU_CallBackFunction(IR_voidReadSignal);
    400e:	80 e1       	ldi	r24, 0x10	; 16
    4010:	90 e2       	ldi	r25, 0x20	; 32
    4012:	0e 94 f0 06 	call	0xde0	; 0xde0 <ICU_CallBackFunction>
	ICU_voidInit();
    4016:	0e 94 a9 06 	call	0xd52	; 0xd52 <ICU_voidInit>
	//GIE_voidEN();
}
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <IR_voidReadSignal>:

void IR_voidReadSignal(){
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	00 d0       	rcall	.+0      	; 0x4026 <IR_voidReadSignal+0x6>
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
	if(!disableIR){
    402a:	80 91 6c 01 	lds	r24, 0x016C
    402e:	88 23       	and	r24, r24
    4030:	09 f0       	breq	.+2      	; 0x4034 <IR_voidReadSignal+0x14>
    4032:	80 c0       	rjmp	.+256    	; 0x4134 <IR_voidReadSignal+0x114>
		u16 period = 0;
    4034:	1a 82       	std	Y+2, r1	; 0x02
    4036:	19 82       	std	Y+1, r1	; 0x01
		static s8 Local_BitCounter = -1;
		if(Local_BitCounter == -1){
    4038:	80 91 68 00 	lds	r24, 0x0068
    403c:	8f 3f       	cpi	r24, 0xFF	; 255
    403e:	51 f4       	brne	.+20     	; 0x4054 <IR_voidReadSignal+0x34>
			Local_BitCounter++;
    4040:	80 91 68 00 	lds	r24, 0x0068
    4044:	8f 5f       	subi	r24, 0xFF	; 255
    4046:	80 93 68 00 	sts	0x0068, r24
			TI1_TCNT1 = 0;
    404a:	ec e4       	ldi	r30, 0x4C	; 76
    404c:	f0 e0       	ldi	r31, 0x00	; 0
    404e:	11 82       	std	Z+1, r1	; 0x01
    4050:	10 82       	st	Z, r1
    4052:	70 c0       	rjmp	.+224    	; 0x4134 <IR_voidReadSignal+0x114>
		}
		else{
#if F_CPU >= 16000000
			period = ICU_u16ReadTimer() * 2;
#elif F_CPU >= 8000000
			period = ICU_u16ReadTimer();
    4054:	0e 94 44 07 	call	0xe88	; 0xe88 <ICU_u16ReadTimer>
    4058:	9a 83       	std	Y+2, r25	; 0x02
    405a:	89 83       	std	Y+1, r24	; 0x01
#endif
			ICU_voidResetTimer();
    405c:	0e 94 39 07 	call	0xe72	; 0xe72 <ICU_voidResetTimer>

			if(period > 4000){
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	2f e0       	ldi	r18, 0x0F	; 15
    4066:	81 3a       	cpi	r24, 0xA1	; 161
    4068:	92 07       	cpc	r25, r18
    406a:	08 f0       	brcs	.+2      	; 0x406e <IR_voidReadSignal+0x4e>
    406c:	4c c0       	rjmp	.+152    	; 0x4106 <IR_voidReadSignal+0xe6>
				//Start burst or repeat burst
			}

			else if(period < 2400 && period > 1800){
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	9a 81       	ldd	r25, Y+2	; 0x02
    4072:	29 e0       	ldi	r18, 0x09	; 9
    4074:	80 36       	cpi	r24, 0x60	; 96
    4076:	92 07       	cpc	r25, r18
    4078:	08 f5       	brcc	.+66     	; 0x40bc <IR_voidReadSignal+0x9c>
    407a:	89 81       	ldd	r24, Y+1	; 0x01
    407c:	9a 81       	ldd	r25, Y+2	; 0x02
    407e:	27 e0       	ldi	r18, 0x07	; 7
    4080:	89 30       	cpi	r24, 0x09	; 9
    4082:	92 07       	cpc	r25, r18
    4084:	d8 f0       	brcs	.+54     	; 0x40bc <IR_voidReadSignal+0x9c>
				//Logic 1
				number=(number<<1) | 1;
    4086:	80 91 5b 01 	lds	r24, 0x015B
    408a:	90 91 5c 01 	lds	r25, 0x015C
    408e:	a0 91 5d 01 	lds	r26, 0x015D
    4092:	b0 91 5e 01 	lds	r27, 0x015E
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	aa 1f       	adc	r26, r26
    409c:	bb 1f       	adc	r27, r27
    409e:	81 60       	ori	r24, 0x01	; 1
    40a0:	80 93 5b 01 	sts	0x015B, r24
    40a4:	90 93 5c 01 	sts	0x015C, r25
    40a8:	a0 93 5d 01 	sts	0x015D, r26
    40ac:	b0 93 5e 01 	sts	0x015E, r27
				Local_BitCounter++;
    40b0:	80 91 68 00 	lds	r24, 0x0068
    40b4:	8f 5f       	subi	r24, 0xFF	; 255
    40b6:	80 93 68 00 	sts	0x0068, r24
    40ba:	25 c0       	rjmp	.+74     	; 0x4106 <IR_voidReadSignal+0xe6>
			}

			else if(period <1300 && period > 700){
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	25 e0       	ldi	r18, 0x05	; 5
    40c2:	84 31       	cpi	r24, 0x14	; 20
    40c4:	92 07       	cpc	r25, r18
    40c6:	f8 f4       	brcc	.+62     	; 0x4106 <IR_voidReadSignal+0xe6>
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	22 e0       	ldi	r18, 0x02	; 2
    40ce:	8d 3b       	cpi	r24, 0xBD	; 189
    40d0:	92 07       	cpc	r25, r18
    40d2:	c8 f0       	brcs	.+50     	; 0x4106 <IR_voidReadSignal+0xe6>
				//Logic 0
				number<<=1;
    40d4:	80 91 5b 01 	lds	r24, 0x015B
    40d8:	90 91 5c 01 	lds	r25, 0x015C
    40dc:	a0 91 5d 01 	lds	r26, 0x015D
    40e0:	b0 91 5e 01 	lds	r27, 0x015E
    40e4:	88 0f       	add	r24, r24
    40e6:	99 1f       	adc	r25, r25
    40e8:	aa 1f       	adc	r26, r26
    40ea:	bb 1f       	adc	r27, r27
    40ec:	80 93 5b 01 	sts	0x015B, r24
    40f0:	90 93 5c 01 	sts	0x015C, r25
    40f4:	a0 93 5d 01 	sts	0x015D, r26
    40f8:	b0 93 5e 01 	sts	0x015E, r27
				Local_BitCounter++;
    40fc:	80 91 68 00 	lds	r24, 0x0068
    4100:	8f 5f       	subi	r24, 0xFF	; 255
    4102:	80 93 68 00 	sts	0x0068, r24
			}

			if(Local_BitCounter == 32){
    4106:	80 91 68 00 	lds	r24, 0x0068
    410a:	80 32       	cpi	r24, 0x20	; 32
    410c:	99 f4       	brne	.+38     	; 0x4134 <IR_voidReadSignal+0x114>
				Local_BitCounter = -1;
    410e:	8f ef       	ldi	r24, 0xFF	; 255
    4110:	80 93 68 00 	sts	0x0068, r24
				IRsignal = number;
    4114:	80 91 5b 01 	lds	r24, 0x015B
    4118:	90 91 5c 01 	lds	r25, 0x015C
    411c:	a0 91 5d 01 	lds	r26, 0x015D
    4120:	b0 91 5e 01 	lds	r27, 0x015E
    4124:	80 93 68 01 	sts	0x0168, r24
    4128:	90 93 69 01 	sts	0x0169, r25
    412c:	a0 93 6a 01 	sts	0x016A, r26
    4130:	b0 93 6b 01 	sts	0x016B, r27
				//			LCD4_voidWriteCommand(LCD4_ClearDisplay);
				//			LCD4_voidWriteIntData(number);
			}
		}
	}
}
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	08 95       	ret

0000413e <Clock_InitializeClockPosition>:

static u8 MINI_IMT[3][7] = {{LETTER_MINI_I},{LETTER_MINI_M},{LETTER_MINI_T}};

static u8 IMT[3][11] = {{LETTER_I},{LETTER_M},{LETTER_T}};

void Clock_InitializeClockPosition(){
    413e:	df 93       	push	r29
    4140:	cf 93       	push	r28
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
	currentSecondLocation = TOTAL_CYCLE_POINTS + STARTING_SECONDS * MINUTES_POINT;
    4146:	8c e2       	ldi	r24, 0x2C	; 44
    4148:	91 e0       	ldi	r25, 0x01	; 1
    414a:	90 93 6c 00 	sts	0x006C, r25
    414e:	80 93 6b 00 	sts	0x006B, r24
	if(currentSecondLocation > TOTAL_CYCLE_POINTS){
    4152:	80 91 6b 00 	lds	r24, 0x006B
    4156:	90 91 6c 00 	lds	r25, 0x006C
    415a:	21 e0       	ldi	r18, 0x01	; 1
    415c:	8d 32       	cpi	r24, 0x2D	; 45
    415e:	92 07       	cpc	r25, r18
    4160:	50 f0       	brcs	.+20     	; 0x4176 <Clock_InitializeClockPosition+0x38>
		currentSecondLocation-=TOTAL_CYCLE_POINTS;
    4162:	80 91 6b 00 	lds	r24, 0x006B
    4166:	90 91 6c 00 	lds	r25, 0x006C
    416a:	8c 52       	subi	r24, 0x2C	; 44
    416c:	91 40       	sbci	r25, 0x01	; 1
    416e:	90 93 6c 00 	sts	0x006C, r25
    4172:	80 93 6b 00 	sts	0x006B, r24
	}

	currentMinuteLocation = TOTAL_CYCLE_POINTS + MINUTES_POINT * (STARTING_MINUTES + STARTING_SECONDS / 60);
    4176:	8c e2       	ldi	r24, 0x2C	; 44
    4178:	91 e0       	ldi	r25, 0x01	; 1
    417a:	90 93 6e 00 	sts	0x006E, r25
    417e:	80 93 6d 00 	sts	0x006D, r24
	if(currentMinuteLocation > TOTAL_CYCLE_POINTS){
    4182:	80 91 6d 00 	lds	r24, 0x006D
    4186:	90 91 6e 00 	lds	r25, 0x006E
    418a:	21 e0       	ldi	r18, 0x01	; 1
    418c:	8d 32       	cpi	r24, 0x2D	; 45
    418e:	92 07       	cpc	r25, r18
    4190:	50 f0       	brcs	.+20     	; 0x41a6 <Clock_InitializeClockPosition+0x68>
		currentMinuteLocation-=TOTAL_CYCLE_POINTS;
    4192:	80 91 6d 00 	lds	r24, 0x006D
    4196:	90 91 6e 00 	lds	r25, 0x006E
    419a:	8c 52       	subi	r24, 0x2C	; 44
    419c:	91 40       	sbci	r25, 0x01	; 1
    419e:	90 93 6e 00 	sts	0x006E, r25
    41a2:	80 93 6d 00 	sts	0x006D, r24
	}

	currentHourLocation = HOURS_POINT * (STARTING_HOURS + STARTING_MINUTES / 60);
    41a6:	8c e2       	ldi	r24, 0x2C	; 44
    41a8:	91 e0       	ldi	r25, 0x01	; 1
    41aa:	90 93 70 00 	sts	0x0070, r25
    41ae:	80 93 6f 00 	sts	0x006F, r24
	if(currentHourLocation > TOTAL_CYCLE_POINTS){
    41b2:	80 91 6f 00 	lds	r24, 0x006F
    41b6:	90 91 70 00 	lds	r25, 0x0070
    41ba:	21 e0       	ldi	r18, 0x01	; 1
    41bc:	8d 32       	cpi	r24, 0x2D	; 45
    41be:	92 07       	cpc	r25, r18
    41c0:	50 f0       	brcs	.+20     	; 0x41d6 <Clock_InitializeClockPosition+0x98>
		currentHourLocation-=TOTAL_CYCLE_POINTS;
    41c2:	80 91 6f 00 	lds	r24, 0x006F
    41c6:	90 91 70 00 	lds	r25, 0x0070
    41ca:	8c 52       	subi	r24, 0x2C	; 44
    41cc:	91 40       	sbci	r25, 0x01	; 1
    41ce:	90 93 70 00 	sts	0x0070, r25
    41d2:	80 93 6f 00 	sts	0x006F, r24
	}
	currentHour = STARTING_HOURS * HOURS_POINT;
    41d6:	8c e2       	ldi	r24, 0x2C	; 44
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	90 93 74 00 	sts	0x0074, r25
    41de:	80 93 73 00 	sts	0x0073, r24
	currentMinute = TOTAL_CYCLE_POINTS + STARTING_MINUTES * MINUTES_POINT;
    41e2:	8c e2       	ldi	r24, 0x2C	; 44
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	90 93 72 00 	sts	0x0072, r25
    41ea:	80 93 71 00 	sts	0x0071, r24
	if(currentMinute > TOTAL_CYCLE_POINTS){
    41ee:	80 91 71 00 	lds	r24, 0x0071
    41f2:	90 91 72 00 	lds	r25, 0x0072
    41f6:	21 e0       	ldi	r18, 0x01	; 1
    41f8:	8d 32       	cpi	r24, 0x2D	; 45
    41fa:	92 07       	cpc	r25, r18
    41fc:	50 f0       	brcs	.+20     	; 0x4212 <Clock_InitializeClockPosition+0xd4>
		currentMinute -= TOTAL_CYCLE_POINTS;
    41fe:	80 91 71 00 	lds	r24, 0x0071
    4202:	90 91 72 00 	lds	r25, 0x0072
    4206:	8c 52       	subi	r24, 0x2C	; 44
    4208:	91 40       	sbci	r25, 0x01	; 1
    420a:	90 93 72 00 	sts	0x0072, r25
    420e:	80 93 71 00 	sts	0x0071, r24
	}
}
    4212:	cf 91       	pop	r28
    4214:	df 91       	pop	r29
    4216:	08 95       	ret

00004218 <Clock_Setup>:

void Clock_Setup(){
    4218:	df 93       	push	r29
    421a:	cf 93       	push	r28
    421c:	cd b7       	in	r28, 0x3d	; 61
    421e:	de b7       	in	r29, 0x3e	; 62
	//Set the LED ports as output
	DIO_u8SetPortDir(DIO_GroupB,DIO_GroupOutput);
    4220:	82 e0       	ldi	r24, 0x02	; 2
    4222:	6f ef       	ldi	r22, 0xFF	; 255
    4224:	0e 94 a3 12 	call	0x2546	; 0x2546 <DIO_u8SetPortDir>
	DIO_u8SetPortDir(DIO_GroupA,DIO_GroupOutput);
    4228:	81 e0       	ldi	r24, 0x01	; 1
    422a:	6f ef       	ldi	r22, 0xFF	; 255
    422c:	0e 94 a3 12 	call	0x2546	; 0x2546 <DIO_u8SetPortDir>
	//Initialize the IR
	IR_voidInit();
    4230:	0e 94 03 20 	call	0x4006	; 0x4006 <IR_voidInit>
	//Set the timer callback
	TI0_CallBackFunctionCTC(Clock_UpdateTime);
    4234:	84 e3       	ldi	r24, 0x34	; 52
    4236:	91 e2       	ldi	r25, 0x21	; 33
    4238:	0e 94 82 0b 	call	0x1704	; 0x1704 <TI0_CallBackFunctionCTC>
	TI2_CallBackFunctionCTC(Clock_MotorSpeed);
    423c:	8c ea       	ldi	r24, 0xAC	; 172
    423e:	99 e2       	ldi	r25, 0x29	; 41
    4240:	0e 94 35 06 	call	0xc6a	; 0xc6a <TI2_CallBackFunctionCTC>
	//Enable the timer
	TI0_voidInitCTC(249,TI0_OCdisconnect,TI0_Prescaler256);
    4244:	89 ef       	ldi	r24, 0xF9	; 249
    4246:	61 e0       	ldi	r22, 0x01	; 1
    4248:	45 e0       	ldi	r20, 0x05	; 5
    424a:	0e 94 77 09 	call	0x12ee	; 0x12ee <TI0_voidInitCTC>
	TI2_voidInit(249);
    424e:	89 ef       	ldi	r24, 0xF9	; 249
    4250:	0e 94 a3 05 	call	0xb46	; 0xb46 <TI2_voidInit>
	//Set the EXTI callback
	EXTI_CallBackFunction(Clock_CycleDone);
    4254:	82 e5       	ldi	r24, 0x52	; 82
    4256:	91 e2       	ldi	r25, 0x21	; 33
    4258:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <EXTI_CallBackFunction>
	//Initialize the EXTI
	EXTI_voidInit0(EXTI_Rising);
    425c:	84 e0       	ldi	r24, 0x04	; 4
    425e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <EXTI_voidInit0>
}
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <Clock_UpdateTime>:

void Clock_UpdateTime(){//Call this function every 4k (for 16MHz) or 8k (for 8MHz) microseconds using timer0
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_Counter = 0;
	Local_Counter++;
    4270:	80 91 79 01 	lds	r24, 0x0179
    4274:	90 91 7a 01 	lds	r25, 0x017A
    4278:	01 96       	adiw	r24, 0x01	; 1
    427a:	90 93 7a 01 	sts	0x017A, r25
    427e:	80 93 79 01 	sts	0x0179, r24
	if(Local_Counter == DESIRED_COUNTER_VALUE){//Only enter every second
    4282:	80 91 79 01 	lds	r24, 0x0179
    4286:	90 91 7a 01 	lds	r25, 0x017A
    428a:	8d 37       	cpi	r24, 0x7D	; 125
    428c:	91 05       	cpc	r25, r1
    428e:	39 f4       	brne	.+14     	; 0x429e <Clock_UpdateTime+0x36>
		updateTime = 1;
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	80 93 67 01 	sts	0x0167, r24
		Local_Counter = 0;
    4296:	10 92 7a 01 	sts	0x017A, r1
    429a:	10 92 79 01 	sts	0x0179, r1
	}
}
    429e:	cf 91       	pop	r28
    42a0:	df 91       	pop	r29
    42a2:	08 95       	ret

000042a4 <Clock_CycleDone>:

void Clock_CycleDone(){//Call this function in the EXTI
    42a4:	ef 92       	push	r14
    42a6:	ff 92       	push	r15
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	df 93       	push	r29
    42ae:	cf 93       	push	r28
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
	//Get the motor cycle time from timer2 in microseconds
	motorCycleTime = TI2_TCNT2 * 32 + cycleTimeCounter * TIMER2_CTC_VALUE;//Could potentially add 1 to accommodate for the timer counting from 0
    42b4:	e4 e4       	ldi	r30, 0x44	; 68
    42b6:	f0 e0       	ldi	r31, 0x00	; 0
    42b8:	80 81       	ld	r24, Z
    42ba:	88 2f       	mov	r24, r24
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	82 95       	swap	r24
    42c4:	92 95       	swap	r25
    42c6:	90 7f       	andi	r25, 0xF0	; 240
    42c8:	98 27       	eor	r25, r24
    42ca:	80 7f       	andi	r24, 0xF0	; 240
    42cc:	98 27       	eor	r25, r24
    42ce:	7c 01       	movw	r14, r24
    42d0:	00 27       	eor	r16, r16
    42d2:	f7 fc       	sbrc	r15, 7
    42d4:	00 95       	com	r16
    42d6:	10 2f       	mov	r17, r16
    42d8:	80 91 73 01 	lds	r24, 0x0173
    42dc:	90 91 74 01 	lds	r25, 0x0174
    42e0:	a0 91 75 01 	lds	r26, 0x0175
    42e4:	b0 91 76 01 	lds	r27, 0x0176
    42e8:	20 e4       	ldi	r18, 0x40	; 64
    42ea:	3f e1       	ldi	r19, 0x1F	; 31
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	50 e0       	ldi	r21, 0x00	; 0
    42f0:	bc 01       	movw	r22, r24
    42f2:	cd 01       	movw	r24, r26
    42f4:	0e 94 3d 2a 	call	0x547a	; 0x547a <__mulsi3>
    42f8:	dc 01       	movw	r26, r24
    42fa:	cb 01       	movw	r24, r22
    42fc:	8e 0d       	add	r24, r14
    42fe:	9f 1d       	adc	r25, r15
    4300:	a0 1f       	adc	r26, r16
    4302:	b1 1f       	adc	r27, r17
    4304:	80 93 6f 01 	sts	0x016F, r24
    4308:	90 93 70 01 	sts	0x0170, r25
    430c:	a0 93 71 01 	sts	0x0171, r26
    4310:	b0 93 72 01 	sts	0x0172, r27
	motorCycleTime /= (TOTAL_CYCLE_POINTS); //Divide the cycle time by 300
    4314:	80 91 6f 01 	lds	r24, 0x016F
    4318:	90 91 70 01 	lds	r25, 0x0170
    431c:	a0 91 71 01 	lds	r26, 0x0171
    4320:	b0 91 72 01 	lds	r27, 0x0172
    4324:	2c e2       	ldi	r18, 0x2C	; 44
    4326:	31 e0       	ldi	r19, 0x01	; 1
    4328:	40 e0       	ldi	r20, 0x00	; 0
    432a:	50 e0       	ldi	r21, 0x00	; 0
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <__udivmodsi4>
    4334:	da 01       	movw	r26, r20
    4336:	c9 01       	movw	r24, r18
    4338:	80 93 6f 01 	sts	0x016F, r24
    433c:	90 93 70 01 	sts	0x0170, r25
    4340:	a0 93 71 01 	sts	0x0171, r26
    4344:	b0 93 72 01 	sts	0x0172, r27
	//Reset timer2 and cycle time counter
	TI2_TCNT2 = 0;
    4348:	e4 e4       	ldi	r30, 0x44	; 68
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	10 82       	st	Z, r1
	cycleTimeCounter = 0;
    434e:	10 92 73 01 	sts	0x0173, r1
    4352:	10 92 74 01 	sts	0x0174, r1
    4356:	10 92 75 01 	sts	0x0175, r1
    435a:	10 92 76 01 	sts	0x0176, r1
	resetTimer = 0; //This is set to 0 to stop resetting timer2 in the main function
    435e:	10 92 75 00 	sts	0x0075, r1
	if(clockOn){
    4362:	80 91 66 01 	lds	r24, 0x0166
    4366:	88 23       	and	r24, r24
    4368:	19 f0       	breq	.+6      	; 0x4370 <Clock_CycleDone+0xcc>
		delayBreak = 1;
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	80 93 65 01 	sts	0x0165, r24
	}

	clockOn = 1;
    4370:	81 e0       	ldi	r24, 0x01	; 1
    4372:	80 93 66 01 	sts	0x0166, r24
	//Reset the clock point counter to the first position
	clockPointCounter = STARTING_POINT;
    4376:	8f ea       	ldi	r24, 0xAF	; 175
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	90 93 6a 00 	sts	0x006A, r25
    437e:	80 93 69 00 	sts	0x0069, r24
	disableIR = 0;
    4382:	10 92 6c 01 	sts	0x016C, r1
}
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	ff 90       	pop	r15
    4390:	ef 90       	pop	r14
    4392:	08 95       	ret

00004394 <Clock_delayMicroseconds>:

void Clock_delayMicroseconds(u16 microseconds){
    4394:	df 93       	push	r29
    4396:	cf 93       	push	r28
    4398:	00 d0       	rcall	.+0      	; 0x439a <Clock_delayMicroseconds+0x6>
    439a:	cd b7       	in	r28, 0x3d	; 61
    439c:	de b7       	in	r29, 0x3e	; 62
    439e:	9a 83       	std	Y+2, r25	; 0x02
    43a0:	89 83       	std	Y+1, r24	; 0x01
#elif F_CPU >= 8000000L
	// for the 8 MHz clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (microseconds <= 2) return; //  = 3 cycles, (4 when true)
    43a2:	89 81       	ldd	r24, Y+1	; 0x01
    43a4:	9a 81       	ldd	r25, Y+2	; 0x02
    43a6:	83 30       	cpi	r24, 0x03	; 3
    43a8:	91 05       	cpc	r25, r1
    43aa:	88 f0       	brcs	.+34     	; 0x43ce <Clock_delayMicroseconds+0x3a>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	microseconds <<= 1; //x2 us, = 2 cycles
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	9a 81       	ldd	r25, Y+2	; 0x02
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	9a 83       	std	Y+2, r25	; 0x02
    43b6:	89 83       	std	Y+1, r24	; 0x01

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can subtract 4
	microseconds -= 4; // = 2 cycles
    43b8:	89 81       	ldd	r24, Y+1	; 0x01
    43ba:	9a 81       	ldd	r25, Y+2	; 0x02
    43bc:	04 97       	sbiw	r24, 0x04	; 4
    43be:	9a 83       	std	Y+2, r25	; 0x02
    43c0:	89 83       	std	Y+1, r24	; 0x01

#endif
	// busy wait
	__asm__ __volatile__ (
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	9a 81       	ldd	r25, Y+2	; 0x02
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <Clock_delayMicroseconds+0x32>
    43ca:	9a 83       	std	Y+2, r25	; 0x02
    43cc:	89 83       	std	Y+1, r24	; 0x01
			"1: sbiw %0,1" "\n\t" // 2 cycles
			"brne 1b" : "=w" (microseconds) : "0" (microseconds) // 2 cycles
	);
	// return = 4 cycles
}
    43ce:	0f 90       	pop	r0
    43d0:	0f 90       	pop	r0
    43d2:	cf 91       	pop	r28
    43d4:	df 91       	pop	r29
    43d6:	08 95       	ret

000043d8 <Clock_delayMilliseconds>:

void Clock_delayMilliseconds(u16 milliseconds){
    43d8:	df 93       	push	r29
    43da:	cf 93       	push	r28
    43dc:	00 d0       	rcall	.+0      	; 0x43de <Clock_delayMilliseconds+0x6>
    43de:	00 d0       	rcall	.+0      	; 0x43e0 <Clock_delayMilliseconds+0x8>
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	9c 83       	std	Y+4, r25	; 0x04
    43e6:	8b 83       	std	Y+3, r24	; 0x03
	for(u16 i = 0; i < milliseconds; i++)
    43e8:	1a 82       	std	Y+2, r1	; 0x02
    43ea:	19 82       	std	Y+1, r1	; 0x01
    43ec:	09 c0       	rjmp	.+18     	; 0x4400 <Clock_delayMilliseconds+0x28>
	{
		Clock_delayMicroseconds(1000);
    43ee:	88 ee       	ldi	r24, 0xE8	; 232
    43f0:	93 e0       	ldi	r25, 0x03	; 3
    43f2:	0e 94 ca 21 	call	0x4394	; 0x4394 <Clock_delayMicroseconds>
	);
	// return = 4 cycles
}

void Clock_delayMilliseconds(u16 milliseconds){
	for(u16 i = 0; i < milliseconds; i++)
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	9a 81       	ldd	r25, Y+2	; 0x02
    43fa:	01 96       	adiw	r24, 0x01	; 1
    43fc:	9a 83       	std	Y+2, r25	; 0x02
    43fe:	89 83       	std	Y+1, r24	; 0x01
    4400:	29 81       	ldd	r18, Y+1	; 0x01
    4402:	3a 81       	ldd	r19, Y+2	; 0x02
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	9c 81       	ldd	r25, Y+4	; 0x04
    4408:	28 17       	cp	r18, r24
    440a:	39 07       	cpc	r19, r25
    440c:	80 f3       	brcs	.-32     	; 0x43ee <Clock_delayMilliseconds+0x16>
	{
		Clock_delayMicroseconds(1000);
	}
}
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	08 95       	ret

0000441c <Clock_CalculateTime>:

void Clock_CalculateTime(){
    441c:	df 93       	push	r29
    441e:	cf 93       	push	r28
    4420:	cd b7       	in	r28, 0x3d	; 61
    4422:	de b7       	in	r29, 0x3e	; 62
	//Increment the second's position
	currentSecondLocation += MINUTES_POINT;
    4424:	80 91 6b 00 	lds	r24, 0x006B
    4428:	90 91 6c 00 	lds	r25, 0x006C
    442c:	05 96       	adiw	r24, 0x05	; 5
    442e:	90 93 6c 00 	sts	0x006C, r25
    4432:	80 93 6b 00 	sts	0x006B, r24
	if(currentSecondLocation > TOTAL_CYCLE_POINTS){
    4436:	80 91 6b 00 	lds	r24, 0x006B
    443a:	90 91 6c 00 	lds	r25, 0x006C
    443e:	21 e0       	ldi	r18, 0x01	; 1
    4440:	8d 32       	cpi	r24, 0x2D	; 45
    4442:	92 07       	cpc	r25, r18
    4444:	50 f0       	brcs	.+20     	; 0x445a <Clock_CalculateTime+0x3e>
		//Reset the second's position
		currentSecondLocation -= TOTAL_CYCLE_POINTS;
    4446:	80 91 6b 00 	lds	r24, 0x006B
    444a:	90 91 6c 00 	lds	r25, 0x006C
    444e:	8c 52       	subi	r24, 0x2C	; 44
    4450:	91 40       	sbci	r25, 0x01	; 1
    4452:	90 93 6c 00 	sts	0x006C, r25
    4456:	80 93 6b 00 	sts	0x006B, r24
	}

	if(currentSecondLocation % TOTAL_CYCLE_POINTS == 0){
    445a:	80 91 6b 00 	lds	r24, 0x006B
    445e:	90 91 6c 00 	lds	r25, 0x006C
    4462:	2c e2       	ldi	r18, 0x2C	; 44
    4464:	31 e0       	ldi	r19, 0x01	; 1
    4466:	b9 01       	movw	r22, r18
    4468:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	21 f5       	brne	.+72     	; 0x44b8 <Clock_CalculateTime+0x9c>
		currentMinute += MINUTES_POINT;
    4470:	80 91 71 00 	lds	r24, 0x0071
    4474:	90 91 72 00 	lds	r25, 0x0072
    4478:	05 96       	adiw	r24, 0x05	; 5
    447a:	90 93 72 00 	sts	0x0072, r25
    447e:	80 93 71 00 	sts	0x0071, r24
		if(currentMinute > TOTAL_CYCLE_POINTS){
    4482:	80 91 71 00 	lds	r24, 0x0071
    4486:	90 91 72 00 	lds	r25, 0x0072
    448a:	21 e0       	ldi	r18, 0x01	; 1
    448c:	8d 32       	cpi	r24, 0x2D	; 45
    448e:	92 07       	cpc	r25, r18
    4490:	50 f0       	brcs	.+20     	; 0x44a6 <Clock_CalculateTime+0x8a>
			currentMinute -= TOTAL_CYCLE_POINTS;
    4492:	80 91 71 00 	lds	r24, 0x0071
    4496:	90 91 72 00 	lds	r25, 0x0072
    449a:	8c 52       	subi	r24, 0x2C	; 44
    449c:	91 40       	sbci	r25, 0x01	; 1
    449e:	90 93 72 00 	sts	0x0072, r25
    44a2:	80 93 71 00 	sts	0x0071, r24
		}
		currentMinuteLocation = currentMinute;
    44a6:	80 91 71 00 	lds	r24, 0x0071
    44aa:	90 91 72 00 	lds	r25, 0x0072
    44ae:	90 93 6e 00 	sts	0x006E, r25
    44b2:	80 93 6d 00 	sts	0x006D, r24
    44b6:	1c c0       	rjmp	.+56     	; 0x44f0 <Clock_CalculateTime+0xd4>
	}
	else{
		currentMinuteLocation = currentMinute + MINUTES_POINT * currentSecondLocation / TOTAL_CYCLE_POINTS;
    44b8:	20 91 6b 00 	lds	r18, 0x006B
    44bc:	30 91 6c 00 	lds	r19, 0x006C
    44c0:	c9 01       	movw	r24, r18
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	88 0f       	add	r24, r24
    44c8:	99 1f       	adc	r25, r25
    44ca:	82 0f       	add	r24, r18
    44cc:	93 1f       	adc	r25, r19
    44ce:	2c e2       	ldi	r18, 0x2C	; 44
    44d0:	31 e0       	ldi	r19, 0x01	; 1
    44d2:	b9 01       	movw	r22, r18
    44d4:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    44d8:	cb 01       	movw	r24, r22
    44da:	9c 01       	movw	r18, r24
    44dc:	80 91 71 00 	lds	r24, 0x0071
    44e0:	90 91 72 00 	lds	r25, 0x0072
    44e4:	82 0f       	add	r24, r18
    44e6:	93 1f       	adc	r25, r19
    44e8:	90 93 6e 00 	sts	0x006E, r25
    44ec:	80 93 6d 00 	sts	0x006D, r24
	}

	if(currentMinuteLocation > TOTAL_CYCLE_POINTS){
    44f0:	80 91 6d 00 	lds	r24, 0x006D
    44f4:	90 91 6e 00 	lds	r25, 0x006E
    44f8:	21 e0       	ldi	r18, 0x01	; 1
    44fa:	8d 32       	cpi	r24, 0x2D	; 45
    44fc:	92 07       	cpc	r25, r18
    44fe:	50 f0       	brcs	.+20     	; 0x4514 <Clock_CalculateTime+0xf8>
		//Reset the minute's position
		currentMinuteLocation -= TOTAL_CYCLE_POINTS;
    4500:	80 91 6d 00 	lds	r24, 0x006D
    4504:	90 91 6e 00 	lds	r25, 0x006E
    4508:	8c 52       	subi	r24, 0x2C	; 44
    450a:	91 40       	sbci	r25, 0x01	; 1
    450c:	90 93 6e 00 	sts	0x006E, r25
    4510:	80 93 6d 00 	sts	0x006D, r24
	}

	if(currentMinuteLocation % TOTAL_CYCLE_POINTS == 0){
    4514:	80 91 6d 00 	lds	r24, 0x006D
    4518:	90 91 6e 00 	lds	r25, 0x006E
    451c:	2c e2       	ldi	r18, 0x2C	; 44
    451e:	31 e0       	ldi	r19, 0x01	; 1
    4520:	b9 01       	movw	r22, r18
    4522:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4526:	00 97       	sbiw	r24, 0x00	; 0
    4528:	79 f5       	brne	.+94     	; 0x4588 <Clock_CalculateTime+0x16c>
		if(currentSecondLocation % TOTAL_CYCLE_POINTS == 0){
    452a:	80 91 6b 00 	lds	r24, 0x006B
    452e:	90 91 6c 00 	lds	r25, 0x006C
    4532:	2c e2       	ldi	r18, 0x2C	; 44
    4534:	31 e0       	ldi	r19, 0x01	; 1
    4536:	b9 01       	movw	r22, r18
    4538:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	49 f4       	brne	.+18     	; 0x4552 <Clock_CalculateTime+0x136>
			currentHour += HOURS_POINT;
    4540:	80 91 73 00 	lds	r24, 0x0073
    4544:	90 91 74 00 	lds	r25, 0x0074
    4548:	49 96       	adiw	r24, 0x19	; 25
    454a:	90 93 74 00 	sts	0x0074, r25
    454e:	80 93 73 00 	sts	0x0073, r24
		}
		if(currentHour > TOTAL_CYCLE_POINTS){
    4552:	80 91 73 00 	lds	r24, 0x0073
    4556:	90 91 74 00 	lds	r25, 0x0074
    455a:	21 e0       	ldi	r18, 0x01	; 1
    455c:	8d 32       	cpi	r24, 0x2D	; 45
    455e:	92 07       	cpc	r25, r18
    4560:	50 f0       	brcs	.+20     	; 0x4576 <Clock_CalculateTime+0x15a>
			currentHour -= TOTAL_CYCLE_POINTS;
    4562:	80 91 73 00 	lds	r24, 0x0073
    4566:	90 91 74 00 	lds	r25, 0x0074
    456a:	8c 52       	subi	r24, 0x2C	; 44
    456c:	91 40       	sbci	r25, 0x01	; 1
    456e:	90 93 74 00 	sts	0x0074, r25
    4572:	80 93 73 00 	sts	0x0073, r24
		}
		currentHourLocation = currentHour;
    4576:	80 91 73 00 	lds	r24, 0x0073
    457a:	90 91 74 00 	lds	r25, 0x0074
    457e:	90 93 70 00 	sts	0x0070, r25
    4582:	80 93 6f 00 	sts	0x006F, r24
    4586:	22 c0       	rjmp	.+68     	; 0x45cc <Clock_CalculateTime+0x1b0>
	}
	else{
		currentHourLocation = currentHour + HOURS_POINT * currentMinuteLocation / TOTAL_CYCLE_POINTS;
    4588:	20 91 6d 00 	lds	r18, 0x006D
    458c:	30 91 6e 00 	lds	r19, 0x006E
    4590:	c9 01       	movw	r24, r18
    4592:	88 0f       	add	r24, r24
    4594:	99 1f       	adc	r25, r25
    4596:	82 0f       	add	r24, r18
    4598:	93 1f       	adc	r25, r19
    459a:	88 0f       	add	r24, r24
    459c:	99 1f       	adc	r25, r25
    459e:	88 0f       	add	r24, r24
    45a0:	99 1f       	adc	r25, r25
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	82 0f       	add	r24, r18
    45a8:	93 1f       	adc	r25, r19
    45aa:	2c e2       	ldi	r18, 0x2C	; 44
    45ac:	31 e0       	ldi	r19, 0x01	; 1
    45ae:	b9 01       	movw	r22, r18
    45b0:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    45b4:	cb 01       	movw	r24, r22
    45b6:	9c 01       	movw	r18, r24
    45b8:	80 91 73 00 	lds	r24, 0x0073
    45bc:	90 91 74 00 	lds	r25, 0x0074
    45c0:	82 0f       	add	r24, r18
    45c2:	93 1f       	adc	r25, r19
    45c4:	90 93 70 00 	sts	0x0070, r25
    45c8:	80 93 6f 00 	sts	0x006F, r24
	}

	if(currentHourLocation > TOTAL_CYCLE_POINTS){
    45cc:	80 91 6f 00 	lds	r24, 0x006F
    45d0:	90 91 70 00 	lds	r25, 0x0070
    45d4:	21 e0       	ldi	r18, 0x01	; 1
    45d6:	8d 32       	cpi	r24, 0x2D	; 45
    45d8:	92 07       	cpc	r25, r18
    45da:	50 f0       	brcs	.+20     	; 0x45f0 <Clock_CalculateTime+0x1d4>
		//Reset the hour's position
		currentHourLocation -= TOTAL_CYCLE_POINTS;
    45dc:	80 91 6f 00 	lds	r24, 0x006F
    45e0:	90 91 70 00 	lds	r25, 0x0070
    45e4:	8c 52       	subi	r24, 0x2C	; 44
    45e6:	91 40       	sbci	r25, 0x01	; 1
    45e8:	90 93 70 00 	sts	0x0070, r25
    45ec:	80 93 6f 00 	sts	0x006F, r24
	}

	hoursLeftNumber = (currentHour/ HOURS_POINT) / 10;
    45f0:	80 91 73 00 	lds	r24, 0x0073
    45f4:	90 91 74 00 	lds	r25, 0x0074
    45f8:	2a ef       	ldi	r18, 0xFA	; 250
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	b9 01       	movw	r22, r18
    45fe:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4602:	cb 01       	movw	r24, r22
    4604:	80 93 5f 01 	sts	0x015F, r24
	hoursRightNumber = (currentHour/ HOURS_POINT) % 10;
    4608:	80 91 73 00 	lds	r24, 0x0073
    460c:	90 91 74 00 	lds	r25, 0x0074
    4610:	29 e1       	ldi	r18, 0x19	; 25
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	b9 01       	movw	r22, r18
    4616:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    461a:	cb 01       	movw	r24, r22
    461c:	2a e0       	ldi	r18, 0x0A	; 10
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	b9 01       	movw	r22, r18
    4622:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4626:	80 93 60 01 	sts	0x0160, r24
	minutesLeftNumber = (currentMinute / MINUTES_POINT) / 10;
    462a:	80 91 71 00 	lds	r24, 0x0071
    462e:	90 91 72 00 	lds	r25, 0x0072
    4632:	22 e3       	ldi	r18, 0x32	; 50
    4634:	30 e0       	ldi	r19, 0x00	; 0
    4636:	b9 01       	movw	r22, r18
    4638:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    463c:	cb 01       	movw	r24, r22
    463e:	80 93 61 01 	sts	0x0161, r24
	if(minutesLeftNumber == 6){
    4642:	80 91 61 01 	lds	r24, 0x0161
    4646:	86 30       	cpi	r24, 0x06	; 6
    4648:	11 f4       	brne	.+4      	; 0x464e <Clock_CalculateTime+0x232>
		minutesLeftNumber = 0;
    464a:	10 92 61 01 	sts	0x0161, r1
	}
	minutesRightNumber = (currentMinute / MINUTES_POINT) % 10;
    464e:	80 91 71 00 	lds	r24, 0x0071
    4652:	90 91 72 00 	lds	r25, 0x0072
    4656:	25 e0       	ldi	r18, 0x05	; 5
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	b9 01       	movw	r22, r18
    465c:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4660:	cb 01       	movw	r24, r22
    4662:	2a e0       	ldi	r18, 0x0A	; 10
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	b9 01       	movw	r22, r18
    4668:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    466c:	80 93 62 01 	sts	0x0162, r24
	secondsLeftNumber = (currentSecondLocation / MINUTES_POINT) / 10;
    4670:	80 91 6b 00 	lds	r24, 0x006B
    4674:	90 91 6c 00 	lds	r25, 0x006C
    4678:	22 e3       	ldi	r18, 0x32	; 50
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	b9 01       	movw	r22, r18
    467e:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4682:	cb 01       	movw	r24, r22
    4684:	80 93 63 01 	sts	0x0163, r24
	if(secondsLeftNumber == 6){
    4688:	80 91 63 01 	lds	r24, 0x0163
    468c:	86 30       	cpi	r24, 0x06	; 6
    468e:	11 f4       	brne	.+4      	; 0x4694 <Clock_CalculateTime+0x278>
		secondsLeftNumber = 0;
    4690:	10 92 63 01 	sts	0x0163, r1
	}
	secondsRightNumber = (currentSecondLocation / MINUTES_POINT) % 10;
    4694:	80 91 6b 00 	lds	r24, 0x006B
    4698:	90 91 6c 00 	lds	r25, 0x006C
    469c:	25 e0       	ldi	r18, 0x05	; 5
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	b9 01       	movw	r22, r18
    46a2:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    46a6:	cb 01       	movw	r24, r22
    46a8:	2a e0       	ldi	r18, 0x0A	; 10
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	b9 01       	movw	r22, r18
    46ae:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    46b2:	80 93 64 01 	sts	0x0164, r24
}
    46b6:	cf 91       	pop	r28
    46b8:	df 91       	pop	r29
    46ba:	08 95       	ret

000046bc <Clock_CheckIRInput>:

void Clock_CheckIRInput(){
    46bc:	df 93       	push	r29
    46be:	cf 93       	push	r28
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <Clock_CheckIRInput+0x6>
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <Clock_CheckIRInput+0x8>
    46c4:	cd b7       	in	r28, 0x3d	; 61
    46c6:	de b7       	in	r29, 0x3e	; 62
	switch(IRsignal){
    46c8:	80 91 68 01 	lds	r24, 0x0168
    46cc:	90 91 69 01 	lds	r25, 0x0169
    46d0:	a0 91 6a 01 	lds	r26, 0x016A
    46d4:	b0 91 6b 01 	lds	r27, 0x016B
    46d8:	89 83       	std	Y+1, r24	; 0x01
    46da:	9a 83       	std	Y+2, r25	; 0x02
    46dc:	ab 83       	std	Y+3, r26	; 0x03
    46de:	bc 83       	std	Y+4, r27	; 0x04
    46e0:	89 81       	ldd	r24, Y+1	; 0x01
    46e2:	9a 81       	ldd	r25, Y+2	; 0x02
    46e4:	ab 81       	ldd	r26, Y+3	; 0x03
    46e6:	bc 81       	ldd	r27, Y+4	; 0x04
    46e8:	87 36       	cpi	r24, 0x67	; 103
    46ea:	28 e9       	ldi	r18, 0x98	; 152
    46ec:	92 07       	cpc	r25, r18
    46ee:	2e ef       	ldi	r18, 0xFE	; 254
    46f0:	a2 07       	cpc	r26, r18
    46f2:	21 e0       	ldi	r18, 0x01	; 1
    46f4:	b2 07       	cpc	r27, r18
    46f6:	09 f4       	brne	.+2      	; 0x46fa <Clock_CheckIRInput+0x3e>
    46f8:	82 c0       	rjmp	.+260    	; 0x47fe <Clock_CheckIRInput+0x142>
    46fa:	89 81       	ldd	r24, Y+1	; 0x01
    46fc:	9a 81       	ldd	r25, Y+2	; 0x02
    46fe:	ab 81       	ldd	r26, Y+3	; 0x03
    4700:	bc 81       	ldd	r27, Y+4	; 0x04
    4702:	88 36       	cpi	r24, 0x68	; 104
    4704:	28 e9       	ldi	r18, 0x98	; 152
    4706:	92 07       	cpc	r25, r18
    4708:	2e ef       	ldi	r18, 0xFE	; 254
    470a:	a2 07       	cpc	r26, r18
    470c:	21 e0       	ldi	r18, 0x01	; 1
    470e:	b2 07       	cpc	r27, r18
    4710:	d8 f4       	brcc	.+54     	; 0x4748 <Clock_CheckIRInput+0x8c>
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	9a 81       	ldd	r25, Y+2	; 0x02
    4716:	ab 81       	ldd	r26, Y+3	; 0x03
    4718:	bc 81       	ldd	r27, Y+4	; 0x04
    471a:	8f 38       	cpi	r24, 0x8F	; 143
    471c:	20 e7       	ldi	r18, 0x70	; 112
    471e:	92 07       	cpc	r25, r18
    4720:	2e ef       	ldi	r18, 0xFE	; 254
    4722:	a2 07       	cpc	r26, r18
    4724:	21 e0       	ldi	r18, 0x01	; 1
    4726:	b2 07       	cpc	r27, r18
    4728:	09 f4       	brne	.+2      	; 0x472c <Clock_CheckIRInput+0x70>
    472a:	86 c0       	rjmp	.+268    	; 0x4838 <Clock_CheckIRInput+0x17c>
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	ab 81       	ldd	r26, Y+3	; 0x03
    4732:	bc 81       	ldd	r27, Y+4	; 0x04
    4734:	87 38       	cpi	r24, 0x87	; 135
    4736:	28 e7       	ldi	r18, 0x78	; 120
    4738:	92 07       	cpc	r25, r18
    473a:	2e ef       	ldi	r18, 0xFE	; 254
    473c:	a2 07       	cpc	r26, r18
    473e:	21 e0       	ldi	r18, 0x01	; 1
    4740:	b2 07       	cpc	r27, r18
    4742:	09 f4       	brne	.+2      	; 0x4746 <Clock_CheckIRInput+0x8a>
    4744:	a7 c0       	rjmp	.+334    	; 0x4894 <Clock_CheckIRInput+0x1d8>
    4746:	ac c0       	rjmp	.+344    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
    4748:	89 81       	ldd	r24, Y+1	; 0x01
    474a:	9a 81       	ldd	r25, Y+2	; 0x02
    474c:	ab 81       	ldd	r26, Y+3	; 0x03
    474e:	bc 81       	ldd	r27, Y+4	; 0x04
    4750:	87 32       	cpi	r24, 0x27	; 39
    4752:	28 ed       	ldi	r18, 0xD8	; 216
    4754:	92 07       	cpc	r25, r18
    4756:	2e ef       	ldi	r18, 0xFE	; 254
    4758:	a2 07       	cpc	r26, r18
    475a:	21 e0       	ldi	r18, 0x01	; 1
    475c:	b2 07       	cpc	r27, r18
    475e:	b9 f1       	breq	.+110    	; 0x47ce <Clock_CheckIRInput+0x112>
    4760:	89 81       	ldd	r24, Y+1	; 0x01
    4762:	9a 81       	ldd	r25, Y+2	; 0x02
    4764:	ab 81       	ldd	r26, Y+3	; 0x03
    4766:	bc 81       	ldd	r27, Y+4	; 0x04
    4768:	87 30       	cpi	r24, 0x07	; 7
    476a:	28 ef       	ldi	r18, 0xF8	; 248
    476c:	92 07       	cpc	r25, r18
    476e:	2e ef       	ldi	r18, 0xFE	; 254
    4770:	a2 07       	cpc	r26, r18
    4772:	21 e0       	ldi	r18, 0x01	; 1
    4774:	b2 07       	cpc	r27, r18
    4776:	09 f4       	brne	.+2      	; 0x477a <Clock_CheckIRInput+0xbe>
    4778:	77 c0       	rjmp	.+238    	; 0x4868 <Clock_CheckIRInput+0x1ac>
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	9a 81       	ldd	r25, Y+2	; 0x02
    477e:	ab 81       	ldd	r26, Y+3	; 0x03
    4780:	bc 81       	ldd	r27, Y+4	; 0x04
    4782:	8f 35       	cpi	r24, 0x5F	; 95
    4784:	20 ea       	ldi	r18, 0xA0	; 160
    4786:	92 07       	cpc	r25, r18
    4788:	2e ef       	ldi	r18, 0xFE	; 254
    478a:	a2 07       	cpc	r26, r18
    478c:	21 e0       	ldi	r18, 0x01	; 1
    478e:	b2 07       	cpc	r27, r18
    4790:	09 f0       	breq	.+2      	; 0x4794 <Clock_CheckIRInput+0xd8>
    4792:	86 c0       	rjmp	.+268    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
	case IR_UP:
		currentHour += HOURS_POINT;
    4794:	80 91 73 00 	lds	r24, 0x0073
    4798:	90 91 74 00 	lds	r25, 0x0074
    479c:	49 96       	adiw	r24, 0x19	; 25
    479e:	90 93 74 00 	sts	0x0074, r25
    47a2:	80 93 73 00 	sts	0x0073, r24
		if(currentHour > TOTAL_CYCLE_POINTS){
    47a6:	80 91 73 00 	lds	r24, 0x0073
    47aa:	90 91 74 00 	lds	r25, 0x0074
    47ae:	a1 e0       	ldi	r26, 0x01	; 1
    47b0:	8d 32       	cpi	r24, 0x2D	; 45
    47b2:	9a 07       	cpc	r25, r26
    47b4:	08 f4       	brcc	.+2      	; 0x47b8 <Clock_CheckIRInput+0xfc>
    47b6:	74 c0       	rjmp	.+232    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
			currentHour -= TOTAL_CYCLE_POINTS;
    47b8:	80 91 73 00 	lds	r24, 0x0073
    47bc:	90 91 74 00 	lds	r25, 0x0074
    47c0:	8c 52       	subi	r24, 0x2C	; 44
    47c2:	91 40       	sbci	r25, 0x01	; 1
    47c4:	90 93 74 00 	sts	0x0074, r25
    47c8:	80 93 73 00 	sts	0x0073, r24
    47cc:	69 c0       	rjmp	.+210    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		break;
	case IR_DOWN:
		if(currentHour > HOURS_POINT){
    47ce:	80 91 73 00 	lds	r24, 0x0073
    47d2:	90 91 74 00 	lds	r25, 0x0074
    47d6:	8a 31       	cpi	r24, 0x1A	; 26
    47d8:	91 05       	cpc	r25, r1
    47da:	50 f0       	brcs	.+20     	; 0x47f0 <Clock_CheckIRInput+0x134>
			currentHour -= HOURS_POINT;
    47dc:	80 91 73 00 	lds	r24, 0x0073
    47e0:	90 91 74 00 	lds	r25, 0x0074
    47e4:	49 97       	sbiw	r24, 0x19	; 25
    47e6:	90 93 74 00 	sts	0x0074, r25
    47ea:	80 93 73 00 	sts	0x0073, r24
    47ee:	58 c0       	rjmp	.+176    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		else{
			currentHour = TOTAL_CYCLE_POINTS;
    47f0:	8c e2       	ldi	r24, 0x2C	; 44
    47f2:	91 e0       	ldi	r25, 0x01	; 1
    47f4:	90 93 74 00 	sts	0x0074, r25
    47f8:	80 93 73 00 	sts	0x0073, r24
    47fc:	51 c0       	rjmp	.+162    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		break;
	case IR_SKIP_DASH:
		currentMinute += MINUTES_POINT;
    47fe:	80 91 71 00 	lds	r24, 0x0071
    4802:	90 91 72 00 	lds	r25, 0x0072
    4806:	05 96       	adiw	r24, 0x05	; 5
    4808:	90 93 72 00 	sts	0x0072, r25
    480c:	80 93 71 00 	sts	0x0071, r24
		if(currentMinute > TOTAL_CYCLE_POINTS){
    4810:	80 91 71 00 	lds	r24, 0x0071
    4814:	90 91 72 00 	lds	r25, 0x0072
    4818:	b1 e0       	ldi	r27, 0x01	; 1
    481a:	8d 32       	cpi	r24, 0x2D	; 45
    481c:	9b 07       	cpc	r25, r27
    481e:	08 f4       	brcc	.+2      	; 0x4822 <Clock_CheckIRInput+0x166>
    4820:	3f c0       	rjmp	.+126    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
			currentMinute -= TOTAL_CYCLE_POINTS;
    4822:	80 91 71 00 	lds	r24, 0x0071
    4826:	90 91 72 00 	lds	r25, 0x0072
    482a:	8c 52       	subi	r24, 0x2C	; 44
    482c:	91 40       	sbci	r25, 0x01	; 1
    482e:	90 93 72 00 	sts	0x0072, r25
    4832:	80 93 71 00 	sts	0x0071, r24
    4836:	34 c0       	rjmp	.+104    	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		break;
	case IR_REWIND_DASH:
		if(currentMinute > MINUTES_POINT){
    4838:	80 91 71 00 	lds	r24, 0x0071
    483c:	90 91 72 00 	lds	r25, 0x0072
    4840:	86 30       	cpi	r24, 0x06	; 6
    4842:	91 05       	cpc	r25, r1
    4844:	50 f0       	brcs	.+20     	; 0x485a <Clock_CheckIRInput+0x19e>
			currentMinute -= MINUTES_POINT;
    4846:	80 91 71 00 	lds	r24, 0x0071
    484a:	90 91 72 00 	lds	r25, 0x0072
    484e:	05 97       	sbiw	r24, 0x05	; 5
    4850:	90 93 72 00 	sts	0x0072, r25
    4854:	80 93 71 00 	sts	0x0071, r24
    4858:	23 c0       	rjmp	.+70     	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		else{
			currentMinute = TOTAL_CYCLE_POINTS;
    485a:	8c e2       	ldi	r24, 0x2C	; 44
    485c:	91 e0       	ldi	r25, 0x01	; 1
    485e:	90 93 72 00 	sts	0x0072, r25
    4862:	80 93 71 00 	sts	0x0071, r24
    4866:	1c c0       	rjmp	.+56     	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		}
		break;
	case IR_MODE:
		mode++;
    4868:	80 91 6e 01 	lds	r24, 0x016E
    486c:	8f 5f       	subi	r24, 0xFF	; 255
    486e:	80 93 6e 01 	sts	0x016E, r24
		if(mode>3) mode = ANALOG;
    4872:	80 91 6e 01 	lds	r24, 0x016E
    4876:	84 30       	cpi	r24, 0x04	; 4
    4878:	10 f0       	brcs	.+4      	; 0x487e <Clock_CheckIRInput+0x1c2>
    487a:	10 92 6e 01 	sts	0x016E, r1
		cycleDelay = clockCycleDelays[mode];
    487e:	80 91 6e 01 	lds	r24, 0x016E
    4882:	88 2f       	mov	r24, r24
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	fc 01       	movw	r30, r24
    4888:	ea 58       	subi	r30, 0x8A	; 138
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 81       	ld	r24, Z
    488e:	80 93 79 00 	sts	0x0079, r24
    4892:	06 c0       	rjmp	.+12     	; 0x48a0 <Clock_CheckIRInput+0x1e4>
		break;
	case IR_POWER:
		Toggle_Bit(power,0);
    4894:	80 91 6d 01 	lds	r24, 0x016D
    4898:	91 e0       	ldi	r25, 0x01	; 1
    489a:	89 27       	eor	r24, r25
    489c:	80 93 6d 01 	sts	0x016D, r24
		break;
	}
}
    48a0:	0f 90       	pop	r0
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	cf 91       	pop	r28
    48aa:	df 91       	pop	r29
    48ac:	08 95       	ret

000048ae <Clock_DisplayAnalogHourNumber>:

void Clock_DisplayAnalogHourNumber(){
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	00 d0       	rcall	.+0      	; 0x48b4 <Clock_DisplayAnalogHourNumber+0x6>
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
	switch(clockPointCounter){
    48b8:	80 91 69 00 	lds	r24, 0x0069
    48bc:	90 91 6a 00 	lds	r25, 0x006A
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	89 83       	std	Y+1, r24	; 0x01
    48c4:	89 81       	ldd	r24, Y+1	; 0x01
    48c6:	9a 81       	ldd	r25, Y+2	; 0x02
    48c8:	84 39       	cpi	r24, 0x94	; 148
    48ca:	91 05       	cpc	r25, r1
    48cc:	09 f4       	brne	.+2      	; 0x48d0 <Clock_DisplayAnalogHourNumber+0x22>
    48ce:	85 c0       	rjmp	.+266    	; 0x49da <Clock_DisplayAnalogHourNumber+0x12c>
    48d0:	89 81       	ldd	r24, Y+1	; 0x01
    48d2:	9a 81       	ldd	r25, Y+2	; 0x02
    48d4:	85 39       	cpi	r24, 0x95	; 149
    48d6:	91 05       	cpc	r25, r1
    48d8:	e8 f5       	brcc	.+122    	; 0x4954 <Clock_DisplayAnalogHourNumber+0xa6>
    48da:	89 81       	ldd	r24, Y+1	; 0x01
    48dc:	9a 81       	ldd	r25, Y+2	; 0x02
    48de:	8b 34       	cpi	r24, 0x4B	; 75
    48e0:	91 05       	cpc	r25, r1
    48e2:	28 f5       	brcc	.+74     	; 0x492e <Clock_DisplayAnalogHourNumber+0x80>
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	9a 81       	ldd	r25, Y+2	; 0x02
    48e8:	87 34       	cpi	r24, 0x47	; 71
    48ea:	91 05       	cpc	r25, r1
    48ec:	08 f0       	brcs	.+2      	; 0x48f0 <Clock_DisplayAnalogHourNumber+0x42>
    48ee:	81 c0       	rjmp	.+258    	; 0x49f2 <Clock_DisplayAnalogHourNumber+0x144>
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	9a 81       	ldd	r25, Y+2	; 0x02
    48f4:	84 30       	cpi	r24, 0x04	; 4
    48f6:	91 05       	cpc	r25, r1
    48f8:	68 f4       	brcc	.+26     	; 0x4914 <Clock_DisplayAnalogHourNumber+0x66>
    48fa:	89 81       	ldd	r24, Y+1	; 0x01
    48fc:	9a 81       	ldd	r25, Y+2	; 0x02
    48fe:	82 30       	cpi	r24, 0x02	; 2
    4900:	91 05       	cpc	r25, r1
    4902:	08 f0       	brcs	.+2      	; 0x4906 <Clock_DisplayAnalogHourNumber+0x58>
    4904:	64 c0       	rjmp	.+200    	; 0x49ce <Clock_DisplayAnalogHourNumber+0x120>
    4906:	89 81       	ldd	r24, Y+1	; 0x01
    4908:	9a 81       	ldd	r25, Y+2	; 0x02
    490a:	81 30       	cpi	r24, 0x01	; 1
    490c:	91 05       	cpc	r25, r1
    490e:	09 f4       	brne	.+2      	; 0x4912 <Clock_DisplayAnalogHourNumber+0x64>
    4910:	58 c0       	rjmp	.+176    	; 0x49c2 <Clock_DisplayAnalogHourNumber+0x114>
    4912:	80 c0       	rjmp	.+256    	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
    4914:	89 81       	ldd	r24, Y+1	; 0x01
    4916:	9a 81       	ldd	r25, Y+2	; 0x02
    4918:	84 30       	cpi	r24, 0x04	; 4
    491a:	91 05       	cpc	r25, r1
    491c:	09 f4       	brne	.+2      	; 0x4920 <Clock_DisplayAnalogHourNumber+0x72>
    491e:	5d c0       	rjmp	.+186    	; 0x49da <Clock_DisplayAnalogHourNumber+0x12c>
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	9a 81       	ldd	r25, Y+2	; 0x02
    4924:	86 34       	cpi	r24, 0x46	; 70
    4926:	91 05       	cpc	r25, r1
    4928:	09 f4       	brne	.+2      	; 0x492c <Clock_DisplayAnalogHourNumber+0x7e>
    492a:	5d c0       	rjmp	.+186    	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    492c:	73 c0       	rjmp	.+230    	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	9a 81       	ldd	r25, Y+2	; 0x02
    4932:	80 35       	cpi	r24, 0x50	; 80
    4934:	91 05       	cpc	r25, r1
    4936:	38 f4       	brcc	.+14     	; 0x4946 <Clock_DisplayAnalogHourNumber+0x98>
    4938:	89 81       	ldd	r24, Y+1	; 0x01
    493a:	9a 81       	ldd	r25, Y+2	; 0x02
    493c:	8c 34       	cpi	r24, 0x4C	; 76
    493e:	91 05       	cpc	r25, r1
    4940:	08 f0       	brcs	.+2      	; 0x4944 <Clock_DisplayAnalogHourNumber+0x96>
    4942:	57 c0       	rjmp	.+174    	; 0x49f2 <Clock_DisplayAnalogHourNumber+0x144>
    4944:	50 c0       	rjmp	.+160    	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    4946:	89 81       	ldd	r24, Y+1	; 0x01
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	80 35       	cpi	r24, 0x50	; 80
    494c:	91 05       	cpc	r25, r1
    494e:	09 f4       	brne	.+2      	; 0x4952 <Clock_DisplayAnalogHourNumber+0xa4>
    4950:	4a c0       	rjmp	.+148    	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    4952:	60 c0       	rjmp	.+192    	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	9a 81       	ldd	r25, Y+2	; 0x02
    4958:	81 3e       	cpi	r24, 0xE1	; 225
    495a:	91 05       	cpc	r25, r1
    495c:	b0 f4       	brcc	.+44     	; 0x498a <Clock_DisplayAnalogHourNumber+0xdc>
    495e:	89 81       	ldd	r24, Y+1	; 0x01
    4960:	9a 81       	ldd	r25, Y+2	; 0x02
    4962:	8d 3d       	cpi	r24, 0xDD	; 221
    4964:	91 05       	cpc	r25, r1
    4966:	08 f0       	brcs	.+2      	; 0x496a <Clock_DisplayAnalogHourNumber+0xbc>
    4968:	4a c0       	rjmp	.+148    	; 0x49fe <Clock_DisplayAnalogHourNumber+0x150>
    496a:	89 81       	ldd	r24, Y+1	; 0x01
    496c:	9a 81       	ldd	r25, Y+2	; 0x02
    496e:	88 39       	cpi	r24, 0x98	; 152
    4970:	91 05       	cpc	r25, r1
    4972:	09 f1       	breq	.+66     	; 0x49b6 <Clock_DisplayAnalogHourNumber+0x108>
    4974:	89 81       	ldd	r24, Y+1	; 0x01
    4976:	9a 81       	ldd	r25, Y+2	; 0x02
    4978:	88 39       	cpi	r24, 0x98	; 152
    497a:	91 05       	cpc	r25, r1
    497c:	40 f1       	brcs	.+80     	; 0x49ce <Clock_DisplayAnalogHourNumber+0x120>
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	9a 81       	ldd	r25, Y+2	; 0x02
    4982:	8c 3d       	cpi	r24, 0xDC	; 220
    4984:	91 05       	cpc	r25, r1
    4986:	79 f1       	breq	.+94     	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    4988:	45 c0       	rjmp	.+138    	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	9a 81       	ldd	r25, Y+2	; 0x02
    498e:	86 3e       	cpi	r24, 0xE6	; 230
    4990:	91 05       	cpc	r25, r1
    4992:	30 f4       	brcc	.+12     	; 0x49a0 <Clock_DisplayAnalogHourNumber+0xf2>
    4994:	89 81       	ldd	r24, Y+1	; 0x01
    4996:	9a 81       	ldd	r25, Y+2	; 0x02
    4998:	82 3e       	cpi	r24, 0xE2	; 226
    499a:	91 05       	cpc	r25, r1
    499c:	b0 f5       	brcc	.+108    	; 0x4a0a <Clock_DisplayAnalogHourNumber+0x15c>
    499e:	23 c0       	rjmp	.+70     	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    49a0:	89 81       	ldd	r24, Y+1	; 0x01
    49a2:	9a 81       	ldd	r25, Y+2	; 0x02
    49a4:	86 3e       	cpi	r24, 0xE6	; 230
    49a6:	91 05       	cpc	r25, r1
    49a8:	f1 f0       	breq	.+60     	; 0x49e6 <Clock_DisplayAnalogHourNumber+0x138>
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	9a 81       	ldd	r25, Y+2	; 0x02
    49ae:	21 e0       	ldi	r18, 0x01	; 1
    49b0:	88 32       	cpi	r24, 0x28	; 40
    49b2:	92 07       	cpc	r25, r18
    49b4:	79 f5       	brne	.+94     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN4,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN2,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN1,High);
		PORTB_Values |= 0x3E;
    49b6:	80 91 77 01 	lds	r24, 0x0177
    49ba:	8e 63       	ori	r24, 0x3E	; 62
    49bc:	80 93 77 01 	sts	0x0177, r24
    49c0:	29 c0       	rjmp	.+82     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 1: //Display first 2 column 0x2E
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN2,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN1,High);
		PORTB_Values |= 0x2E;
    49c2:	80 91 77 01 	lds	r24, 0x0177
    49c6:	8e 62       	ori	r24, 0x2E	; 46
    49c8:	80 93 77 01 	sts	0x0177, r24
    49cc:	23 c0       	rjmp	.+70     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 150: //Display third 6 column 0x2A
	case 151: //Display fourth 6 column 0x2A
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN1,High);
		PORTB_Values |= 0x2A;
    49ce:	80 91 77 01 	lds	r24, 0x0177
    49d2:	8a 62       	ori	r24, 0x2A	; 42
    49d4:	80 93 77 01 	sts	0x0177, r24
    49d8:	1d c0       	rjmp	.+58     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 148: //Display first 6 column 0x3A
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN4,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN1,High);
		PORTB_Values |=0x3A;
    49da:	80 91 77 01 	lds	r24, 0x0177
    49de:	8a 63       	ori	r24, 0x3A	; 58
    49e0:	80 93 77 01 	sts	0x0177, r24
    49e4:	17 c0       	rjmp	.+46     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 225://Display sixth 9 row 0x38
	case 230://Display eleventh 9 row 0x38
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN4,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		PORTB_Values |=0x38;
    49e6:	80 91 77 01 	lds	r24, 0x0177
    49ea:	88 63       	ori	r24, 0x38	; 56
    49ec:	80 93 77 01 	sts	0x0177, r24
    49f0:	11 c0       	rjmp	.+34     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 76: //Display seventh 3 row 0x20
	case 77: //Display eighth 3 row 0x20
	case 78: //Display ninth 3 row 0x20
	case 79: //Display tenth 3 row 0x20
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		PORTB_Values |=0x20;
    49f2:	80 91 77 01 	lds	r24, 0x0177
    49f6:	80 62       	ori	r24, 0x20	; 32
    49f8:	80 93 77 01 	sts	0x0177, r24
    49fc:	0b c0       	rjmp	.+22     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 221://Display second 9 row 0x08
	case 222://Display third 9 row 0x08
	case 223://Display fourth 9 row 0x08
	case 224://Display fifth 9 row 0x08
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		PORTB_Values |=0x08;
    49fe:	80 91 77 01 	lds	r24, 0x0177
    4a02:	88 60       	ori	r24, 0x08	; 8
    4a04:	80 93 77 01 	sts	0x0177, r24
    4a08:	05 c0       	rjmp	.+10     	; 0x4a14 <Clock_DisplayAnalogHourNumber+0x166>
	case 227://Display eighth 9 row 0x28
	case 228://Display ninth 9 row 0x28
	case 229://Display tenth 9 row 0x28
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN5,High);
		//				DIO_u8SetPinValue(DIO_GroupB,DIO_PIN3,High);
		PORTB_Values |=0x28;
    4a0a:	80 91 77 01 	lds	r24, 0x0177
    4a0e:	88 62       	ori	r24, 0x28	; 40
    4a10:	80 93 77 01 	sts	0x0177, r24
		break;
	}
}
    4a14:	0f 90       	pop	r0
    4a16:	0f 90       	pop	r0
    4a18:	cf 91       	pop	r28
    4a1a:	df 91       	pop	r29
    4a1c:	08 95       	ret

00004a1e <Clock_DisplayArrow>:

void Clock_DisplayArrow(u16 position,u8 A_Tipvalue, u8 A_Armvalue,u8 B_Tipvalue, u8 B_Armvalue){
    4a1e:	0f 93       	push	r16
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	00 d0       	rcall	.+0      	; 0x4a26 <Clock_DisplayArrow+0x8>
    4a26:	00 d0       	rcall	.+0      	; 0x4a28 <Clock_DisplayArrow+0xa>
    4a28:	00 d0       	rcall	.+0      	; 0x4a2a <Clock_DisplayArrow+0xc>
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	9a 83       	std	Y+2, r25	; 0x02
    4a30:	89 83       	std	Y+1, r24	; 0x01
    4a32:	6b 83       	std	Y+3, r22	; 0x03
    4a34:	4c 83       	std	Y+4, r20	; 0x04
    4a36:	2d 83       	std	Y+5, r18	; 0x05
    4a38:	0e 83       	std	Y+6, r16	; 0x06
	if(clockPointCounter == (position - 1) || clockPointCounter == (position + 1) || (clockPointCounter + 299) == position || (clockPointCounter - 299) == position
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a3e:	9c 01       	movw	r18, r24
    4a40:	21 50       	subi	r18, 0x01	; 1
    4a42:	30 40       	sbci	r19, 0x00	; 0
    4a44:	80 91 69 00 	lds	r24, 0x0069
    4a48:	90 91 6a 00 	lds	r25, 0x006A
    4a4c:	28 17       	cp	r18, r24
    4a4e:	39 07       	cpc	r19, r25
    4a50:	09 f4       	brne	.+2      	; 0x4a54 <Clock_DisplayArrow+0x36>
    4a52:	55 c0       	rjmp	.+170    	; 0x4afe <Clock_DisplayArrow+0xe0>
    4a54:	89 81       	ldd	r24, Y+1	; 0x01
    4a56:	9a 81       	ldd	r25, Y+2	; 0x02
    4a58:	9c 01       	movw	r18, r24
    4a5a:	2f 5f       	subi	r18, 0xFF	; 255
    4a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5e:	80 91 69 00 	lds	r24, 0x0069
    4a62:	90 91 6a 00 	lds	r25, 0x006A
    4a66:	28 17       	cp	r18, r24
    4a68:	39 07       	cpc	r19, r25
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <Clock_DisplayArrow+0x50>
    4a6c:	48 c0       	rjmp	.+144    	; 0x4afe <Clock_DisplayArrow+0xe0>
    4a6e:	80 91 69 00 	lds	r24, 0x0069
    4a72:	90 91 6a 00 	lds	r25, 0x006A
    4a76:	9c 01       	movw	r18, r24
    4a78:	25 5d       	subi	r18, 0xD5	; 213
    4a7a:	3e 4f       	sbci	r19, 0xFE	; 254
    4a7c:	89 81       	ldd	r24, Y+1	; 0x01
    4a7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a80:	28 17       	cp	r18, r24
    4a82:	39 07       	cpc	r19, r25
    4a84:	e1 f1       	breq	.+120    	; 0x4afe <Clock_DisplayArrow+0xe0>
    4a86:	80 91 69 00 	lds	r24, 0x0069
    4a8a:	90 91 6a 00 	lds	r25, 0x006A
    4a8e:	9c 01       	movw	r18, r24
    4a90:	2b 52       	subi	r18, 0x2B	; 43
    4a92:	31 40       	sbci	r19, 0x01	; 1
    4a94:	89 81       	ldd	r24, Y+1	; 0x01
    4a96:	9a 81       	ldd	r25, Y+2	; 0x02
    4a98:	28 17       	cp	r18, r24
    4a9a:	39 07       	cpc	r19, r25
    4a9c:	81 f1       	breq	.+96     	; 0x4afe <Clock_DisplayArrow+0xe0>
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	9c 01       	movw	r18, r24
    4aa4:	22 50       	subi	r18, 0x02	; 2
    4aa6:	30 40       	sbci	r19, 0x00	; 0
    4aa8:	80 91 69 00 	lds	r24, 0x0069
    4aac:	90 91 6a 00 	lds	r25, 0x006A
    4ab0:	28 17       	cp	r18, r24
    4ab2:	39 07       	cpc	r19, r25
    4ab4:	21 f1       	breq	.+72     	; 0x4afe <Clock_DisplayArrow+0xe0>
    4ab6:	89 81       	ldd	r24, Y+1	; 0x01
    4ab8:	9a 81       	ldd	r25, Y+2	; 0x02
    4aba:	9c 01       	movw	r18, r24
    4abc:	2e 5f       	subi	r18, 0xFE	; 254
    4abe:	3f 4f       	sbci	r19, 0xFF	; 255
    4ac0:	80 91 69 00 	lds	r24, 0x0069
    4ac4:	90 91 6a 00 	lds	r25, 0x006A
    4ac8:	28 17       	cp	r18, r24
    4aca:	39 07       	cpc	r19, r25
    4acc:	c1 f0       	breq	.+48     	; 0x4afe <Clock_DisplayArrow+0xe0>
    4ace:	80 91 69 00 	lds	r24, 0x0069
    4ad2:	90 91 6a 00 	lds	r25, 0x006A
    4ad6:	9c 01       	movw	r18, r24
    4ad8:	26 5d       	subi	r18, 0xD6	; 214
    4ada:	3e 4f       	sbci	r19, 0xFE	; 254
    4adc:	89 81       	ldd	r24, Y+1	; 0x01
    4ade:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae0:	28 17       	cp	r18, r24
    4ae2:	39 07       	cpc	r19, r25
    4ae4:	61 f0       	breq	.+24     	; 0x4afe <Clock_DisplayArrow+0xe0>
    4ae6:	80 91 69 00 	lds	r24, 0x0069
    4aea:	90 91 6a 00 	lds	r25, 0x006A
    4aee:	9c 01       	movw	r18, r24
    4af0:	2a 52       	subi	r18, 0x2A	; 42
    4af2:	31 40       	sbci	r19, 0x01	; 1
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	28 17       	cp	r18, r24
    4afa:	39 07       	cpc	r19, r25
    4afc:	69 f4       	brne	.+26     	; 0x4b18 <Clock_DisplayArrow+0xfa>
			|| clockPointCounter == (position - 2) || clockPointCounter == (position + 2) || (clockPointCounter + 298) == position || (clockPointCounter - 298) == position){
		PORTA_Values |= A_Tipvalue;
    4afe:	90 91 78 01 	lds	r25, 0x0178
    4b02:	8b 81       	ldd	r24, Y+3	; 0x03
    4b04:	89 2b       	or	r24, r25
    4b06:	80 93 78 01 	sts	0x0178, r24
		PORTB_Values |= B_Tipvalue;
    4b0a:	90 91 77 01 	lds	r25, 0x0177
    4b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b10:	89 2b       	or	r24, r25
    4b12:	80 93 77 01 	sts	0x0177, r24
    4b16:	15 c0       	rjmp	.+42     	; 0x4b42 <Clock_DisplayArrow+0x124>
	}
	else if(clockPointCounter == position){
    4b18:	20 91 69 00 	lds	r18, 0x0069
    4b1c:	30 91 6a 00 	lds	r19, 0x006A
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	9a 81       	ldd	r25, Y+2	; 0x02
    4b24:	28 17       	cp	r18, r24
    4b26:	39 07       	cpc	r19, r25
    4b28:	61 f4       	brne	.+24     	; 0x4b42 <Clock_DisplayArrow+0x124>
		PORTA_Values |= A_Armvalue;
    4b2a:	90 91 78 01 	lds	r25, 0x0178
    4b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b30:	89 2b       	or	r24, r25
    4b32:	80 93 78 01 	sts	0x0178, r24
		PORTB_Values |= B_Armvalue;
    4b36:	90 91 77 01 	lds	r25, 0x0177
    4b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b3c:	89 2b       	or	r24, r25
    4b3e:	80 93 77 01 	sts	0x0177, r24
	}
}
    4b42:	26 96       	adiw	r28, 0x06	; 6
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	f8 94       	cli
    4b48:	de bf       	out	0x3e, r29	; 62
    4b4a:	0f be       	out	0x3f, r0	; 63
    4b4c:	cd bf       	out	0x3d, r28	; 61
    4b4e:	cf 91       	pop	r28
    4b50:	df 91       	pop	r29
    4b52:	0f 91       	pop	r16
    4b54:	08 95       	ret

00004b56 <Clock_DisplayMiniDigits>:

void Clock_DisplayMiniDigits(){
    4b56:	df 93       	push	r29
    4b58:	cf 93       	push	r28
    4b5a:	00 d0       	rcall	.+0      	; 0x4b5c <Clock_DisplayMiniDigits+0x6>
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
	switch(clockPointCounter){
    4b60:	80 91 69 00 	lds	r24, 0x0069
    4b64:	90 91 6a 00 	lds	r25, 0x006A
    4b68:	9a 83       	std	Y+2, r25	; 0x02
    4b6a:	89 83       	std	Y+1, r24	; 0x01
    4b6c:	89 81       	ldd	r24, Y+1	; 0x01
    4b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b70:	8a 39       	cpi	r24, 0x9A	; 154
    4b72:	91 05       	cpc	r25, r1
    4b74:	c8 f5       	brcc	.+114    	; 0x4be8 <Clock_DisplayMiniDigits+0x92>
    4b76:	89 81       	ldd	r24, Y+1	; 0x01
    4b78:	9a 81       	ldd	r25, Y+2	; 0x02
    4b7a:	83 39       	cpi	r24, 0x93	; 147
    4b7c:	91 05       	cpc	r25, r1
    4b7e:	08 f0       	brcs	.+2      	; 0x4b82 <Clock_DisplayMiniDigits+0x2c>
    4b80:	36 c1       	rjmp	.+620    	; 0x4dee <Clock_DisplayMiniDigits+0x298>
    4b82:	89 81       	ldd	r24, Y+1	; 0x01
    4b84:	9a 81       	ldd	r25, Y+2	; 0x02
    4b86:	83 31       	cpi	r24, 0x13	; 19
    4b88:	91 05       	cpc	r25, r1
    4b8a:	c8 f4       	brcc	.+50     	; 0x4bbe <Clock_DisplayMiniDigits+0x68>
    4b8c:	89 81       	ldd	r24, Y+1	; 0x01
    4b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b90:	8e 30       	cpi	r24, 0x0E	; 14
    4b92:	91 05       	cpc	r25, r1
    4b94:	08 f0       	brcs	.+2      	; 0x4b98 <Clock_DisplayMiniDigits+0x42>
    4b96:	df c0       	rjmp	.+446    	; 0x4d56 <Clock_DisplayMiniDigits+0x200>
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    4b9c:	82 30       	cpi	r24, 0x02	; 2
    4b9e:	91 05       	cpc	r25, r1
    4ba0:	08 f4       	brcc	.+2      	; 0x4ba4 <Clock_DisplayMiniDigits+0x4e>
    4ba2:	44 c1       	rjmp	.+648    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4ba4:	89 81       	ldd	r24, Y+1	; 0x01
    4ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba8:	87 30       	cpi	r24, 0x07	; 7
    4baa:	91 05       	cpc	r25, r1
    4bac:	08 f4       	brcc	.+2      	; 0x4bb0 <Clock_DisplayMiniDigits+0x5a>
    4bae:	b5 c0       	rjmp	.+362    	; 0x4d1a <Clock_DisplayMiniDigits+0x1c4>
    4bb0:	89 81       	ldd	r24, Y+1	; 0x01
    4bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb4:	8a 30       	cpi	r24, 0x0A	; 10
    4bb6:	91 05       	cpc	r25, r1
    4bb8:	09 f4       	brne	.+2      	; 0x4bbc <Clock_DisplayMiniDigits+0x66>
    4bba:	8b c0       	rjmp	.+278    	; 0x4cd2 <Clock_DisplayMiniDigits+0x17c>
    4bbc:	37 c1       	rjmp	.+622    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
    4bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc2:	86 31       	cpi	r24, 0x16	; 22
    4bc4:	91 05       	cpc	r25, r1
    4bc6:	08 f4       	brcc	.+2      	; 0x4bca <Clock_DisplayMiniDigits+0x74>
    4bc8:	31 c1       	rjmp	.+610    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4bca:	89 81       	ldd	r24, Y+1	; 0x01
    4bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bce:	8b 31       	cpi	r24, 0x1B	; 27
    4bd0:	91 05       	cpc	r25, r1
    4bd2:	08 f4       	brcc	.+2      	; 0x4bd6 <Clock_DisplayMiniDigits+0x80>
    4bd4:	de c0       	rjmp	.+444    	; 0x4d92 <Clock_DisplayMiniDigits+0x23c>
    4bd6:	89 81       	ldd	r24, Y+1	; 0x01
    4bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bda:	89 58       	subi	r24, 0x89	; 137
    4bdc:	90 40       	sbci	r25, 0x00	; 0
    4bde:	87 30       	cpi	r24, 0x07	; 7
    4be0:	91 05       	cpc	r25, r1
    4be2:	08 f0       	brcs	.+2      	; 0x4be6 <Clock_DisplayMiniDigits+0x90>
    4be4:	23 c1       	rjmp	.+582    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4be6:	f3 c0       	rjmp	.+486    	; 0x4dce <Clock_DisplayMiniDigits+0x278>
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	21 e0       	ldi	r18, 0x01	; 1
    4bee:	8f 31       	cpi	r24, 0x1F	; 31
    4bf0:	92 07       	cpc	r25, r18
    4bf2:	e0 f4       	brcc	.+56     	; 0x4c2c <Clock_DisplayMiniDigits+0xd6>
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
    4bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bf8:	21 e0       	ldi	r18, 0x01	; 1
    4bfa:	8a 31       	cpi	r24, 0x1A	; 26
    4bfc:	92 07       	cpc	r25, r18
    4bfe:	08 f0       	brcs	.+2      	; 0x4c02 <Clock_DisplayMiniDigits+0xac>
    4c00:	4a c0       	rjmp	.+148    	; 0x4c96 <Clock_DisplayMiniDigits+0x140>
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	9a 81       	ldd	r25, Y+2	; 0x02
    4c06:	8d 39       	cpi	r24, 0x9D	; 157
    4c08:	91 05       	cpc	r25, r1
    4c0a:	08 f4       	brcc	.+2      	; 0x4c0e <Clock_DisplayMiniDigits+0xb8>
    4c0c:	0f c1       	rjmp	.+542    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4c0e:	89 81       	ldd	r24, Y+1	; 0x01
    4c10:	9a 81       	ldd	r25, Y+2	; 0x02
    4c12:	84 3a       	cpi	r24, 0xA4	; 164
    4c14:	91 05       	cpc	r25, r1
    4c16:	08 f4       	brcc	.+2      	; 0x4c1a <Clock_DisplayMiniDigits+0xc4>
    4c18:	fa c0       	rjmp	.+500    	; 0x4e0e <Clock_DisplayMiniDigits+0x2b8>
    4c1a:	89 81       	ldd	r24, Y+1	; 0x01
    4c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c1e:	82 51       	subi	r24, 0x12	; 18
    4c20:	91 40       	sbci	r25, 0x01	; 1
    4c22:	85 30       	cpi	r24, 0x05	; 5
    4c24:	91 05       	cpc	r25, r1
    4c26:	08 f0       	brcs	.+2      	; 0x4c2a <Clock_DisplayMiniDigits+0xd4>
    4c28:	01 c1       	rjmp	.+514    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4c2a:	17 c0       	rjmp	.+46     	; 0x4c5a <Clock_DisplayMiniDigits+0x104>
    4c2c:	89 81       	ldd	r24, Y+1	; 0x01
    4c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c30:	21 e0       	ldi	r18, 0x01	; 1
    4c32:	82 32       	cpi	r24, 0x22	; 34
    4c34:	92 07       	cpc	r25, r18
    4c36:	09 f4       	brne	.+2      	; 0x4c3a <Clock_DisplayMiniDigits+0xe4>
    4c38:	4c c0       	rjmp	.+152    	; 0x4cd2 <Clock_DisplayMiniDigits+0x17c>
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3e:	21 e0       	ldi	r18, 0x01	; 1
    4c40:	82 32       	cpi	r24, 0x22	; 34
    4c42:	92 07       	cpc	r25, r18
    4c44:	08 f4       	brcc	.+2      	; 0x4c48 <Clock_DisplayMiniDigits+0xf2>
    4c46:	f2 c0       	rjmp	.+484    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4c48:	89 81       	ldd	r24, Y+1	; 0x01
    4c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c4c:	86 52       	subi	r24, 0x26	; 38
    4c4e:	91 40       	sbci	r25, 0x01	; 1
    4c50:	85 30       	cpi	r24, 0x05	; 5
    4c52:	91 05       	cpc	r25, r1
    4c54:	08 f0       	brcs	.+2      	; 0x4c58 <Clock_DisplayMiniDigits+0x102>
    4c56:	ea c0       	rjmp	.+468    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
    4c58:	42 c0       	rjmp	.+132    	; 0x4cde <Clock_DisplayMiniDigits+0x188>
	//Hours left number
	case 274: case 275: case 276: case 277: case 278:
		PORTB_Values |= miniDigitalMatrix[hoursLeftNumber][clockPointCounter-274];
    4c5a:	80 91 5f 01 	lds	r24, 0x015F
    4c5e:	28 2f       	mov	r18, r24
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	80 91 69 00 	lds	r24, 0x0069
    4c66:	90 91 6a 00 	lds	r25, 0x006A
    4c6a:	ac 01       	movw	r20, r24
    4c6c:	42 51       	subi	r20, 0x12	; 18
    4c6e:	51 40       	sbci	r21, 0x01	; 1
    4c70:	c9 01       	movw	r24, r18
    4c72:	88 0f       	add	r24, r24
    4c74:	99 1f       	adc	r25, r25
    4c76:	88 0f       	add	r24, r24
    4c78:	99 1f       	adc	r25, r25
    4c7a:	82 0f       	add	r24, r18
    4c7c:	93 1f       	adc	r25, r19
    4c7e:	84 0f       	add	r24, r20
    4c80:	95 1f       	adc	r25, r21
    4c82:	fc 01       	movw	r30, r24
    4c84:	e6 58       	subi	r30, 0x86	; 134
    4c86:	ff 4f       	sbci	r31, 0xFF	; 255
    4c88:	90 81       	ld	r25, Z
    4c8a:	80 91 77 01 	lds	r24, 0x0177
    4c8e:	89 2b       	or	r24, r25
    4c90:	80 93 77 01 	sts	0x0177, r24
    4c94:	cb c0       	rjmp	.+406    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Hours right number
	case 282: case 283: case 284: case 285: case 286:
		PORTB_Values |= miniDigitalMatrix[hoursRightNumber][clockPointCounter-282];
    4c96:	80 91 60 01 	lds	r24, 0x0160
    4c9a:	28 2f       	mov	r18, r24
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	80 91 69 00 	lds	r24, 0x0069
    4ca2:	90 91 6a 00 	lds	r25, 0x006A
    4ca6:	ac 01       	movw	r20, r24
    4ca8:	4a 51       	subi	r20, 0x1A	; 26
    4caa:	51 40       	sbci	r21, 0x01	; 1
    4cac:	c9 01       	movw	r24, r18
    4cae:	88 0f       	add	r24, r24
    4cb0:	99 1f       	adc	r25, r25
    4cb2:	88 0f       	add	r24, r24
    4cb4:	99 1f       	adc	r25, r25
    4cb6:	82 0f       	add	r24, r18
    4cb8:	93 1f       	adc	r25, r19
    4cba:	84 0f       	add	r24, r20
    4cbc:	95 1f       	adc	r25, r21
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	e6 58       	subi	r30, 0x86	; 134
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	90 81       	ld	r25, Z
    4cc6:	80 91 77 01 	lds	r24, 0x0177
    4cca:	89 2b       	or	r24, r25
    4ccc:	80 93 77 01 	sts	0x0177, r24
    4cd0:	ad c0       	rjmp	.+346    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Colons
	case 290: case 10:
		PORTB_Values |= 0x50;
    4cd2:	80 91 77 01 	lds	r24, 0x0177
    4cd6:	80 65       	ori	r24, 0x50	; 80
    4cd8:	80 93 77 01 	sts	0x0177, r24
    4cdc:	a7 c0       	rjmp	.+334    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Minutes left number
	case 294: case 295: case 296: case 297: case 298:
		PORTB_Values |= miniDigitalMatrix[minutesLeftNumber][clockPointCounter-294];
    4cde:	80 91 61 01 	lds	r24, 0x0161
    4ce2:	28 2f       	mov	r18, r24
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
    4ce6:	80 91 69 00 	lds	r24, 0x0069
    4cea:	90 91 6a 00 	lds	r25, 0x006A
    4cee:	ac 01       	movw	r20, r24
    4cf0:	46 52       	subi	r20, 0x26	; 38
    4cf2:	51 40       	sbci	r21, 0x01	; 1
    4cf4:	c9 01       	movw	r24, r18
    4cf6:	88 0f       	add	r24, r24
    4cf8:	99 1f       	adc	r25, r25
    4cfa:	88 0f       	add	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	82 0f       	add	r24, r18
    4d00:	93 1f       	adc	r25, r19
    4d02:	84 0f       	add	r24, r20
    4d04:	95 1f       	adc	r25, r21
    4d06:	fc 01       	movw	r30, r24
    4d08:	e6 58       	subi	r30, 0x86	; 134
    4d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d0c:	90 81       	ld	r25, Z
    4d0e:	80 91 77 01 	lds	r24, 0x0177
    4d12:	89 2b       	or	r24, r25
    4d14:	80 93 77 01 	sts	0x0177, r24
    4d18:	89 c0       	rjmp	.+274    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Minutes right number
	case 2: case 3: case 4: case 5: case 6:
		PORTB_Values |= miniDigitalMatrix[minutesRightNumber][clockPointCounter-2];
    4d1a:	80 91 62 01 	lds	r24, 0x0162
    4d1e:	28 2f       	mov	r18, r24
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	80 91 69 00 	lds	r24, 0x0069
    4d26:	90 91 6a 00 	lds	r25, 0x006A
    4d2a:	ac 01       	movw	r20, r24
    4d2c:	42 50       	subi	r20, 0x02	; 2
    4d2e:	50 40       	sbci	r21, 0x00	; 0
    4d30:	c9 01       	movw	r24, r18
    4d32:	88 0f       	add	r24, r24
    4d34:	99 1f       	adc	r25, r25
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	82 0f       	add	r24, r18
    4d3c:	93 1f       	adc	r25, r19
    4d3e:	84 0f       	add	r24, r20
    4d40:	95 1f       	adc	r25, r21
    4d42:	fc 01       	movw	r30, r24
    4d44:	e6 58       	subi	r30, 0x86	; 134
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	90 81       	ld	r25, Z
    4d4a:	80 91 77 01 	lds	r24, 0x0177
    4d4e:	89 2b       	or	r24, r25
    4d50:	80 93 77 01 	sts	0x0177, r24
    4d54:	6b c0       	rjmp	.+214    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Seconds left number
	case 14: case 15: case 16: case 17: case 18:
		PORTB_Values |= miniDigitalMatrix[secondsLeftNumber][clockPointCounter-14];
    4d56:	80 91 63 01 	lds	r24, 0x0163
    4d5a:	28 2f       	mov	r18, r24
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	80 91 69 00 	lds	r24, 0x0069
    4d62:	90 91 6a 00 	lds	r25, 0x006A
    4d66:	ac 01       	movw	r20, r24
    4d68:	4e 50       	subi	r20, 0x0E	; 14
    4d6a:	50 40       	sbci	r21, 0x00	; 0
    4d6c:	c9 01       	movw	r24, r18
    4d6e:	88 0f       	add	r24, r24
    4d70:	99 1f       	adc	r25, r25
    4d72:	88 0f       	add	r24, r24
    4d74:	99 1f       	adc	r25, r25
    4d76:	82 0f       	add	r24, r18
    4d78:	93 1f       	adc	r25, r19
    4d7a:	84 0f       	add	r24, r20
    4d7c:	95 1f       	adc	r25, r21
    4d7e:	fc 01       	movw	r30, r24
    4d80:	e6 58       	subi	r30, 0x86	; 134
    4d82:	ff 4f       	sbci	r31, 0xFF	; 255
    4d84:	90 81       	ld	r25, Z
    4d86:	80 91 77 01 	lds	r24, 0x0177
    4d8a:	89 2b       	or	r24, r25
    4d8c:	80 93 77 01 	sts	0x0177, r24
    4d90:	4d c0       	rjmp	.+154    	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Seconds right number
	case 22: case 23: case 24: case 25: case 26:
		PORTB_Values |= miniDigitalMatrix[secondsRightNumber][clockPointCounter-22];
    4d92:	80 91 64 01 	lds	r24, 0x0164
    4d96:	28 2f       	mov	r18, r24
    4d98:	30 e0       	ldi	r19, 0x00	; 0
    4d9a:	80 91 69 00 	lds	r24, 0x0069
    4d9e:	90 91 6a 00 	lds	r25, 0x006A
    4da2:	ac 01       	movw	r20, r24
    4da4:	46 51       	subi	r20, 0x16	; 22
    4da6:	50 40       	sbci	r21, 0x00	; 0
    4da8:	c9 01       	movw	r24, r18
    4daa:	88 0f       	add	r24, r24
    4dac:	99 1f       	adc	r25, r25
    4dae:	88 0f       	add	r24, r24
    4db0:	99 1f       	adc	r25, r25
    4db2:	82 0f       	add	r24, r18
    4db4:	93 1f       	adc	r25, r19
    4db6:	84 0f       	add	r24, r20
    4db8:	95 1f       	adc	r25, r21
    4dba:	fc 01       	movw	r30, r24
    4dbc:	e6 58       	subi	r30, 0x86	; 134
    4dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc0:	90 81       	ld	r25, Z
    4dc2:	80 91 77 01 	lds	r24, 0x0177
    4dc6:	89 2b       	or	r24, r25
    4dc8:	80 93 77 01 	sts	0x0177, r24
    4dcc:	2f c0       	rjmp	.+94     	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Letter T
	case 137: case 138: case 139: case 140: case 141: case 142: case 143:
		PORTB_Values |= MINI_IMT[2][clockPointCounter - 137];
    4dce:	80 91 69 00 	lds	r24, 0x0069
    4dd2:	90 91 6a 00 	lds	r25, 0x006A
    4dd6:	89 58       	subi	r24, 0x89	; 137
    4dd8:	90 40       	sbci	r25, 0x00	; 0
    4dda:	fc 01       	movw	r30, r24
    4ddc:	e8 5d       	subi	r30, 0xD8	; 216
    4dde:	fe 4f       	sbci	r31, 0xFE	; 254
    4de0:	90 81       	ld	r25, Z
    4de2:	80 91 77 01 	lds	r24, 0x0177
    4de6:	89 2b       	or	r24, r25
    4de8:	80 93 77 01 	sts	0x0177, r24
    4dec:	1f c0       	rjmp	.+62     	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Letter M
	case 147: case 148: case 149: case 150: case 151: case 152: case 153:
		PORTB_Values |= MINI_IMT[1][clockPointCounter - 147];
    4dee:	80 91 69 00 	lds	r24, 0x0069
    4df2:	90 91 6a 00 	lds	r25, 0x006A
    4df6:	83 59       	subi	r24, 0x93	; 147
    4df8:	90 40       	sbci	r25, 0x00	; 0
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	ef 5d       	subi	r30, 0xDF	; 223
    4dfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4e00:	90 81       	ld	r25, Z
    4e02:	80 91 77 01 	lds	r24, 0x0177
    4e06:	89 2b       	or	r24, r25
    4e08:	80 93 77 01 	sts	0x0177, r24
    4e0c:	0f c0       	rjmp	.+30     	; 0x4e2c <Clock_DisplayMiniDigits+0x2d6>
		break;
		//Letter I
	case 157: case 158: case 159: case 160: case 161: case 162: case 163:
		PORTB_Values |= MINI_IMT[0][clockPointCounter - 157];
    4e0e:	80 91 69 00 	lds	r24, 0x0069
    4e12:	90 91 6a 00 	lds	r25, 0x006A
    4e16:	8d 59       	subi	r24, 0x9D	; 157
    4e18:	90 40       	sbci	r25, 0x00	; 0
    4e1a:	fc 01       	movw	r30, r24
    4e1c:	e6 5e       	subi	r30, 0xE6	; 230
    4e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e20:	90 81       	ld	r25, Z
    4e22:	80 91 77 01 	lds	r24, 0x0177
    4e26:	89 2b       	or	r24, r25
    4e28:	80 93 77 01 	sts	0x0177, r24
		break;
	}
}
    4e2c:	0f 90       	pop	r0
    4e2e:	0f 90       	pop	r0
    4e30:	cf 91       	pop	r28
    4e32:	df 91       	pop	r29
    4e34:	08 95       	ret

00004e36 <Clock_AnalogMode>:

void Clock_AnalogMode(){
    4e36:	0f 93       	push	r16
    4e38:	df 93       	push	r29
    4e3a:	cf 93       	push	r28
    4e3c:	cd b7       	in	r28, 0x3d	; 61
    4e3e:	de b7       	in	r29, 0x3e	; 62
	if(clockPointCounter % MINUTES_POINT == 0){
    4e40:	80 91 69 00 	lds	r24, 0x0069
    4e44:	90 91 6a 00 	lds	r25, 0x006A
    4e48:	25 e0       	ldi	r18, 0x05	; 5
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	b9 01       	movw	r22, r18
    4e4e:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4e52:	00 97       	sbiw	r24, 0x00	; 0
    4e54:	a9 f4       	brne	.+42     	; 0x4e80 <Clock_AnalogMode+0x4a>
		//Turn on the minute's marker LEDs
		PORTB_Values |= 0x80;//B: 0x80
    4e56:	80 91 77 01 	lds	r24, 0x0177
    4e5a:	80 68       	ori	r24, 0x80	; 128
    4e5c:	80 93 77 01 	sts	0x0177, r24
		//DIO_u8SetPinValue(DIO_GroupB,DIO_PIN7,High);
		if(clockPointCounter % HOURS_POINT == 0){
    4e60:	80 91 69 00 	lds	r24, 0x0069
    4e64:	90 91 6a 00 	lds	r25, 0x006A
    4e68:	29 e1       	ldi	r18, 0x19	; 25
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	b9 01       	movw	r22, r18
    4e6e:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    4e72:	00 97       	sbiw	r24, 0x00	; 0
    4e74:	29 f4       	brne	.+10     	; 0x4e80 <Clock_AnalogMode+0x4a>
			//Turn on the hour's marker LEDs
			PORTB_Values |= 0x40;//B: 0x40
    4e76:	80 91 77 01 	lds	r24, 0x0177
    4e7a:	80 64       	ori	r24, 0x40	; 64
    4e7c:	80 93 77 01 	sts	0x0177, r24
			//DIO_u8SetPinValue(DIO_GroupB,DIO_PIN6,High);
		}
	}

	Clock_DisplayAnalogHourNumber();
    4e80:	0e 94 57 24 	call	0x48ae	; 0x48ae <Clock_DisplayAnalogHourNumber>
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN2,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentSecondLocation, 0, 0x7F, 0x10, 0x3F);
    4e84:	80 91 6b 00 	lds	r24, 0x006B
    4e88:	90 91 6c 00 	lds	r25, 0x006C
    4e8c:	60 e0       	ldi	r22, 0x00	; 0
    4e8e:	4f e7       	ldi	r20, 0x7F	; 127
    4e90:	20 e1       	ldi	r18, 0x10	; 16
    4e92:	0f e3       	ldi	r16, 0x3F	; 63
    4e94:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN2,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentMinuteLocation, 0, 0x7F, 0x02, 0x07);
    4e98:	80 91 6d 00 	lds	r24, 0x006D
    4e9c:	90 91 6e 00 	lds	r25, 0x006E
    4ea0:	60 e0       	ldi	r22, 0x00	; 0
    4ea2:	4f e7       	ldi	r20, 0x7F	; 127
    4ea4:	22 e0       	ldi	r18, 0x02	; 2
    4ea6:	07 e0       	ldi	r16, 0x07	; 7
    4ea8:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN2,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
								DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentHourLocation, 0x02, 0x7F, 0, 0);
    4eac:	80 91 6f 00 	lds	r24, 0x006F
    4eb0:	90 91 70 00 	lds	r25, 0x0070
    4eb4:	62 e0       	ldi	r22, 0x02	; 2
    4eb6:	4f e7       	ldi	r20, 0x7F	; 127
    4eb8:	20 e0       	ldi	r18, 0x00	; 0
    4eba:	00 e0       	ldi	r16, 0x00	; 0
    4ebc:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>
}
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	0f 91       	pop	r16
    4ec6:	08 95       	ret

00004ec8 <Clock_DigitalMode>:

void Clock_DigitalMode(){
    4ec8:	df 93       	push	r29
    4eca:	cf 93       	push	r28
    4ecc:	00 d0       	rcall	.+0      	; 0x4ece <Clock_DigitalMode+0x6>
    4ece:	cd b7       	in	r28, 0x3d	; 61
    4ed0:	de b7       	in	r29, 0x3e	; 62
	switch(clockPointCounter){
    4ed2:	80 91 69 00 	lds	r24, 0x0069
    4ed6:	90 91 6a 00 	lds	r25, 0x006A
    4eda:	9a 83       	std	Y+2, r25	; 0x02
    4edc:	89 83       	std	Y+1, r24	; 0x01
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ee2:	8c 39       	cpi	r24, 0x9C	; 156
    4ee4:	91 05       	cpc	r25, r1
    4ee6:	d0 f5       	brcc	.+116    	; 0x4f5c <Clock_DigitalMode+0x94>
    4ee8:	89 81       	ldd	r24, Y+1	; 0x01
    4eea:	9a 81       	ldd	r25, Y+2	; 0x02
    4eec:	81 39       	cpi	r24, 0x91	; 145
    4eee:	91 05       	cpc	r25, r1
    4ef0:	08 f0       	brcs	.+2      	; 0x4ef4 <Clock_DigitalMode+0x2c>
    4ef2:	55 c1       	rjmp	.+682    	; 0x519e <Clock_DigitalMode+0x2d6>
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    4ef8:	85 32       	cpi	r24, 0x25	; 37
    4efa:	91 05       	cpc	r25, r1
    4efc:	d0 f4       	brcc	.+52     	; 0x4f32 <Clock_DigitalMode+0x6a>
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	9a 81       	ldd	r25, Y+2	; 0x02
    4f02:	8a 31       	cpi	r24, 0x1A	; 26
    4f04:	91 05       	cpc	r25, r1
    4f06:	08 f0       	brcs	.+2      	; 0x4f0a <Clock_DigitalMode+0x42>
    4f08:	f4 c0       	rjmp	.+488    	; 0x50f2 <Clock_DigitalMode+0x22a>
    4f0a:	89 81       	ldd	r24, Y+1	; 0x01
    4f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f0e:	83 30       	cpi	r24, 0x03	; 3
    4f10:	91 05       	cpc	r25, r1
    4f12:	08 f4       	brcc	.+2      	; 0x4f16 <Clock_DigitalMode+0x4e>
    4f14:	63 c1       	rjmp	.+710    	; 0x51dc <Clock_DigitalMode+0x314>
    4f16:	89 81       	ldd	r24, Y+1	; 0x01
    4f18:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1a:	8e 30       	cpi	r24, 0x0E	; 14
    4f1c:	91 05       	cpc	r25, r1
    4f1e:	08 f4       	brcc	.+2      	; 0x4f22 <Clock_DigitalMode+0x5a>
    4f20:	c5 c0       	rjmp	.+394    	; 0x50ac <Clock_DigitalMode+0x1e4>
    4f22:	89 81       	ldd	r24, Y+1	; 0x01
    4f24:	9a 81       	ldd	r25, Y+2	; 0x02
    4f26:	43 97       	sbiw	r24, 0x13	; 19
    4f28:	82 30       	cpi	r24, 0x02	; 2
    4f2a:	91 05       	cpc	r25, r1
    4f2c:	08 f0       	brcs	.+2      	; 0x4f30 <Clock_DigitalMode+0x68>
    4f2e:	56 c1       	rjmp	.+684    	; 0x51dc <Clock_DigitalMode+0x314>
    4f30:	94 c0       	rjmp	.+296    	; 0x505a <Clock_DigitalMode+0x192>
    4f32:	89 81       	ldd	r24, Y+1	; 0x01
    4f34:	9a 81       	ldd	r25, Y+2	; 0x02
    4f36:	8a 32       	cpi	r24, 0x2A	; 42
    4f38:	91 05       	cpc	r25, r1
    4f3a:	08 f4       	brcc	.+2      	; 0x4f3e <Clock_DigitalMode+0x76>
    4f3c:	4f c1       	rjmp	.+670    	; 0x51dc <Clock_DigitalMode+0x314>
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	9a 81       	ldd	r25, Y+2	; 0x02
    4f42:	85 33       	cpi	r24, 0x35	; 53
    4f44:	91 05       	cpc	r25, r1
    4f46:	08 f4       	brcc	.+2      	; 0x4f4a <Clock_DigitalMode+0x82>
    4f48:	f7 c0       	rjmp	.+494    	; 0x5138 <Clock_DigitalMode+0x270>
    4f4a:	89 81       	ldd	r24, Y+1	; 0x01
    4f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    4f4e:	81 58       	subi	r24, 0x81	; 129
    4f50:	90 40       	sbci	r25, 0x00	; 0
    4f52:	8b 30       	cpi	r24, 0x0B	; 11
    4f54:	91 05       	cpc	r25, r1
    4f56:	08 f0       	brcs	.+2      	; 0x4f5a <Clock_DigitalMode+0x92>
    4f58:	41 c1       	rjmp	.+642    	; 0x51dc <Clock_DigitalMode+0x314>
    4f5a:	11 c1       	rjmp	.+546    	; 0x517e <Clock_DigitalMode+0x2b6>
    4f5c:	89 81       	ldd	r24, Y+1	; 0x01
    4f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    4f60:	21 e0       	ldi	r18, 0x01	; 1
    4f62:	83 31       	cpi	r24, 0x13	; 19
    4f64:	92 07       	cpc	r25, r18
    4f66:	e0 f4       	brcc	.+56     	; 0x4fa0 <Clock_DigitalMode+0xd8>
    4f68:	89 81       	ldd	r24, Y+1	; 0x01
    4f6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f6c:	21 e0       	ldi	r18, 0x01	; 1
    4f6e:	88 30       	cpi	r24, 0x08	; 8
    4f70:	92 07       	cpc	r25, r18
    4f72:	08 f0       	brcs	.+2      	; 0x4f76 <Clock_DigitalMode+0xae>
    4f74:	4f c0       	rjmp	.+158    	; 0x5014 <Clock_DigitalMode+0x14c>
    4f76:	89 81       	ldd	r24, Y+1	; 0x01
    4f78:	9a 81       	ldd	r25, Y+2	; 0x02
    4f7a:	81 3a       	cpi	r24, 0xA1	; 161
    4f7c:	91 05       	cpc	r25, r1
    4f7e:	08 f4       	brcc	.+2      	; 0x4f82 <Clock_DigitalMode+0xba>
    4f80:	2d c1       	rjmp	.+602    	; 0x51dc <Clock_DigitalMode+0x314>
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	9a 81       	ldd	r25, Y+2	; 0x02
    4f86:	8c 3a       	cpi	r24, 0xAC	; 172
    4f88:	91 05       	cpc	r25, r1
    4f8a:	08 f4       	brcc	.+2      	; 0x4f8e <Clock_DigitalMode+0xc6>
    4f8c:	18 c1       	rjmp	.+560    	; 0x51be <Clock_DigitalMode+0x2f6>
    4f8e:	89 81       	ldd	r24, Y+1	; 0x01
    4f90:	9a 81       	ldd	r25, Y+2	; 0x02
    4f92:	88 5f       	subi	r24, 0xF8	; 248
    4f94:	90 40       	sbci	r25, 0x00	; 0
    4f96:	8b 30       	cpi	r24, 0x0B	; 11
    4f98:	91 05       	cpc	r25, r1
    4f9a:	08 f0       	brcs	.+2      	; 0x4f9e <Clock_DigitalMode+0xd6>
    4f9c:	1f c1       	rjmp	.+574    	; 0x51dc <Clock_DigitalMode+0x314>
    4f9e:	17 c0       	rjmp	.+46     	; 0x4fce <Clock_DigitalMode+0x106>
    4fa0:	89 81       	ldd	r24, Y+1	; 0x01
    4fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa4:	21 e0       	ldi	r18, 0x01	; 1
    4fa6:	88 31       	cpi	r24, 0x18	; 24
    4fa8:	92 07       	cpc	r25, r18
    4faa:	08 f4       	brcc	.+2      	; 0x4fae <Clock_DigitalMode+0xe6>
    4fac:	17 c1       	rjmp	.+558    	; 0x51dc <Clock_DigitalMode+0x314>
    4fae:	89 81       	ldd	r24, Y+1	; 0x01
    4fb0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fb2:	21 e0       	ldi	r18, 0x01	; 1
    4fb4:	8a 31       	cpi	r24, 0x1A	; 26
    4fb6:	92 07       	cpc	r25, r18
    4fb8:	08 f4       	brcc	.+2      	; 0x4fbc <Clock_DigitalMode+0xf4>
    4fba:	4f c0       	rjmp	.+158    	; 0x505a <Clock_DigitalMode+0x192>
    4fbc:	89 81       	ldd	r24, Y+1	; 0x01
    4fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc0:	8f 51       	subi	r24, 0x1F	; 31
    4fc2:	91 40       	sbci	r25, 0x01	; 1
    4fc4:	8b 30       	cpi	r24, 0x0B	; 11
    4fc6:	91 05       	cpc	r25, r1
    4fc8:	08 f0       	brcs	.+2      	; 0x4fcc <Clock_DigitalMode+0x104>
    4fca:	08 c1       	rjmp	.+528    	; 0x51dc <Clock_DigitalMode+0x314>
    4fcc:	4c c0       	rjmp	.+152    	; 0x5066 <Clock_DigitalMode+0x19e>
	//Hours left number
	case 248: case 249: case 250: case 251: case 252: case 253: case 254: case 255: case 256: case 257: case 258:
		PORTB_Values |= digitalMatrix[hoursLeftNumber][clockPointCounter - 248];
    4fce:	80 91 5f 01 	lds	r24, 0x015F
    4fd2:	48 2f       	mov	r20, r24
    4fd4:	50 e0       	ldi	r21, 0x00	; 0
    4fd6:	80 91 69 00 	lds	r24, 0x0069
    4fda:	90 91 6a 00 	lds	r25, 0x006A
    4fde:	bc 01       	movw	r22, r24
    4fe0:	68 5f       	subi	r22, 0xF8	; 248
    4fe2:	70 40       	sbci	r23, 0x00	; 0
    4fe4:	ca 01       	movw	r24, r20
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	9c 01       	movw	r18, r24
    4fec:	22 0f       	add	r18, r18
    4fee:	33 1f       	adc	r19, r19
    4ff0:	22 0f       	add	r18, r18
    4ff2:	33 1f       	adc	r19, r19
    4ff4:	82 0f       	add	r24, r18
    4ff6:	93 1f       	adc	r25, r19
    4ff8:	84 0f       	add	r24, r20
    4ffa:	95 1f       	adc	r25, r21
    4ffc:	86 0f       	add	r24, r22
    4ffe:	97 1f       	adc	r25, r23
    5000:	fc 01       	movw	r30, r24
    5002:	e4 55       	subi	r30, 0x54	; 84
    5004:	ff 4f       	sbci	r31, 0xFF	; 255
    5006:	90 81       	ld	r25, Z
    5008:	80 91 77 01 	lds	r24, 0x0177
    500c:	89 2b       	or	r24, r25
    500e:	80 93 77 01 	sts	0x0177, r24
    5012:	e4 c0       	rjmp	.+456    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 264: case 265: case 266: case 267: case 268: case 269: case 270: case 271: case 272: case 273: case 274:
		//Hours right number
		PORTB_Values |= digitalMatrix[hoursRightNumber][clockPointCounter - 264];
    5014:	80 91 60 01 	lds	r24, 0x0160
    5018:	48 2f       	mov	r20, r24
    501a:	50 e0       	ldi	r21, 0x00	; 0
    501c:	80 91 69 00 	lds	r24, 0x0069
    5020:	90 91 6a 00 	lds	r25, 0x006A
    5024:	bc 01       	movw	r22, r24
    5026:	68 50       	subi	r22, 0x08	; 8
    5028:	71 40       	sbci	r23, 0x01	; 1
    502a:	ca 01       	movw	r24, r20
    502c:	88 0f       	add	r24, r24
    502e:	99 1f       	adc	r25, r25
    5030:	9c 01       	movw	r18, r24
    5032:	22 0f       	add	r18, r18
    5034:	33 1f       	adc	r19, r19
    5036:	22 0f       	add	r18, r18
    5038:	33 1f       	adc	r19, r19
    503a:	82 0f       	add	r24, r18
    503c:	93 1f       	adc	r25, r19
    503e:	84 0f       	add	r24, r20
    5040:	95 1f       	adc	r25, r21
    5042:	86 0f       	add	r24, r22
    5044:	97 1f       	adc	r25, r23
    5046:	fc 01       	movw	r30, r24
    5048:	e4 55       	subi	r30, 0x54	; 84
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	90 81       	ld	r25, Z
    504e:	80 91 77 01 	lds	r24, 0x0177
    5052:	89 2b       	or	r24, r25
    5054:	80 93 77 01 	sts	0x0177, r24
    5058:	c1 c0       	rjmp	.+386    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 280: case 281: case 19: case 20:
		//Colons
		PORTB_Values |= 0x24;
    505a:	80 91 77 01 	lds	r24, 0x0177
    505e:	84 62       	ori	r24, 0x24	; 36
    5060:	80 93 77 01 	sts	0x0177, r24
    5064:	bb c0       	rjmp	.+374    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 287: case 288: case 289: case 290: case 291: case 292: case 293: case 294: case 295: case 296: case 297:
		//Minutes left number
		PORTB_Values |= digitalMatrix[minutesLeftNumber][clockPointCounter - 287];
    5066:	80 91 61 01 	lds	r24, 0x0161
    506a:	48 2f       	mov	r20, r24
    506c:	50 e0       	ldi	r21, 0x00	; 0
    506e:	80 91 69 00 	lds	r24, 0x0069
    5072:	90 91 6a 00 	lds	r25, 0x006A
    5076:	bc 01       	movw	r22, r24
    5078:	6f 51       	subi	r22, 0x1F	; 31
    507a:	71 40       	sbci	r23, 0x01	; 1
    507c:	ca 01       	movw	r24, r20
    507e:	88 0f       	add	r24, r24
    5080:	99 1f       	adc	r25, r25
    5082:	9c 01       	movw	r18, r24
    5084:	22 0f       	add	r18, r18
    5086:	33 1f       	adc	r19, r19
    5088:	22 0f       	add	r18, r18
    508a:	33 1f       	adc	r19, r19
    508c:	82 0f       	add	r24, r18
    508e:	93 1f       	adc	r25, r19
    5090:	84 0f       	add	r24, r20
    5092:	95 1f       	adc	r25, r21
    5094:	86 0f       	add	r24, r22
    5096:	97 1f       	adc	r25, r23
    5098:	fc 01       	movw	r30, r24
    509a:	e4 55       	subi	r30, 0x54	; 84
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	90 81       	ld	r25, Z
    50a0:	80 91 77 01 	lds	r24, 0x0177
    50a4:	89 2b       	or	r24, r25
    50a6:	80 93 77 01 	sts	0x0177, r24
    50aa:	98 c0       	rjmp	.+304    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13:
		//Minutes right number
		PORTB_Values |= digitalMatrix[minutesRightNumber][clockPointCounter - 3];
    50ac:	80 91 62 01 	lds	r24, 0x0162
    50b0:	48 2f       	mov	r20, r24
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	80 91 69 00 	lds	r24, 0x0069
    50b8:	90 91 6a 00 	lds	r25, 0x006A
    50bc:	bc 01       	movw	r22, r24
    50be:	63 50       	subi	r22, 0x03	; 3
    50c0:	70 40       	sbci	r23, 0x00	; 0
    50c2:	ca 01       	movw	r24, r20
    50c4:	88 0f       	add	r24, r24
    50c6:	99 1f       	adc	r25, r25
    50c8:	9c 01       	movw	r18, r24
    50ca:	22 0f       	add	r18, r18
    50cc:	33 1f       	adc	r19, r19
    50ce:	22 0f       	add	r18, r18
    50d0:	33 1f       	adc	r19, r19
    50d2:	82 0f       	add	r24, r18
    50d4:	93 1f       	adc	r25, r19
    50d6:	84 0f       	add	r24, r20
    50d8:	95 1f       	adc	r25, r21
    50da:	86 0f       	add	r24, r22
    50dc:	97 1f       	adc	r25, r23
    50de:	fc 01       	movw	r30, r24
    50e0:	e4 55       	subi	r30, 0x54	; 84
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	90 81       	ld	r25, Z
    50e6:	80 91 77 01 	lds	r24, 0x0177
    50ea:	89 2b       	or	r24, r25
    50ec:	80 93 77 01 	sts	0x0177, r24
    50f0:	75 c0       	rjmp	.+234    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36:
		//Seconds left number
		PORTB_Values |= digitalMatrix[secondsLeftNumber][clockPointCounter - 26];
    50f2:	80 91 63 01 	lds	r24, 0x0163
    50f6:	48 2f       	mov	r20, r24
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	80 91 69 00 	lds	r24, 0x0069
    50fe:	90 91 6a 00 	lds	r25, 0x006A
    5102:	bc 01       	movw	r22, r24
    5104:	6a 51       	subi	r22, 0x1A	; 26
    5106:	70 40       	sbci	r23, 0x00	; 0
    5108:	ca 01       	movw	r24, r20
    510a:	88 0f       	add	r24, r24
    510c:	99 1f       	adc	r25, r25
    510e:	9c 01       	movw	r18, r24
    5110:	22 0f       	add	r18, r18
    5112:	33 1f       	adc	r19, r19
    5114:	22 0f       	add	r18, r18
    5116:	33 1f       	adc	r19, r19
    5118:	82 0f       	add	r24, r18
    511a:	93 1f       	adc	r25, r19
    511c:	84 0f       	add	r24, r20
    511e:	95 1f       	adc	r25, r21
    5120:	86 0f       	add	r24, r22
    5122:	97 1f       	adc	r25, r23
    5124:	fc 01       	movw	r30, r24
    5126:	e4 55       	subi	r30, 0x54	; 84
    5128:	ff 4f       	sbci	r31, 0xFF	; 255
    512a:	90 81       	ld	r25, Z
    512c:	80 91 77 01 	lds	r24, 0x0177
    5130:	89 2b       	or	r24, r25
    5132:	80 93 77 01 	sts	0x0177, r24
    5136:	52 c0       	rjmp	.+164    	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52:
		//Seconds right number
		PORTB_Values |= digitalMatrix[secondsRightNumber][clockPointCounter - 42];
    5138:	80 91 64 01 	lds	r24, 0x0164
    513c:	48 2f       	mov	r20, r24
    513e:	50 e0       	ldi	r21, 0x00	; 0
    5140:	80 91 69 00 	lds	r24, 0x0069
    5144:	90 91 6a 00 	lds	r25, 0x006A
    5148:	bc 01       	movw	r22, r24
    514a:	6a 52       	subi	r22, 0x2A	; 42
    514c:	70 40       	sbci	r23, 0x00	; 0
    514e:	ca 01       	movw	r24, r20
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	9c 01       	movw	r18, r24
    5156:	22 0f       	add	r18, r18
    5158:	33 1f       	adc	r19, r19
    515a:	22 0f       	add	r18, r18
    515c:	33 1f       	adc	r19, r19
    515e:	82 0f       	add	r24, r18
    5160:	93 1f       	adc	r25, r19
    5162:	84 0f       	add	r24, r20
    5164:	95 1f       	adc	r25, r21
    5166:	86 0f       	add	r24, r22
    5168:	97 1f       	adc	r25, r23
    516a:	fc 01       	movw	r30, r24
    516c:	e4 55       	subi	r30, 0x54	; 84
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	90 81       	ld	r25, Z
    5172:	80 91 77 01 	lds	r24, 0x0177
    5176:	89 2b       	or	r24, r25
    5178:	80 93 77 01 	sts	0x0177, r24
    517c:	2f c0       	rjmp	.+94     	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 129: case 130: case 131: case 132: case 133: case 134: case 135: case 136: case 137: case 138: case 139:
		//Letter T
		PORTB_Values |= IMT[2][clockPointCounter - 129];
    517e:	80 91 69 00 	lds	r24, 0x0069
    5182:	90 91 6a 00 	lds	r25, 0x006A
    5186:	81 58       	subi	r24, 0x81	; 129
    5188:	90 40       	sbci	r25, 0x00	; 0
    518a:	fc 01       	movw	r30, r24
    518c:	eb 5b       	subi	r30, 0xBB	; 187
    518e:	fe 4f       	sbci	r31, 0xFE	; 254
    5190:	90 81       	ld	r25, Z
    5192:	80 91 77 01 	lds	r24, 0x0177
    5196:	89 2b       	or	r24, r25
    5198:	80 93 77 01 	sts	0x0177, r24
    519c:	1f c0       	rjmp	.+62     	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 145: case 146: case 147: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155:
		//Letter M
		PORTB_Values |= IMT[1][clockPointCounter - 145];
    519e:	80 91 69 00 	lds	r24, 0x0069
    51a2:	90 91 6a 00 	lds	r25, 0x006A
    51a6:	81 59       	subi	r24, 0x91	; 145
    51a8:	90 40       	sbci	r25, 0x00	; 0
    51aa:	fc 01       	movw	r30, r24
    51ac:	e6 5c       	subi	r30, 0xC6	; 198
    51ae:	fe 4f       	sbci	r31, 0xFE	; 254
    51b0:	90 81       	ld	r25, Z
    51b2:	80 91 77 01 	lds	r24, 0x0177
    51b6:	89 2b       	or	r24, r25
    51b8:	80 93 77 01 	sts	0x0177, r24
    51bc:	0f c0       	rjmp	.+30     	; 0x51dc <Clock_DigitalMode+0x314>
		break;
	case 161: case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171:
		//Letter I
		PORTB_Values |= IMT[0][clockPointCounter - 161];
    51be:	80 91 69 00 	lds	r24, 0x0069
    51c2:	90 91 6a 00 	lds	r25, 0x006A
    51c6:	81 5a       	subi	r24, 0xA1	; 161
    51c8:	90 40       	sbci	r25, 0x00	; 0
    51ca:	fc 01       	movw	r30, r24
    51cc:	e1 5d       	subi	r30, 0xD1	; 209
    51ce:	fe 4f       	sbci	r31, 0xFE	; 254
    51d0:	90 81       	ld	r25, Z
    51d2:	80 91 77 01 	lds	r24, 0x0177
    51d6:	89 2b       	or	r24, r25
    51d8:	80 93 77 01 	sts	0x0177, r24
		break;
	}
}
    51dc:	0f 90       	pop	r0
    51de:	0f 90       	pop	r0
    51e0:	cf 91       	pop	r28
    51e2:	df 91       	pop	r29
    51e4:	08 95       	ret

000051e6 <Clock_HybridMode>:

void Clock_HybridMode(){
    51e6:	0f 93       	push	r16
    51e8:	df 93       	push	r29
    51ea:	cf 93       	push	r28
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
	if(clockPointCounter % MINUTES_POINT == 0){
    51f0:	80 91 69 00 	lds	r24, 0x0069
    51f4:	90 91 6a 00 	lds	r25, 0x006A
    51f8:	25 e0       	ldi	r18, 0x05	; 5
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	b9 01       	movw	r22, r18
    51fe:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    5202:	00 97       	sbiw	r24, 0x00	; 0
    5204:	a9 f4       	brne	.+42     	; 0x5230 <Clock_HybridMode+0x4a>
		//Turn on the minute's marker LEDs
		PORTB_Values |= 0x02;//B: 0x02
    5206:	80 91 77 01 	lds	r24, 0x0177
    520a:	82 60       	ori	r24, 0x02	; 2
    520c:	80 93 77 01 	sts	0x0177, r24
		//DIO_u8SetPinValue(DIO_GroupB,DIO_PIN1,High);
		if(clockPointCounter % HOURS_POINT == 0){
    5210:	80 91 69 00 	lds	r24, 0x0069
    5214:	90 91 6a 00 	lds	r25, 0x006A
    5218:	29 e1       	ldi	r18, 0x19	; 25
    521a:	30 e0       	ldi	r19, 0x00	; 0
    521c:	b9 01       	movw	r22, r18
    521e:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <__udivmodhi4>
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	29 f4       	brne	.+10     	; 0x5230 <Clock_HybridMode+0x4a>
			//Turn on the hour's marker LEDs
			PORTB_Values |= 0x01;//B: 0x01
    5226:	80 91 77 01 	lds	r24, 0x0177
    522a:	81 60       	ori	r24, 0x01	; 1
    522c:	80 93 77 01 	sts	0x0177, r24
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN2,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentSecondLocation, 0x02, 0x7F, 0, 0x00);
    5230:	80 91 6b 00 	lds	r24, 0x006B
    5234:	90 91 6c 00 	lds	r25, 0x006C
    5238:	62 e0       	ldi	r22, 0x02	; 2
    523a:	4f e7       	ldi	r20, 0x7F	; 127
    523c:	20 e0       	ldi	r18, 0x00	; 0
    523e:	00 e0       	ldi	r16, 0x00	; 0
    5240:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN2,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentMinuteLocation, 0x08, 0x7C, 0, 0);
    5244:	80 91 6d 00 	lds	r24, 0x006D
    5248:	90 91 6e 00 	lds	r25, 0x006E
    524c:	68 e0       	ldi	r22, 0x08	; 8
    524e:	4c e7       	ldi	r20, 0x7C	; 124
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	00 e0       	ldi	r16, 0x00	; 0
    5254:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>
					  Turn on the hour's LEDs LEDs A: 0x78  B: 0x00
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN3,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN4,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN5,High);
												DIO_u8SetPinValue(DIO_GroupA,DIO_PIN6,High);*/
	Clock_DisplayArrow(currentHourLocation, 0x10, 0x78, 0, 0);
    5258:	80 91 6f 00 	lds	r24, 0x006F
    525c:	90 91 70 00 	lds	r25, 0x0070
    5260:	60 e1       	ldi	r22, 0x10	; 16
    5262:	48 e7       	ldi	r20, 0x78	; 120
    5264:	20 e0       	ldi	r18, 0x00	; 0
    5266:	00 e0       	ldi	r16, 0x00	; 0
    5268:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <Clock_DisplayArrow>

	Clock_DisplayMiniDigits();
    526c:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <Clock_DisplayMiniDigits>
}
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	0f 91       	pop	r16
    5276:	08 95       	ret

00005278 <Clock_POV>:

void Clock_POV(){
    5278:	df 93       	push	r29
    527a:	cf 93       	push	r28
    527c:	cd b7       	in	r28, 0x3d	; 61
    527e:	de b7       	in	r29, 0x3e	; 62
	//Enable the LEDs
	DIO_u8SetPortValue(DIO_GroupB,PORTB_Values);
    5280:	90 91 77 01 	lds	r25, 0x0177
    5284:	82 e0       	ldi	r24, 0x02	; 2
    5286:	69 2f       	mov	r22, r25
    5288:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_u8SetPortValue>
	DIO_u8SetPortValue(DIO_GroupA,PORTA_Values);
    528c:	90 91 78 01 	lds	r25, 0x0178
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	69 2f       	mov	r22, r25
    5294:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_u8SetPortValue>

	Clock_delayMicroseconds(LED_DELAY);
    5298:	84 eb       	ldi	r24, 0xB4	; 180
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	0e 94 ca 21 	call	0x4394	; 0x4394 <Clock_delayMicroseconds>

	//Disable the LEDs
	PORTB_Values = 0;
    52a0:	10 92 77 01 	sts	0x0177, r1
	PORTA_Values = 0;
    52a4:	10 92 78 01 	sts	0x0178, r1
	DIO_u8SetPortValue(DIO_GroupB,PORTB_Values);
    52a8:	90 91 77 01 	lds	r25, 0x0177
    52ac:	82 e0       	ldi	r24, 0x02	; 2
    52ae:	69 2f       	mov	r22, r25
    52b0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_u8SetPortValue>
	DIO_u8SetPortValue(DIO_GroupA,PORTA_Values);
    52b4:	90 91 78 01 	lds	r25, 0x0178
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	69 2f       	mov	r22, r25
    52bc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <DIO_u8SetPortValue>

	Clock_delayMicroseconds(motorCycleTime - LED_DELAY - cycleDelay);
    52c0:	80 91 6f 01 	lds	r24, 0x016F
    52c4:	90 91 70 01 	lds	r25, 0x0170
    52c8:	a0 91 71 01 	lds	r26, 0x0171
    52cc:	b0 91 72 01 	lds	r27, 0x0172
    52d0:	9c 01       	movw	r18, r24
    52d2:	80 91 79 00 	lds	r24, 0x0079
    52d6:	88 2f       	mov	r24, r24
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	a9 01       	movw	r20, r18
    52dc:	48 1b       	sub	r20, r24
    52de:	59 0b       	sbc	r21, r25
    52e0:	ca 01       	movw	r24, r20
    52e2:	84 5b       	subi	r24, 0xB4	; 180
    52e4:	90 40       	sbci	r25, 0x00	; 0
    52e6:	0e 94 ca 21 	call	0x4394	; 0x4394 <Clock_delayMicroseconds>
	//Increment the clock point counter to move to the next point in the cycle
	clockPointCounter++;
    52ea:	80 91 69 00 	lds	r24, 0x0069
    52ee:	90 91 6a 00 	lds	r25, 0x006A
    52f2:	01 96       	adiw	r24, 0x01	; 1
    52f4:	90 93 6a 00 	sts	0x006A, r25
    52f8:	80 93 69 00 	sts	0x0069, r24
	if(clockPointCounter == STARTING_POINT){
    52fc:	80 91 69 00 	lds	r24, 0x0069
    5300:	90 91 6a 00 	lds	r25, 0x006A
    5304:	8f 3a       	cpi	r24, 0xAF	; 175
    5306:	91 05       	cpc	r25, r1
    5308:	19 f4       	brne	.+6      	; 0x5310 <Clock_POV+0x98>
		clockOn = 0;
    530a:	10 92 66 01 	sts	0x0166, r1
    530e:	12 c0       	rjmp	.+36     	; 0x5334 <Clock_POV+0xbc>
	}
	else if(clockPointCounter > TOTAL_CYCLE_POINTS){
    5310:	80 91 69 00 	lds	r24, 0x0069
    5314:	90 91 6a 00 	lds	r25, 0x006A
    5318:	51 e0       	ldi	r21, 0x01	; 1
    531a:	8d 32       	cpi	r24, 0x2D	; 45
    531c:	95 07       	cpc	r25, r21
    531e:	50 f0       	brcs	.+20     	; 0x5334 <Clock_POV+0xbc>
		clockPointCounter -=TOTAL_CYCLE_POINTS;
    5320:	80 91 69 00 	lds	r24, 0x0069
    5324:	90 91 6a 00 	lds	r25, 0x006A
    5328:	8c 52       	subi	r24, 0x2C	; 44
    532a:	91 40       	sbci	r25, 0x01	; 1
    532c:	90 93 6a 00 	sts	0x006A, r25
    5330:	80 93 69 00 	sts	0x0069, r24
	}
	if(delayBreak){
    5334:	80 91 65 01 	lds	r24, 0x0165
    5338:	88 23       	and	r24, r24
    533a:	59 f0       	breq	.+22     	; 0x5352 <Clock_POV+0xda>
		clockOn = 1;
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	80 93 66 01 	sts	0x0166, r24
		clockPointCounter = STARTING_POINT;
    5342:	8f ea       	ldi	r24, 0xAF	; 175
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	90 93 6a 00 	sts	0x006A, r25
    534a:	80 93 69 00 	sts	0x0069, r24
		delayBreak = 0;
    534e:	10 92 65 01 	sts	0x0165, r1
	}
}
    5352:	cf 91       	pop	r28
    5354:	df 91       	pop	r29
    5356:	08 95       	ret

00005358 <Clock_MotorSpeed>:

void Clock_MotorSpeed(){//Call this function in the timer2 CTC interrupt
    5358:	df 93       	push	r29
    535a:	cf 93       	push	r28
    535c:	cd b7       	in	r28, 0x3d	; 61
    535e:	de b7       	in	r29, 0x3e	; 62
	//Increment the cycle time counter by the CTC times
	cycleTimeCounter++;
    5360:	80 91 73 01 	lds	r24, 0x0173
    5364:	90 91 74 01 	lds	r25, 0x0174
    5368:	a0 91 75 01 	lds	r26, 0x0175
    536c:	b0 91 76 01 	lds	r27, 0x0176
    5370:	01 96       	adiw	r24, 0x01	; 1
    5372:	a1 1d       	adc	r26, r1
    5374:	b1 1d       	adc	r27, r1
    5376:	80 93 73 01 	sts	0x0173, r24
    537a:	90 93 74 01 	sts	0x0174, r25
    537e:	a0 93 75 01 	sts	0x0175, r26
    5382:	b0 93 76 01 	sts	0x0176, r27
}
    5386:	cf 91       	pop	r28
    5388:	df 91       	pop	r29
    538a:	08 95       	ret

0000538c <Clock_Reset>:

void Clock_Reset(){
    538c:	df 93       	push	r29
    538e:	cf 93       	push	r28
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
	if(cycleTimeCounter >= RESET_TIMER_TOLERANCE && !resetTimer){
    5394:	80 91 73 01 	lds	r24, 0x0173
    5398:	90 91 74 01 	lds	r25, 0x0174
    539c:	a0 91 75 01 	lds	r26, 0x0175
    53a0:	b0 91 76 01 	lds	r27, 0x0176
    53a4:	8d 37       	cpi	r24, 0x7D	; 125
    53a6:	91 05       	cpc	r25, r1
    53a8:	a1 05       	cpc	r26, r1
    53aa:	b1 05       	cpc	r27, r1
    53ac:	40 f0       	brcs	.+16     	; 0x53be <Clock_Reset+0x32>
    53ae:	80 91 75 00 	lds	r24, 0x0075
    53b2:	88 23       	and	r24, r24
    53b4:	21 f4       	brne	.+8      	; 0x53be <Clock_Reset+0x32>
		resetTimer = 1;
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	80 93 75 00 	sts	0x0075, r24
    53bc:	0f c0       	rjmp	.+30     	; 0x53dc <Clock_Reset+0x50>
	}
	else if(resetTimer){
    53be:	80 91 75 00 	lds	r24, 0x0075
    53c2:	88 23       	and	r24, r24
    53c4:	59 f0       	breq	.+22     	; 0x53dc <Clock_Reset+0x50>
		//Keep resetting the timer2 because the motor is not spinning anymore
		TI2_TCNT2 = 0;
    53c6:	e4 e4       	ldi	r30, 0x44	; 68
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	10 82       	st	Z, r1
		cycleTimeCounter = 0;
    53cc:	10 92 73 01 	sts	0x0173, r1
    53d0:	10 92 74 01 	sts	0x0174, r1
    53d4:	10 92 75 01 	sts	0x0175, r1
    53d8:	10 92 76 01 	sts	0x0176, r1
	}
}
    53dc:	cf 91       	pop	r28
    53de:	df 91       	pop	r29
    53e0:	08 95       	ret

000053e2 <main>:
extern u8 updateTime;
extern u8 clockOn;
extern u8 power;
extern u8 mode;

int main(){
    53e2:	df 93       	push	r29
    53e4:	cf 93       	push	r28
    53e6:	cd b7       	in	r28, 0x3d	; 61
    53e8:	de b7       	in	r29, 0x3e	; 62

	Clock_InitializeClockPosition();
    53ea:	0e 94 9f 20 	call	0x413e	; 0x413e <Clock_InitializeClockPosition>
	Clock_Setup();
    53ee:	0e 94 0c 21 	call	0x4218	; 0x4218 <Clock_Setup>
	while(1){
		if(!disableIR && IRsignal){
    53f2:	80 91 6c 01 	lds	r24, 0x016C
    53f6:	88 23       	and	r24, r24
    53f8:	d1 f4       	brne	.+52     	; 0x542e <main+0x4c>
    53fa:	80 91 68 01 	lds	r24, 0x0168
    53fe:	90 91 69 01 	lds	r25, 0x0169
    5402:	a0 91 6a 01 	lds	r26, 0x016A
    5406:	b0 91 6b 01 	lds	r27, 0x016B
    540a:	00 97       	sbiw	r24, 0x00	; 0
    540c:	a1 05       	cpc	r26, r1
    540e:	b1 05       	cpc	r27, r1
    5410:	71 f0       	breq	.+28     	; 0x542e <main+0x4c>
			Clock_CheckIRInput();
    5412:	0e 94 5e 23 	call	0x46bc	; 0x46bc <Clock_CheckIRInput>
			IRsignal = 0;
    5416:	10 92 68 01 	sts	0x0168, r1
    541a:	10 92 69 01 	sts	0x0169, r1
    541e:	10 92 6a 01 	sts	0x016A, r1
    5422:	10 92 6b 01 	sts	0x016B, r1
			disableIR = 1;
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	80 93 6c 01 	sts	0x016C, r24
    542c:	08 c0       	rjmp	.+16     	; 0x543e <main+0x5c>
		}
		else if(updateTime){
    542e:	80 91 67 01 	lds	r24, 0x0167
    5432:	88 23       	and	r24, r24
    5434:	21 f0       	breq	.+8      	; 0x543e <main+0x5c>
			updateTime = 0;
    5436:	10 92 67 01 	sts	0x0167, r1
			Clock_CalculateTime();
    543a:	0e 94 0e 22 	call	0x441c	; 0x441c <Clock_CalculateTime>
		}
		if(clockOn && power){//EXTI was triggered by the Hall Effect Sensor
    543e:	80 91 66 01 	lds	r24, 0x0166
    5442:	88 23       	and	r24, r24
    5444:	b9 f0       	breq	.+46     	; 0x5474 <main+0x92>
    5446:	80 91 6d 01 	lds	r24, 0x016D
    544a:	88 23       	and	r24, r24
    544c:	99 f0       	breq	.+38     	; 0x5474 <main+0x92>
			if(mode == ANALOG){
    544e:	80 91 6e 01 	lds	r24, 0x016E
    5452:	88 23       	and	r24, r24
    5454:	19 f4       	brne	.+6      	; 0x545c <main+0x7a>
				Clock_AnalogMode();
    5456:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <Clock_AnalogMode>
    545a:	09 c0       	rjmp	.+18     	; 0x546e <main+0x8c>
			}
			else if(mode == DIGITAL){
    545c:	80 91 6e 01 	lds	r24, 0x016E
    5460:	81 30       	cpi	r24, 0x01	; 1
    5462:	19 f4       	brne	.+6      	; 0x546a <main+0x88>
				Clock_DigitalMode();
    5464:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <Clock_DigitalMode>
    5468:	02 c0       	rjmp	.+4      	; 0x546e <main+0x8c>
			}
			else{
				Clock_HybridMode();
    546a:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <Clock_HybridMode>
			}

			Clock_POV();
    546e:	0e 94 3c 29 	call	0x5278	; 0x5278 <Clock_POV>
    5472:	bf cf       	rjmp	.-130    	; 0x53f2 <main+0x10>
		}
		else{
			Clock_Reset();
    5474:	0e 94 c6 29 	call	0x538c	; 0x538c <Clock_Reset>
    5478:	bc cf       	rjmp	.-136    	; 0x53f2 <main+0x10>

0000547a <__mulsi3>:
    547a:	62 9f       	mul	r22, r18
    547c:	d0 01       	movw	r26, r0
    547e:	73 9f       	mul	r23, r19
    5480:	f0 01       	movw	r30, r0
    5482:	82 9f       	mul	r24, r18
    5484:	e0 0d       	add	r30, r0
    5486:	f1 1d       	adc	r31, r1
    5488:	64 9f       	mul	r22, r20
    548a:	e0 0d       	add	r30, r0
    548c:	f1 1d       	adc	r31, r1
    548e:	92 9f       	mul	r25, r18
    5490:	f0 0d       	add	r31, r0
    5492:	83 9f       	mul	r24, r19
    5494:	f0 0d       	add	r31, r0
    5496:	74 9f       	mul	r23, r20
    5498:	f0 0d       	add	r31, r0
    549a:	65 9f       	mul	r22, r21
    549c:	f0 0d       	add	r31, r0
    549e:	99 27       	eor	r25, r25
    54a0:	72 9f       	mul	r23, r18
    54a2:	b0 0d       	add	r27, r0
    54a4:	e1 1d       	adc	r30, r1
    54a6:	f9 1f       	adc	r31, r25
    54a8:	63 9f       	mul	r22, r19
    54aa:	b0 0d       	add	r27, r0
    54ac:	e1 1d       	adc	r30, r1
    54ae:	f9 1f       	adc	r31, r25
    54b0:	bd 01       	movw	r22, r26
    54b2:	cf 01       	movw	r24, r30
    54b4:	11 24       	eor	r1, r1
    54b6:	08 95       	ret

000054b8 <__udivmodhi4>:
    54b8:	aa 1b       	sub	r26, r26
    54ba:	bb 1b       	sub	r27, r27
    54bc:	51 e1       	ldi	r21, 0x11	; 17
    54be:	07 c0       	rjmp	.+14     	; 0x54ce <__udivmodhi4_ep>

000054c0 <__udivmodhi4_loop>:
    54c0:	aa 1f       	adc	r26, r26
    54c2:	bb 1f       	adc	r27, r27
    54c4:	a6 17       	cp	r26, r22
    54c6:	b7 07       	cpc	r27, r23
    54c8:	10 f0       	brcs	.+4      	; 0x54ce <__udivmodhi4_ep>
    54ca:	a6 1b       	sub	r26, r22
    54cc:	b7 0b       	sbc	r27, r23

000054ce <__udivmodhi4_ep>:
    54ce:	88 1f       	adc	r24, r24
    54d0:	99 1f       	adc	r25, r25
    54d2:	5a 95       	dec	r21
    54d4:	a9 f7       	brne	.-22     	; 0x54c0 <__udivmodhi4_loop>
    54d6:	80 95       	com	r24
    54d8:	90 95       	com	r25
    54da:	bc 01       	movw	r22, r24
    54dc:	cd 01       	movw	r24, r26
    54de:	08 95       	ret

000054e0 <__udivmodsi4>:
    54e0:	a1 e2       	ldi	r26, 0x21	; 33
    54e2:	1a 2e       	mov	r1, r26
    54e4:	aa 1b       	sub	r26, r26
    54e6:	bb 1b       	sub	r27, r27
    54e8:	fd 01       	movw	r30, r26
    54ea:	0d c0       	rjmp	.+26     	; 0x5506 <__udivmodsi4_ep>

000054ec <__udivmodsi4_loop>:
    54ec:	aa 1f       	adc	r26, r26
    54ee:	bb 1f       	adc	r27, r27
    54f0:	ee 1f       	adc	r30, r30
    54f2:	ff 1f       	adc	r31, r31
    54f4:	a2 17       	cp	r26, r18
    54f6:	b3 07       	cpc	r27, r19
    54f8:	e4 07       	cpc	r30, r20
    54fa:	f5 07       	cpc	r31, r21
    54fc:	20 f0       	brcs	.+8      	; 0x5506 <__udivmodsi4_ep>
    54fe:	a2 1b       	sub	r26, r18
    5500:	b3 0b       	sbc	r27, r19
    5502:	e4 0b       	sbc	r30, r20
    5504:	f5 0b       	sbc	r31, r21

00005506 <__udivmodsi4_ep>:
    5506:	66 1f       	adc	r22, r22
    5508:	77 1f       	adc	r23, r23
    550a:	88 1f       	adc	r24, r24
    550c:	99 1f       	adc	r25, r25
    550e:	1a 94       	dec	r1
    5510:	69 f7       	brne	.-38     	; 0x54ec <__udivmodsi4_loop>
    5512:	60 95       	com	r22
    5514:	70 95       	com	r23
    5516:	80 95       	com	r24
    5518:	90 95       	com	r25
    551a:	9b 01       	movw	r18, r22
    551c:	ac 01       	movw	r20, r24
    551e:	bd 01       	movw	r22, r26
    5520:	cf 01       	movw	r24, r30
    5522:	08 95       	ret

00005524 <__divmodsi4>:
    5524:	97 fb       	bst	r25, 7
    5526:	09 2e       	mov	r0, r25
    5528:	05 26       	eor	r0, r21
    552a:	0e d0       	rcall	.+28     	; 0x5548 <__divmodsi4_neg1>
    552c:	57 fd       	sbrc	r21, 7
    552e:	04 d0       	rcall	.+8      	; 0x5538 <__divmodsi4_neg2>
    5530:	d7 df       	rcall	.-82     	; 0x54e0 <__udivmodsi4>
    5532:	0a d0       	rcall	.+20     	; 0x5548 <__divmodsi4_neg1>
    5534:	00 1c       	adc	r0, r0
    5536:	38 f4       	brcc	.+14     	; 0x5546 <__divmodsi4_exit>

00005538 <__divmodsi4_neg2>:
    5538:	50 95       	com	r21
    553a:	40 95       	com	r20
    553c:	30 95       	com	r19
    553e:	21 95       	neg	r18
    5540:	3f 4f       	sbci	r19, 0xFF	; 255
    5542:	4f 4f       	sbci	r20, 0xFF	; 255
    5544:	5f 4f       	sbci	r21, 0xFF	; 255

00005546 <__divmodsi4_exit>:
    5546:	08 95       	ret

00005548 <__divmodsi4_neg1>:
    5548:	f6 f7       	brtc	.-4      	; 0x5546 <__divmodsi4_exit>
    554a:	90 95       	com	r25
    554c:	80 95       	com	r24
    554e:	70 95       	com	r23
    5550:	61 95       	neg	r22
    5552:	7f 4f       	sbci	r23, 0xFF	; 255
    5554:	8f 4f       	sbci	r24, 0xFF	; 255
    5556:	9f 4f       	sbci	r25, 0xFF	; 255
    5558:	08 95       	ret

0000555a <__prologue_saves__>:
    555a:	2f 92       	push	r2
    555c:	3f 92       	push	r3
    555e:	4f 92       	push	r4
    5560:	5f 92       	push	r5
    5562:	6f 92       	push	r6
    5564:	7f 92       	push	r7
    5566:	8f 92       	push	r8
    5568:	9f 92       	push	r9
    556a:	af 92       	push	r10
    556c:	bf 92       	push	r11
    556e:	cf 92       	push	r12
    5570:	df 92       	push	r13
    5572:	ef 92       	push	r14
    5574:	ff 92       	push	r15
    5576:	0f 93       	push	r16
    5578:	1f 93       	push	r17
    557a:	cf 93       	push	r28
    557c:	df 93       	push	r29
    557e:	cd b7       	in	r28, 0x3d	; 61
    5580:	de b7       	in	r29, 0x3e	; 62
    5582:	ca 1b       	sub	r28, r26
    5584:	db 0b       	sbc	r29, r27
    5586:	0f b6       	in	r0, 0x3f	; 63
    5588:	f8 94       	cli
    558a:	de bf       	out	0x3e, r29	; 62
    558c:	0f be       	out	0x3f, r0	; 63
    558e:	cd bf       	out	0x3d, r28	; 61
    5590:	09 94       	ijmp

00005592 <__epilogue_restores__>:
    5592:	2a 88       	ldd	r2, Y+18	; 0x12
    5594:	39 88       	ldd	r3, Y+17	; 0x11
    5596:	48 88       	ldd	r4, Y+16	; 0x10
    5598:	5f 84       	ldd	r5, Y+15	; 0x0f
    559a:	6e 84       	ldd	r6, Y+14	; 0x0e
    559c:	7d 84       	ldd	r7, Y+13	; 0x0d
    559e:	8c 84       	ldd	r8, Y+12	; 0x0c
    55a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    55a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    55a4:	b9 84       	ldd	r11, Y+9	; 0x09
    55a6:	c8 84       	ldd	r12, Y+8	; 0x08
    55a8:	df 80       	ldd	r13, Y+7	; 0x07
    55aa:	ee 80       	ldd	r14, Y+6	; 0x06
    55ac:	fd 80       	ldd	r15, Y+5	; 0x05
    55ae:	0c 81       	ldd	r16, Y+4	; 0x04
    55b0:	1b 81       	ldd	r17, Y+3	; 0x03
    55b2:	aa 81       	ldd	r26, Y+2	; 0x02
    55b4:	b9 81       	ldd	r27, Y+1	; 0x01
    55b6:	ce 0f       	add	r28, r30
    55b8:	d1 1d       	adc	r29, r1
    55ba:	0f b6       	in	r0, 0x3f	; 63
    55bc:	f8 94       	cli
    55be:	de bf       	out	0x3e, r29	; 62
    55c0:	0f be       	out	0x3f, r0	; 63
    55c2:	cd bf       	out	0x3d, r28	; 61
    55c4:	ed 01       	movw	r28, r26
    55c6:	08 95       	ret

000055c8 <_exit>:
    55c8:	f8 94       	cli

000055ca <__stop_program>:
    55ca:	ff cf       	rjmp	.-2      	; 0x55ca <__stop_program>
